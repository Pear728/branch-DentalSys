[{"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\main.js":"1","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\App.vue":"2","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\store\\index.js":"3","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\router\\index.js":"4","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\Login.vue":"5","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\admin\\Data.vue":"6","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\Register.vue":"7","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\admin\\Users.vue":"8","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\admin\\Settings.vue":"9","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\doctor\\Schedule.vue":"10","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\admin\\Home.vue":"11","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\doctor\\Profile.vue":"12","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\doctor\\MedicalRecords.vue":"13","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\doctor\\Layout.vue":"14","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\admin\\Layout.vue":"15","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\doctor\\Home.vue":"16","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\doctor\\Appointments.vue":"17","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\patient\\Profile.vue":"18","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\patient\\MedicalRecords.vue":"19","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\patient\\Payment.vue":"20","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\patient\\Layout.vue":"21","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\patient\\Appointment.vue":"22","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\patient\\Home.vue":"23"},{"size":982,"mtime":1744777950092,"results":"24","hashOfConfig":"25"},{"size":393,"mtime":1744720314302,"results":"26","hashOfConfig":"25"},{"size":1206,"mtime":1744720345670,"results":"27","hashOfConfig":"25"},{"size":4315,"mtime":1744778661866,"results":"28","hashOfConfig":"25"},{"size":4544,"mtime":1744778647390,"results":"29","hashOfConfig":"25"},{"size":19070,"mtime":1744791890254,"results":"30","hashOfConfig":"25"},{"size":7732,"mtime":1744781421853,"results":"31","hashOfConfig":"25"},{"size":16133,"mtime":1744791354690,"results":"32","hashOfConfig":"25"},{"size":14869,"mtime":1744723191928,"results":"33","hashOfConfig":"25"},{"size":21233,"mtime":1744721211943,"results":"34","hashOfConfig":"25"},{"size":16757,"mtime":1744792807336,"results":"35","hashOfConfig":"25"},{"size":26095,"mtime":1744788388687,"results":"36","hashOfConfig":"25"},{"size":17161,"mtime":1744721116954,"results":"37","hashOfConfig":"25"},{"size":3604,"mtime":1744785013371,"results":"38","hashOfConfig":"25"},{"size":3302,"mtime":1744792787317,"results":"39","hashOfConfig":"25"},{"size":13521,"mtime":1744720847611,"results":"40","hashOfConfig":"25"},{"size":25688,"mtime":1744786526838,"results":"41","hashOfConfig":"25"},{"size":23024,"mtime":1744803470207,"results":"42","hashOfConfig":"25"},{"size":13024,"mtime":1744720694475,"results":"43","hashOfConfig":"25"},{"size":21647,"mtime":1744795333282,"results":"44","hashOfConfig":"25"},{"size":3456,"mtime":1744720420237,"results":"45","hashOfConfig":"25"},{"size":16458,"mtime":1744801484417,"results":"46","hashOfConfig":"25"},{"size":8952,"mtime":1744801471092,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1itm3cf",{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\main.js",[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\App.vue",[],[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\store\\index.js",[],[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\router\\index.js",[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\Login.vue",[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\admin\\Data.vue",[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\Register.vue",[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\admin\\Users.vue",[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\admin\\Settings.vue",[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\doctor\\Schedule.vue",["98"],"<template>\n  <div class=\"schedule-container\">\n    <el-row :gutter=\"20\">\n      <el-col :span=\"16\">\n        <el-card class=\"schedule-card\">\n          <div slot=\"header\">\n            <span>我的排班</span>\n            <el-button style=\"float: right; padding: 3px 0\" type=\"text\" @click=\"refreshSchedules\">\n              <i class=\"el-icon-refresh\"></i> 刷新\n            </el-button>\n          </div>\n          \n          <el-calendar class=\"schedule-calendar\">\n            <template slot=\"dateCell\" slot-scope=\"{date, data}\">\n              <div \n                class=\"calendar-cell\"\n                :class=\"{\n                  'has-schedule': hasSchedule(data.day),\n                  'selected': isDateSelected(data.day)\n                }\"\n                @click=\"handleDateClick(data.day)\">\n                <div class=\"calendar-day\">{{ data.day.split('-')[2] }}</div>\n                <div v-if=\"hasSchedule(data.day)\" class=\"schedule-time\">\n                  {{ getScheduleTime(data.day) }}\n                </div>\n              </div>\n            </template>\n          </el-calendar>\n        </el-card>\n      </el-col>\n      \n      <el-col :span=\"8\">\n        <el-card class=\"date-detail-card\">\n          <div slot=\"header\">\n            <span>{{ selectedDate ? formatDate(selectedDate) + ' 排班详情' : '日期详情' }}</span>\n            <el-button \n              v-if=\"selectedDate\"\n              style=\"float: right; padding: 3px 0\" \n              type=\"text\" \n              @click=\"createSchedule\">\n              {{ currentSchedule ? '修改排班' : '添加排班' }}\n            </el-button>\n          </div>\n          \n          <div v-if=\"!selectedDate\" class=\"empty-detail\">\n            <i class=\"el-icon-date\"></i>\n            <p>请先在日历中选择一个日期</p>\n          </div>\n          \n          <div v-else-if=\"currentSchedule\" class=\"schedule-detail\">\n            <el-descriptions border direction=\"vertical\" :column=\"1\">\n              <el-descriptions-item label=\"开始时间\">{{ currentSchedule.startTime }}</el-descriptions-item>\n              <el-descriptions-item label=\"结束时间\">{{ currentSchedule.endTime }}</el-descriptions-item>\n              <el-descriptions-item label=\"最大预约数\">{{ currentSchedule.maxAppointments }}</el-descriptions-item>\n              <el-descriptions-item label=\"已预约数\">{{ currentSchedule.appointedCount }}</el-descriptions-item>\n              <el-descriptions-item label=\"状态\">\n                <el-tag :type=\"currentSchedule.status === 1 ? 'success' : 'danger'\">\n                  {{ currentSchedule.status === 1 ? '可预约' : '不可用' }}\n                </el-tag>\n              </el-descriptions-item>\n              <el-descriptions-item label=\"备注\">{{ currentSchedule.remark || '无' }}</el-descriptions-item>\n            </el-descriptions>\n            \n            <div class=\"schedule-operations\">\n              <el-button \n                type=\"primary\" \n                size=\"small\"\n                :disabled=\"currentSchedule.appointedCount > 0\"\n                @click=\"createSchedule\">\n                修改排班\n              </el-button>\n              <el-button \n                :type=\"currentSchedule.status === 1 ? 'danger' : 'success'\" \n                size=\"small\"\n                @click=\"toggleScheduleStatus\">\n                {{ currentSchedule.status === 1 ? '设为不可约' : '设为可预约' }}\n              </el-button>\n            </div>\n          </div>\n          \n          <div v-else class=\"empty-schedule\">\n            <i class=\"el-icon-time\"></i>\n            <p>该日期暂无排班</p>\n            <el-button type=\"primary\" @click=\"createSchedule\">添加排班</el-button>\n          </div>\n        </el-card>\n        \n        <el-card class=\"batch-card\">\n          <div slot=\"header\">\n            <span>批量排班</span>\n          </div>\n          \n          <el-form :model=\"batchForm\" :rules=\"batchRules\" ref=\"batchForm\" label-width=\"100px\">\n            <el-form-item label=\"日期范围\" prop=\"dateRange\">\n              <el-date-picker\n                v-model=\"batchForm.dateRange\"\n                type=\"daterange\"\n                range-separator=\"至\"\n                start-placeholder=\"开始日期\"\n                end-placeholder=\"结束日期\"\n                :picker-options=\"datePickerOptions\"\n                style=\"width: 100%\">\n              </el-date-picker>\n            </el-form-item>\n            \n            <el-form-item label=\"时间段\" required>\n              <el-row :gutter=\"10\">\n                <el-col :span=\"11\">\n                  <el-form-item prop=\"startTime\">\n                    <el-time-picker\n                      v-model=\"batchForm.startTime\"\n                      format=\"HH:mm\"\n                      placeholder=\"开始时间\"\n                      style=\"width: 100%\">\n                    </el-time-picker>\n                  </el-form-item>\n                </el-col>\n                <el-col class=\"center\" :span=\"2\">至</el-col>\n                <el-col :span=\"11\">\n                  <el-form-item prop=\"endTime\">\n                    <el-time-picker\n                      v-model=\"batchForm.endTime\"\n                      format=\"HH:mm\"\n                      placeholder=\"结束时间\"\n                      style=\"width: 100%\">\n                    </el-time-picker>\n                  </el-form-item>\n                </el-col>\n              </el-row>\n            </el-form-item>\n            \n            <el-form-item label=\"最大预约数\" prop=\"maxAppointments\">\n              <el-input-number\n                v-model=\"batchForm.maxAppointments\"\n                :min=\"1\"\n                :max=\"50\"\n                style=\"width: 100%\">\n              </el-input-number>\n            </el-form-item>\n            \n            <el-form-item>\n              <el-button type=\"primary\" @click=\"submitBatchSchedule\" :loading=\"batchLoading\">批量创建</el-button>\n              <el-button @click=\"resetBatchForm\">重置</el-button>\n            </el-form-item>\n          </el-form>\n        </el-card>\n      </el-col>\n    </el-row>\n    \n    <!-- 排班编辑对话框 -->\n    <el-dialog :title=\"currentSchedule ? '修改排班' : '添加排班'\" :visible.sync=\"scheduleDialogVisible\" width=\"500px\">\n      <el-form :model=\"scheduleForm\" :rules=\"scheduleRules\" ref=\"scheduleForm\" label-width=\"100px\">\n        <el-form-item label=\"日期\">\n          <el-input v-model=\"formattedSelectedDate\" disabled></el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"开始时间\" prop=\"startTime\">\n          <el-time-picker\n            v-model=\"scheduleForm.startTime\"\n            format=\"HH:mm\"\n            placeholder=\"开始时间\"\n            style=\"width: 100%\">\n          </el-time-picker>\n        </el-form-item>\n        \n        <el-form-item label=\"结束时间\" prop=\"endTime\">\n          <el-time-picker\n            v-model=\"scheduleForm.endTime\"\n            format=\"HH:mm\"\n            placeholder=\"结束时间\"\n            style=\"width: 100%\">\n          </el-time-picker>\n        </el-form-item>\n        \n        <el-form-item label=\"最大预约数\" prop=\"maxAppointments\">\n          <el-input-number\n            v-model=\"scheduleForm.maxAppointments\"\n            :min=\"1\"\n            :max=\"50\"\n            style=\"width: 100%\">\n          </el-input-number>\n        </el-form-item>\n        \n        <el-form-item label=\"状态\" prop=\"status\">\n          <el-radio-group v-model=\"scheduleForm.status\">\n            <el-radio :label=\"1\">可预约</el-radio>\n            <el-radio :label=\"0\">不可用</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        \n        <el-form-item label=\"备注\">\n          <el-input\n            type=\"textarea\"\n            v-model=\"scheduleForm.remark\"\n            placeholder=\"请输入备注信息\"\n            :rows=\"2\">\n          </el-input>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"scheduleDialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"submitSchedule\" :loading=\"submitLoading\">确定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'DoctorSchedule',\n  data() {\n    // 验证结束时间必须大于开始时间\n    const validateEndTime = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('请选择结束时间'))\n      } else if (!this.scheduleForm.startTime) {\n        callback(new Error('请先选择开始时间'))\n      } else {\n        const startTime = new Date(this.scheduleForm.startTime)\n        const endTime = new Date(value)\n        if (endTime <= startTime) {\n          callback(new Error('结束时间必须大于开始时间'))\n        } else {\n          callback()\n        }\n      }\n    }\n    \n    // 批量创建时验证结束时间\n    const validateBatchEndTime = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('请选择结束时间'))\n      } else if (!this.batchForm.startTime) {\n        callback(new Error('请先选择开始时间'))\n      } else {\n        const startTime = new Date(this.batchForm.startTime)\n        const endTime = new Date(value)\n        if (endTime <= startTime) {\n          callback(new Error('结束时间必须大于开始时间'))\n        } else {\n          callback()\n        }\n      }\n    }\n    \n    return {\n      schedules: [],\n      selectedDate: null,\n      currentSchedule: null,\n      submitLoading: false,\n      batchLoading: false,\n      \n      // 排班表单\n      scheduleDialogVisible: false,\n      scheduleForm: {\n        id: null,\n        doctorId: null,\n        scheduleDate: null,\n        startTime: null,\n        endTime: null,\n        maxAppointments: 10,\n        status: 1,\n        remark: ''\n      },\n      scheduleRules: {\n        startTime: [\n          { required: true, message: '请选择开始时间', trigger: 'change' }\n        ],\n        endTime: [\n          { required: true, message: '请选择结束时间', trigger: 'change' },\n          { validator: validateEndTime, trigger: 'change' }\n        ],\n        maxAppointments: [\n          { required: true, message: '请设置最大预约数', trigger: 'change' }\n        ]\n      },\n      \n      // 批量排班表单\n      batchForm: {\n        dateRange: null,\n        startTime: null,\n        endTime: null,\n        maxAppointments: 10\n      },\n      batchRules: {\n        dateRange: [\n          { required: true, message: '请选择日期范围', trigger: 'change' }\n        ],\n        startTime: [\n          { required: true, message: '请选择开始时间', trigger: 'change' }\n        ],\n        endTime: [\n          { required: true, message: '请选择结束时间', trigger: 'change' },\n          { validator: validateBatchEndTime, trigger: 'change' }\n        ],\n        maxAppointments: [\n          { required: true, message: '请设置最大预约数', trigger: 'change' }\n        ]\n      },\n      \n      // 日期选择器选项\n      datePickerOptions: {\n        disabledDate(time) {\n          // 禁用过去的日期\n          const today = new Date()\n          today.setHours(0, 0, 0, 0)\n          return time.getTime() < today.getTime()\n        }\n      }\n    }\n  },\n  computed: {\n    ...mapGetters(['currentUser']),\n    \n    // 格式化后的选中日期\n    formattedSelectedDate() {\n      return this.selectedDate ? this.formatDate(this.selectedDate) : ''\n    }\n  },\n  mounted() {\n    this.fetchSchedules()\n  },\n  methods: {\n    // 获取排班列表\n    fetchSchedules() {\n      this.$http.get(`/schedule/doctor/${this.currentUser.id}`)\n        .then(response => {\n          if (response.data.code === 200) {\n            this.schedules = response.data.data\n            \n            // 如果有选中的日期，更新当前排班信息\n            if (this.selectedDate) {\n              this.updateCurrentSchedule()\n            }\n          }\n        })\n        .catch(error => {\n          console.error('获取排班列表错误:', error)\n          this.$message.error('获取排班列表失败，请稍后重试')\n        })\n    },\n    \n    // 刷新排班列表\n    refreshSchedules() {\n      this.fetchSchedules()\n    },\n    \n    // 检查指定日期是否有排班\n    hasSchedule(day) {\n      return this.schedules.some(schedule => {\n        const scheduleDate = this.formatDate(new Date(schedule.scheduleDate))\n        return scheduleDate === day\n      })\n    },\n    \n    // 获取指定日期的排班时间\n    getScheduleTime(day) {\n      const schedule = this.schedules.find(schedule => {\n        const scheduleDate = this.formatDate(new Date(schedule.scheduleDate))\n        return scheduleDate === day\n      })\n      \n      if (schedule) {\n        return `${schedule.startTime}-${schedule.endTime}`\n      }\n      \n      return ''\n    },\n    \n    // 处理日期点击\n    handleDateClick(day) {\n      // 转换为Date对象\n      const date = new Date(day)\n      \n      // 如果点击相同日期，则取消选择\n      if (this.selectedDate && this.formatDate(this.selectedDate) === day) {\n        this.selectedDate = null\n        this.currentSchedule = null\n      } else {\n        this.selectedDate = date\n        this.updateCurrentSchedule()\n      }\n    },\n    \n    // 检查日期是否被选中\n    isDateSelected(day) {\n      return this.selectedDate && this.formatDate(this.selectedDate) === day\n    },\n    \n    // 更新当前选中日期的排班信息\n    updateCurrentSchedule() {\n      if (!this.selectedDate) return\n      \n      const selectedDateStr = this.formatDate(this.selectedDate)\n      const schedule = this.schedules.find(schedule => {\n        const scheduleDate = this.formatDate(new Date(schedule.scheduleDate))\n        return scheduleDate === selectedDateStr\n      })\n      \n      this.currentSchedule = schedule || null\n    },\n    \n    // 创建/修改排班\n    createSchedule() {\n      if (!this.selectedDate) {\n        this.$message.warning('请先选择一个日期')\n        return\n      }\n      \n      if (this.currentSchedule && this.currentSchedule.appointedCount > 0) {\n        this.$message.warning('该排班已有患者预约，无法修改')\n        return\n      }\n      \n      // 初始化表单\n      this.scheduleForm = this.currentSchedule ? { ...this.currentSchedule } : {\n        id: null,\n        doctorId: this.currentUser.id,\n        scheduleDate: this.selectedDate,\n        startTime: null,\n        endTime: null,\n        maxAppointments: 10,\n        status: 1,\n        remark: ''\n      }\n      \n      // 如果是修改排班，需要转换startTime和endTime为Date对象\n      if (this.currentSchedule) {\n        const [startHour, startMinute] = this.currentSchedule.startTime.split(':').map(Number)\n        const [endHour, endMinute] = this.currentSchedule.endTime.split(':').map(Number)\n        \n        const startTime = new Date()\n        startTime.setHours(startHour, startMinute, 0, 0)\n        \n        const endTime = new Date()\n        endTime.setHours(endHour, endMinute, 0, 0)\n        \n        this.scheduleForm.startTime = startTime\n        this.scheduleForm.endTime = endTime\n      }\n      \n      this.scheduleDialogVisible = true\n      \n      // 等待Dialog渲染完成后，重置表单验证\n      this.$nextTick(() => {\n        this.$refs.scheduleForm && this.$refs.scheduleForm.clearValidate()\n      })\n    },\n    \n    // 提交排班\n    submitSchedule() {\n      this.$refs.scheduleForm.validate(valid => {\n        if (valid) {\n          this.submitLoading = true\n          \n          // 处理表单数据\n          const formData = { ...this.scheduleForm }\n          \n          // 处理日期和时间\n          formData.scheduleDate = this.formatDate(this.selectedDate)\n          formData.startTime = this.formatTime(formData.startTime)\n          formData.endTime = this.formatTime(formData.endTime)\n          \n          // 判断是创建还是更新\n          const method = formData.id ? 'put' : 'post'\n          const url = '/schedule'\n          \n          this.$http[method](url, formData)\n            .then(response => {\n              if (response.data.code === 200) {\n                this.$message.success(formData.id ? '排班修改成功' : '排班创建成功')\n                this.scheduleDialogVisible = false\n                \n                // 刷新排班列表\n                this.fetchSchedules()\n              } else {\n                this.$message.error(response.data.message || (formData.id ? '排班修改失败' : '排班创建失败'))\n              }\n            })\n            .catch(error => {\n              console.error('提交排班错误:', error)\n              this.$message.error(formData.id ? '排班修改失败，请稍后重试' : '排班创建失败，请稍后重试')\n            })\n            .finally(() => {\n              this.submitLoading = false\n            })\n        }\n      })\n    },\n    \n    // 切换排班状态\n    toggleScheduleStatus() {\n      if (!this.currentSchedule) return\n      \n      const newStatus = this.currentSchedule.status === 1 ? 0 : 1\n      \n      this.$http.put(`/schedule/${this.currentSchedule.id}/status/${newStatus}`)\n        .then(response => {\n          if (response.data.code === 200) {\n            this.$message.success(`排班状态已修改为${newStatus === 1 ? '可预约' : '不可用'}`)\n            \n            // 更新排班状态\n            this.currentSchedule.status = newStatus\n          } else {\n            this.$message.error(response.data.message || '修改排班状态失败')\n          }\n        })\n        .catch(error => {\n          console.error('修改排班状态错误:', error)\n          this.$message.error('修改排班状态失败，请稍后重试')\n        })\n    },\n    \n    // 批量创建排班\n    submitBatchSchedule() {\n      this.$refs.batchForm.validate(valid => {\n        if (valid) {\n          this.batchLoading = true\n          \n          // 处理日期和时间\n          const startDate = this.formatDate(this.batchForm.dateRange[0])\n          const endDate = this.formatDate(this.batchForm.dateRange[1])\n          const startTime = this.formatTime(this.batchForm.startTime)\n          const endTime = this.formatTime(this.batchForm.endTime)\n          \n          const params = {\n            doctorId: this.currentUser.id,\n            startDate,\n            endDate,\n            startTime,\n            endTime,\n            maxAppointments: this.batchForm.maxAppointments\n          }\n          \n          this.$http.post('/schedule/batch', null, { params })\n            .then(response => {\n              if (response.data.code === 200) {\n                this.$message.success('批量排班创建成功')\n                this.resetBatchForm()\n                \n                // 刷新排班列表\n                this.fetchSchedules()\n              } else {\n                this.$message.error(response.data.message || '批量排班创建失败')\n              }\n            })\n            .catch(error => {\n              console.error('批量排班错误:', error)\n              this.$message.error('批量排班创建失败，请稍后重试')\n            })\n            .finally(() => {\n              this.batchLoading = false\n            })\n        }\n      })\n    },\n    \n    // 重置批量排班表单\n    resetBatchForm() {\n      this.$refs.batchForm.resetFields()\n    },\n    \n    // 格式化日期为 YYYY-MM-DD\n    formatDate(date) {\n      if (!date) return ''\n      \n      const d = new Date(date)\n      const year = d.getFullYear()\n      const month = (d.getMonth() + 1).toString().padStart(2, '0')\n      const day = d.getDate().toString().padStart(2, '0')\n      \n      return `${year}-${month}-${day}`\n    },\n    \n    // 格式化时间为 HH:MM\n    formatTime(date) {\n      if (!date) return ''\n      \n      const d = new Date(date)\n      const hours = d.getHours().toString().padStart(2, '0')\n      const minutes = d.getMinutes().toString().padStart(2, '0')\n      \n      return `${hours}:${minutes}`\n    }\n  }\n}\n</script>\n\n<style scoped>\n.schedule-container {\n  height: 100%;\n}\n\n.schedule-card,\n.date-detail-card,\n.batch-card {\n  margin-bottom: 20px;\n}\n\n.schedule-calendar {\n  background-color: #fff;\n}\n\n.calendar-cell {\n  height: 100%;\n  padding: 4px;\n  text-align: center;\n  position: relative;\n  cursor: pointer;\n  border-radius: 4px;\n  transition: background-color 0.3s;\n}\n\n.calendar-cell:hover {\n  background-color: #f5f7fa;\n}\n\n.calendar-day {\n  font-weight: bold;\n}\n\n.has-schedule {\n  background-color: #f0f9eb;\n}\n\n.has-schedule:hover {\n  background-color: #e1f3d8;\n}\n\n.schedule-time {\n  font-size: 12px;\n  color: #67c23a;\n  margin-top: 2px;\n}\n\n.selected {\n  background-color: #e6f7ff;\n  border: 1px solid #1890ff;\n}\n\n.selected.has-schedule {\n  background-color: #d5f3c9;\n}\n\n.empty-detail,\n.empty-schedule {\n  text-align: center;\n  padding: 40px 0;\n  color: #909399;\n}\n\n.empty-detail i,\n.empty-schedule i {\n  font-size: 40px;\n  margin-bottom: 10px;\n}\n\n.schedule-detail {\n  padding: 10px 0;\n}\n\n.schedule-operations {\n  margin-top: 20px;\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n}\n\n.center {\n  text-align: center;\n  line-height: 40px;\n}\n</style>\n","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\admin\\Home.vue",["99"],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\doctor\\Profile.vue",[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\doctor\\MedicalRecords.vue",[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\doctor\\Layout.vue",[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\admin\\Layout.vue",[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\doctor\\Home.vue",["100"],"<template>\n  <div class=\"doctor-home\">\n    <el-row :gutter=\"20\">\n      <el-col :span=\"16\">\n        <el-card class=\"welcome-card\">\n          <div class=\"welcome-message\">\n            <h2>您好，{{ currentUser.realName }} 医生！</h2>\n            <p>欢迎使用智能齿科就诊系统医生端</p>\n          </div>\n          <div class=\"welcome-tips\">\n            <h3>使用提示：</h3>\n            <ul>\n              <li>您可以在\"预约患者\"中查看和管理今日的预约</li>\n              <li>\"诊疗记录\"中可以录入和查看患者的诊断记录</li>\n              <li>\"排班管理\"可以设置您的出诊时间</li>\n              <li>有任何问题请联系系统管理员</li>\n            </ul>\n          </div>\n        </el-card>\n        \n        <el-card class=\"today-card\">\n          <div slot=\"header\">\n            <span>今日概览</span>\n            <el-button style=\"float: right; padding: 3px 0\" type=\"text\" @click=\"refreshTodayData\">\n              <i class=\"el-icon-refresh\"></i> 刷新\n            </el-button>\n          </div>\n          <el-row :gutter=\"20\" class=\"data-overview\">\n            <el-col :span=\"8\">\n              <div class=\"data-item\">\n                <div class=\"data-icon bg-primary\">\n                  <i class=\"el-icon-user\"></i>\n                </div>\n                <div class=\"data-info\">\n                  <div class=\"data-title\">今日预约</div>\n                  <div class=\"data-value\">{{ todayAppointments.length }}</div>\n                </div>\n              </div>\n            </el-col>\n            <el-col :span=\"8\">\n              <div class=\"data-item\">\n                <div class=\"data-icon bg-success\">\n                  <i class=\"el-icon-finished\"></i>\n                </div>\n                <div class=\"data-info\">\n                  <div class=\"data-title\">已完成</div>\n                  <div class=\"data-value\">{{ getCompletedAppointments().length }}</div>\n                </div>\n              </div>\n            </el-col>\n            <el-col :span=\"8\">\n              <div class=\"data-item\">\n                <div class=\"data-icon bg-warning\">\n                  <i class=\"el-icon-time\"></i>\n                </div>\n                <div class=\"data-info\">\n                  <div class=\"data-title\">待就诊</div>\n                  <div class=\"data-value\">{{ getPendingAppointments().length }}</div>\n                </div>\n              </div>\n            </el-col>\n          </el-row>\n        </el-card>\n        \n        <el-card class=\"schedule-card\">\n          <div slot=\"header\">\n            <span>我的排班</span>\n            <el-button style=\"float: right; padding: 3px 0\" type=\"text\" @click=\"goToSchedule\">\n              管理排班\n            </el-button>\n          </div>\n          <div class=\"schedule-content\">\n            <el-calendar v-model=\"currentDate\">\n              <template slot=\"dateCell\" slot-scope=\"{date, data}\">\n                <div class=\"calendar-cell\" :class=\"{'has-schedule': hasSchedule(data.day)}\">\n                  <div class=\"calendar-day\">{{ data.day.split('-')[2] }}</div>\n                  <div v-if=\"hasSchedule(data.day)\" class=\"schedule-time\">\n                    {{ getScheduleTime(data.day) }}\n                  </div>\n                </div>\n              </template>\n            </el-calendar>\n          </div>\n        </el-card>\n      </el-col>\n      \n      <el-col :span=\"8\">\n        <el-card class=\"today-appointments-card\">\n          <div slot=\"header\">\n            <span>今日预约患者</span>\n            <el-button style=\"float: right; padding: 3px 0\" type=\"text\" @click=\"goToAppointments\">\n              查看全部\n            </el-button>\n          </div>\n          <div v-if=\"todayAppointments.length > 0\" class=\"appointments-list\">\n            <div \n              v-for=\"appointment in todayAppointments\" \n              :key=\"appointment.id\" \n              class=\"appointment-item\"\n              :class=\"{'completed': appointment.status === 2}\">\n              <div class=\"appointment-time\">{{ formatTime(appointment.appointmentTime) }}</div>\n              <div class=\"appointment-info\">\n                <div class=\"patient-name\">{{ appointment.patientName }}</div>\n                <div class=\"treatment-item\">{{ appointment.treatmentItem }}</div>\n              </div>\n              <div class=\"appointment-status\">\n                <el-tag :type=\"getStatusType(appointment.status)\" size=\"mini\">\n                  {{ getStatusText(appointment.status) }}\n                </el-tag>\n              </div>\n            </div>\n          </div>\n          <div v-else class=\"empty-data\">\n            <i class=\"el-icon-date\"></i>\n            <p>今日暂无预约患者</p>\n          </div>\n        </el-card>\n        \n        <el-card class=\"recent-records-card\">\n          <div slot=\"header\">\n            <span>最近诊疗记录</span>\n            <el-button style=\"float: right; padding: 3px 0\" type=\"text\" @click=\"goToRecords\">\n              查看全部\n            </el-button>\n          </div>\n          <div v-if=\"recentRecords.length > 0\" class=\"records-list\">\n            <div v-for=\"record in recentRecords\" :key=\"record.id\" class=\"record-item\">\n              <div class=\"record-date\">{{ formatDate(record.visitDate) }}</div>\n              <div class=\"record-info\">\n                <div class=\"patient-name\">{{ record.patientName }}</div>\n                <div class=\"diagnosis\">{{ record.diagnosis }}</div>\n              </div>\n            </div>\n          </div>\n          <div v-else class=\"empty-data\">\n            <i class=\"el-icon-document\"></i>\n            <p>暂无诊疗记录</p>\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'DoctorHome',\n  data() {\n    return {\n      todayAppointments: [],\n      recentRecords: [],\n      schedules: [],\n      currentDate: new Date(),\n      patientList: []\n    }\n  },\n  computed: {\n    ...mapGetters(['currentUser'])\n  },\n  mounted() {\n    this.fetchPatients()\n    this.fetchTodayAppointments()\n    this.fetchRecentRecords()\n    this.fetchSchedules()\n  },\n  methods: {\n    // 获取患者列表\n    fetchPatients() {\n      this.$http.get('/user/search?role=1')\n        .then(response => {\n          if (response.data.code === 200) {\n            this.patientList = response.data.data\n          }\n        })\n        .catch(error => {\n          console.error('获取患者列表错误:', error)\n        })\n    },\n    \n    // 获取今日预约\n    fetchTodayAppointments() {\n      const today = new Date()\n      const formattedDate = this.formatDateToString(today)\n      \n      this.$http.get(`/appointment/doctor/${this.currentUser.id}/date?date=${formattedDate}`)\n        .then(response => {\n          if (response.data.code === 200) {\n            // 处理预约数据，添加患者姓名\n            this.todayAppointments = response.data.data.map(item => {\n              const patient = this.patientList.find(p => p.id === item.patientId)\n              return {\n                ...item,\n                patientName: patient ? patient.realName : `患者(ID:${item.patientId})`\n              }\n            })\n            \n            // 按预约时间排序\n            this.todayAppointments.sort((a, b) => {\n              return new Date(a.appointmentTime) - new Date(b.appointmentTime)\n            })\n          }\n        })\n        .catch(error => {\n          console.error('获取今日预约错误:', error)\n        })\n    },\n    \n    // 获取最近诊疗记录\n    fetchRecentRecords() {\n      this.$http.get(`/medical-record/doctor/${this.currentUser.id}`)\n        .then(response => {\n          if (response.data.code === 200) {\n            // 只获取最近5条记录\n            const records = response.data.data.slice(0, 5)\n            \n            // 添加患者姓名\n            this.recentRecords = records.map(record => {\n              const patient = this.patientList.find(p => p.id === record.patientId)\n              return {\n                ...record,\n                patientName: patient ? patient.realName : `患者(ID:${record.patientId})`\n              }\n            })\n          }\n        })\n        .catch(error => {\n          console.error('获取诊疗记录错误:', error)\n        })\n    },\n    \n    // 获取排班信息\n    fetchSchedules() {\n      this.$http.get(`/schedule/doctor/${this.currentUser.id}`)\n        .then(response => {\n          if (response.data.code === 200) {\n            this.schedules = response.data.data\n          }\n        })\n        .catch(error => {\n          console.error('获取排班信息错误:', error)\n        })\n    },\n    \n    // 刷新今日数据\n    refreshTodayData() {\n      this.fetchTodayAppointments()\n      this.fetchRecentRecords()\n    },\n    \n    // 获取已完成预约\n    getCompletedAppointments() {\n      return this.todayAppointments.filter(item => item.status === 2)\n    },\n    \n    // 获取待就诊预约\n    getPendingAppointments() {\n      return this.todayAppointments.filter(item => item.status === 0 || item.status === 1)\n    },\n    \n    // 检查指定日期是否有排班\n    hasSchedule(day) {\n      return this.schedules.some(schedule => {\n        const scheduleDate = this.formatDateToString(new Date(schedule.scheduleDate))\n        return scheduleDate === day\n      })\n    },\n    \n    // 获取指定日期的排班时间\n    getScheduleTime(day) {\n      const schedule = this.schedules.find(schedule => {\n        const scheduleDate = this.formatDateToString(new Date(schedule.scheduleDate))\n        return scheduleDate === day\n      })\n      \n      if (schedule) {\n        return `${schedule.startTime}-${schedule.endTime}`\n      }\n      \n      return ''\n    },\n    \n    // 格式化时间为 HH:MM\n    formatTime(dateString) {\n      if (!dateString) return ''\n      const date = new Date(dateString)\n      return `${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`\n    },\n    \n    // 格式化日期为 YYYY-MM-DD\n    formatDate(dateString) {\n      if (!dateString) return ''\n      const date = new Date(dateString)\n      return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`\n    },\n    \n    // 格式化日期为字符串 YYYY-MM-DD\n    formatDateToString(date) {\n      return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`\n    },\n    \n    // 获取状态文本\n    getStatusText(status) {\n      switch (status) {\n        case 0: return '待确认'\n        case 1: return '已确认'\n        case 2: return '已完成'\n        case 3: return '已取消'\n        default: return '未知状态'\n      }\n    },\n    \n    // 获取状态类型（用于标签颜色）\n    getStatusType(status) {\n      switch (status) {\n        case 0: return 'warning'\n        case 1: return 'primary'\n        case 2: return 'success'\n        case 3: return 'danger'\n        default: return 'info'\n      }\n    },\n    \n    // 跳转到预约管理\n    goToAppointments() {\n      this.$router.push('/doctor/appointments')\n    },\n    \n    // 跳转到诊疗记录\n    goToRecords() {\n      this.$router.push('/doctor/records')\n    },\n    \n    // 跳转到排班管理\n    goToSchedule() {\n      this.$router.push('/doctor/schedule')\n    }\n  }\n}\n</script>\n\n<style scoped>\n.doctor-home {\n  height: 100%;\n}\n\n.welcome-card {\n  margin-bottom: 20px;\n  background-color: #f0f9eb;\n}\n\n.welcome-message {\n  margin-bottom: 20px;\n}\n\n.welcome-message h2 {\n  margin-top: 0;\n  color: #67c23a;\n}\n\n.welcome-tips ul {\n  padding-left: 20px;\n}\n\n.welcome-tips li {\n  margin-bottom: 8px;\n}\n\n.today-card,\n.schedule-card,\n.today-appointments-card,\n.recent-records-card {\n  margin-bottom: 20px;\n}\n\n.data-overview {\n  padding: 10px 0;\n}\n\n.data-item {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  border-radius: 4px;\n  background-color: #f8f8f8;\n}\n\n.data-icon {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 15px;\n  font-size: 24px;\n  color: white;\n}\n\n.data-info {\n  flex: 1;\n}\n\n.data-title {\n  font-size: 14px;\n  color: #606266;\n  margin-bottom: 5px;\n}\n\n.data-value {\n  font-size: 24px;\n  font-weight: bold;\n  color: #333;\n}\n\n.bg-primary {\n  background-color: #409eff;\n}\n\n.bg-success {\n  background-color: #67c23a;\n}\n\n.bg-warning {\n  background-color: #e6a23c;\n}\n\n.calendar-cell {\n  height: 100%;\n  padding: 4px;\n  text-align: center;\n  position: relative;\n}\n\n.calendar-day {\n  font-weight: bold;\n}\n\n.has-schedule {\n  background-color: #f0f9eb;\n}\n\n.schedule-time {\n  font-size: 12px;\n  color: #67c23a;\n  margin-top: 2px;\n}\n\n.appointments-list,\n.records-list {\n  max-height: 400px;\n  overflow-y: auto;\n}\n\n.appointment-item,\n.record-item {\n  display: flex;\n  padding: 10px 0;\n  border-bottom: 1px solid #ebeef5;\n}\n\n.appointment-item:last-child,\n.record-item:last-child {\n  border-bottom: none;\n}\n\n.appointment-time,\n.record-date {\n  width: 60px;\n  font-weight: bold;\n  color: #606266;\n}\n\n.appointment-info,\n.record-info {\n  flex: 1;\n  margin: 0 10px;\n}\n\n.patient-name {\n  font-weight: bold;\n  margin-bottom: 3px;\n}\n\n.treatment-item,\n.diagnosis {\n  font-size: 13px;\n  color: #606266;\n}\n\n.completed {\n  opacity: 0.7;\n}\n\n.empty-data {\n  text-align: center;\n  padding: 30px 0;\n  color: #909399;\n}\n\n.empty-data i {\n  font-size: 30px;\n  margin-bottom: 10px;\n}\n</style>\n","D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\doctor\\Appointments.vue",[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\patient\\Profile.vue",[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\patient\\MedicalRecords.vue",[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\patient\\Payment.vue",[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\patient\\Layout.vue",[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\patient\\Appointment.vue",[],"D:\\Desktop\\AI项目\\进行中\\20250415-WX-07\\工作文件\\dental-system\\frontend\\src\\views\\patient\\Home.vue",[],{"ruleId":"101","severity":1,"message":"102","line":14,"column":52,"nodeType":"103","endLine":14,"endColumn":56},{"ruleId":"104","severity":1,"message":"105","line":397,"column":13,"nodeType":"103","messageId":"106","endLine":397,"endColumn":17},{"ruleId":"101","severity":1,"message":"102","line":74,"column":54,"nodeType":"103","endLine":74,"endColumn":58},"vue/no-unused-vars","'date' is defined but never used.","Identifier","no-unused-vars","'year' is assigned a value but never used.","unusedVar"]