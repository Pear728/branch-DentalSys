{"ast":null,"code":"import { createStore } from 'vuex';\nimport api from '../api';\nexport default createStore({\n  state: {\n    attackLogs: [],\n    defenseConfig: {\n      enableInputValidation: true,\n      enableOutputEncoding: true,\n      enableCsp: true,\n      cspPolicy: \"default-src 'self'; script-src 'self'\"\n    },\n    testResults: null,\n    isLoading: false\n  },\n  getters: {\n    attackLogsCount(state) {\n      return state.attackLogs.length;\n    },\n    getDefenseConfig(state) {\n      return state.defenseConfig;\n    }\n  },\n  mutations: {\n    SET_ATTACK_LOGS(state, logs) {\n      state.attackLogs = logs;\n    },\n    ADD_ATTACK_LOG(state, log) {\n      state.attackLogs.unshift(log);\n    },\n    SET_DEFENSE_CONFIG(state, config) {\n      state.defenseConfig = config;\n    },\n    SET_TEST_RESULTS(state, results) {\n      state.testResults = results;\n    },\n    SET_LOADING(state, status) {\n      state.isLoading = status;\n    }\n  },\n  actions: {\n    async fetchAttackLogs({\n      commit\n    }) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.getAttackLogs();\n        commit('SET_ATTACK_LOGS', response.data);\n      } catch (error) {\n        console.error('Failed to fetch attack logs:', error);\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async saveDefenseConfig({\n      commit\n    }, config) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.updateDefenseConfig(config);\n        commit('SET_DEFENSE_CONFIG', response.data);\n        return true;\n      } catch (error) {\n        console.error('Failed to save defense config:', error);\n        return false;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async runXssTest({\n      commit,\n      dispatch\n    }, payload) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.runXssTest(payload);\n        commit('SET_TEST_RESULTS', response.data);\n\n        // 测试后自动刷新攻击日志和统计\n        await dispatch('fetchAttackLogs');\n        return response.data;\n      } catch (error) {\n        console.error('Failed to run XSS test:', error);\n        return null;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async clearAttackLogs({\n      commit\n    }) {\n      commit('SET_LOADING', true);\n      try {\n        await api.clearAttackLogs();\n        commit('SET_ATTACK_LOGS', []);\n        return true;\n      } catch (error) {\n        console.error('Failed to clear attack logs:', error);\n        return false;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async fetchLatestAttackLog({\n      commit\n    }, count = 1) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.getLatestAttackLog(count);\n        if (response.data && response.data.length > 0) {\n          return response.data[0];\n        }\n        return null;\n      } catch (error) {\n        console.error('Failed to fetch latest attack log:', error);\n        return null;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async fetchAttackLogById({\n      commit\n    }, id) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.getAttackLogById(id);\n        return response.data;\n      } catch (error) {\n        console.error(`Failed to fetch attack log with ID ${id}:`, error);\n        return null;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    }\n  }\n});","map":{"version":3,"names":["createStore","api","state","attackLogs","defenseConfig","enableInputValidation","enableOutputEncoding","enableCsp","cspPolicy","testResults","isLoading","getters","attackLogsCount","length","getDefenseConfig","mutations","SET_ATTACK_LOGS","logs","ADD_ATTACK_LOG","log","unshift","SET_DEFENSE_CONFIG","config","SET_TEST_RESULTS","results","SET_LOADING","status","actions","fetchAttackLogs","commit","response","getAttackLogs","data","error","console","saveDefenseConfig","updateDefenseConfig","runXssTest","dispatch","payload","clearAttackLogs","fetchLatestAttackLog","count","getLatestAttackLog","fetchAttackLogById","id","getAttackLogById"],"sources":["D:/Desktop/AI接单项目/进行中/20250321-WX-WEB-01/工作文件/xss-defense-system/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\r\nimport api from '../api'\r\n\r\nexport default createStore({\r\n  state: {\r\n    attackLogs: [],\r\n    defenseConfig: {\r\n      enableInputValidation: true,\r\n      enableOutputEncoding: true,\r\n      enableCsp: true,\r\n      cspPolicy: \"default-src 'self'; script-src 'self'\"\r\n    },\r\n    testResults: null,\r\n    isLoading: false\r\n  },\r\n  getters: {\r\n    attackLogsCount(state) {\r\n      return state.attackLogs.length\r\n    },\r\n    getDefenseConfig(state) {\r\n      return state.defenseConfig\r\n    }\r\n  },\r\n  mutations: {\r\n    SET_ATTACK_LOGS(state, logs) {\r\n      state.attackLogs = logs\r\n    },\r\n    ADD_ATTACK_LOG(state, log) {\r\n      state.attackLogs.unshift(log)\r\n    },\r\n    SET_DEFENSE_CONFIG(state, config) {\r\n      state.defenseConfig = config\r\n    },\r\n    SET_TEST_RESULTS(state, results) {\r\n      state.testResults = results\r\n    },\r\n    SET_LOADING(state, status) {\r\n      state.isLoading = status\r\n    }\r\n  },\r\n  actions: {\r\n    async fetchAttackLogs({ commit }) {\r\n      commit('SET_LOADING', true)\r\n      try {\r\n        const response = await api.getAttackLogs()\r\n        commit('SET_ATTACK_LOGS', response.data)\r\n      } catch (error) {\r\n        console.error('Failed to fetch attack logs:', error)\r\n      } finally {\r\n        commit('SET_LOADING', false)\r\n      }\r\n    },\r\n    async saveDefenseConfig({ commit }, config) {\r\n      commit('SET_LOADING', true)\r\n      try {\r\n        const response = await api.updateDefenseConfig(config)\r\n        commit('SET_DEFENSE_CONFIG', response.data)\r\n        return true\r\n      } catch (error) {\r\n        console.error('Failed to save defense config:', error)\r\n        return false\r\n      } finally {\r\n        commit('SET_LOADING', false)\r\n      }\r\n    },\r\n    async runXssTest({ commit, dispatch }, payload) {\r\n      commit('SET_LOADING', true)\r\n      try {\r\n        const response = await api.runXssTest(payload)\r\n        commit('SET_TEST_RESULTS', response.data)\r\n        \r\n        // 测试后自动刷新攻击日志和统计\r\n        await dispatch('fetchAttackLogs')\r\n        \r\n        return response.data\r\n      } catch (error) {\r\n        console.error('Failed to run XSS test:', error)\r\n        return null\r\n      } finally {\r\n        commit('SET_LOADING', false)\r\n      }\r\n    },\r\n    async clearAttackLogs({ commit }) {\r\n      commit('SET_LOADING', true)\r\n      try {\r\n        await api.clearAttackLogs()\r\n        commit('SET_ATTACK_LOGS', [])\r\n        return true\r\n      } catch (error) {\r\n        console.error('Failed to clear attack logs:', error)\r\n        return false\r\n      } finally {\r\n        commit('SET_LOADING', false)\r\n      }\r\n    },\r\n    \r\n    async fetchLatestAttackLog({ commit }, count = 1) {\r\n      commit('SET_LOADING', true)\r\n      try {\r\n        const response = await api.getLatestAttackLog(count)\r\n        if (response.data && response.data.length > 0) {\r\n          return response.data[0]\r\n        }\r\n        return null\r\n      } catch (error) {\r\n        console.error('Failed to fetch latest attack log:', error)\r\n        return null\r\n      } finally {\r\n        commit('SET_LOADING', false)\r\n      }\r\n    },\r\n    \r\n    async fetchAttackLogById({ commit }, id) {\r\n      commit('SET_LOADING', true)\r\n      try {\r\n        const response = await api.getAttackLogById(id)\r\n        return response.data\r\n      } catch (error) {\r\n        console.error(`Failed to fetch attack log with ID ${id}:`, error)\r\n        return null\r\n      } finally {\r\n        commit('SET_LOADING', false)\r\n      }\r\n    }\r\n  }\r\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}