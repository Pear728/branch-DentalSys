{"ast":null,"code":"export default {\n  name: 'Login',\n  data() {\n    return {\n      loginForm: {\n        username: '',\n        password: '',\n        role: 1\n      },\n      rules: {\n        username: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }]\n      },\n      loading: false\n    };\n  },\n  methods: {\n    handleLogin() {\n      this.$refs.loginForm.validate(valid => {\n        if (valid) {\n          this.loading = true;\n          this.$http.post('/user/login', this.loginForm).then(response => {\n            const {\n              code,\n              message,\n              data\n            } = response.data;\n            if (code === 200) {\n              // 登录成功\n              this.$message.success(message);\n\n              // 保存用户信息和token\n              this.$store.dispatch('login', {\n                user: data,\n                token: 'Bearer ' + data.id // 简单模拟token，实际应从后端获取\n              });\n\n              // 根据角色跳转到对应的首页\n              const redirectPath = this.getRedirectPath(data.role);\n              // 避免重复导航\n              if (this.$route.path !== redirectPath) {\n                this.$router.push(redirectPath).catch(err => {\n                  if (err.name !== 'NavigationDuplicated') {\n                    throw err;\n                  }\n                });\n              }\n            } else {\n              this.$message.error(message || '登录失败');\n            }\n          }).catch(error => {\n            console.error('登录错误:', error);\n            this.$message.error('登录失败，请稍后重试');\n          }).finally(() => {\n            this.loading = false;\n          });\n        }\n      });\n    },\n    getRedirectPath(role) {\n      switch (role) {\n        case 1:\n          return '/patient/home';\n        case 2:\n          return '/doctor/home';\n        case 3:\n          return '/admin/home';\n        default:\n          return '/login';\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","loginForm","username","password","role","rules","required","message","trigger","loading","methods","handleLogin","$refs","validate","valid","$http","post","then","response","code","$message","success","$store","dispatch","user","token","id","redirectPath","getRedirectPath","$route","path","$router","push","catch","err","error","console","finally"],"sources":["src/views/Login.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\">\n    <el-card class=\"login-card\">\n      <div class=\"login-title\">智能齿科就诊系统</div>\n      <el-form :model=\"loginForm\" :rules=\"rules\" ref=\"loginForm\" label-width=\"0px\" class=\"login-form\">\n        <el-form-item prop=\"username\">\n          <el-input v-model=\"loginForm.username\" prefix-icon=\"el-icon-user\" placeholder=\"请输入用户名\"></el-input>\n        </el-form-item>\n        <el-form-item prop=\"password\">\n          <el-input v-model=\"loginForm.password\" prefix-icon=\"el-icon-lock\" placeholder=\"请输入密码\" show-password></el-input>\n        </el-form-item>\n        <el-form-item>\n          <el-radio-group v-model=\"loginForm.role\">\n            <el-radio :label=\"1\">患者</el-radio>\n            <el-radio :label=\"2\">医生</el-radio>\n            <el-radio :label=\"3\">管理员</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"handleLogin\" :loading=\"loading\" class=\"login-button\">登录</el-button>\n        </el-form-item>\n        <div class=\"login-options\">\n          <span>没有账号？</span>\n          <router-link to=\"/register\">注册</router-link>\n        </div>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Login',\n  data() {\n    return {\n      loginForm: {\n        username: '',\n        password: '',\n        role: 1\n      },\n      rules: {\n        username: [\n          { required: true, message: '请输入用户名', trigger: 'blur' }\n        ],\n        password: [\n          { required: true, message: '请输入密码', trigger: 'blur' }\n        ]\n      },\n      loading: false\n    }\n  },\n  methods: {\n    handleLogin() {\n      this.$refs.loginForm.validate(valid => {\n        if (valid) {\n          this.loading = true\n          this.$http.post('/user/login', this.loginForm)\n            .then(response => {\n              const { code, message, data } = response.data\n              if (code === 200) {\n                // 登录成功\n                this.$message.success(message)\n                \n                // 保存用户信息和token\n                this.$store.dispatch('login', {\n                  user: data,\n                  token: 'Bearer ' + data.id // 简单模拟token，实际应从后端获取\n                })\n                \n                // 根据角色跳转到对应的首页\n                const redirectPath = this.getRedirectPath(data.role)\n                // 避免重复导航\n                if (this.$route.path !== redirectPath) {\n                  this.$router.push(redirectPath).catch(err => {\n                    if (err.name !== 'NavigationDuplicated') {\n                      throw err\n                    }\n                  })\n                }\n              } else {\n                this.$message.error(message || '登录失败')\n              }\n            })\n            .catch(error => {\n              console.error('登录错误:', error)\n              this.$message.error('登录失败，请稍后重试')\n            })\n            .finally(() => {\n              this.loading = false\n            })\n        }\n      })\n    },\n    getRedirectPath(role) {\n      switch (role) {\n        case 1:\n          return '/patient/home'\n        case 2:\n          return '/doctor/home'\n        case 3:\n          return '/admin/home'\n        default:\n          return '/login'\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.login-container {\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f5f7fa;\n}\n\n.login-card {\n  width: 400px;\n  padding: 20px 35px;\n  border-radius: 5px;\n}\n\n.login-title {\n  text-align: center;\n  font-size: 22px;\n  font-weight: bold;\n  margin-bottom: 30px;\n  color: #409EFF;\n}\n\n.login-form {\n  margin-top: 30px;\n}\n\n.login-button {\n  width: 100%;\n}\n\n.login-options {\n  text-align: center;\n  margin-top: 15px;\n  font-size: 14px;\n}\n\n.login-options a {\n  color: #409EFF;\n  margin-left: 5px;\n}\n</style>\n"],"mappings":"AA+BA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;QACAC,QAAA;QACAC,QAAA;QACAC,IAAA;MACA;MACAC,KAAA;QACAH,QAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAL,QAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;MACAC,OAAA;IACA;EACA;EACAC,OAAA;IACAC,YAAA;MACA,KAAAC,KAAA,CAAAX,SAAA,CAAAY,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAAL,OAAA;UACA,KAAAM,KAAA,CAAAC,IAAA,qBAAAf,SAAA,EACAgB,IAAA,CAAAC,QAAA;YACA;cAAAC,IAAA;cAAAZ,OAAA;cAAAP;YAAA,IAAAkB,QAAA,CAAAlB,IAAA;YACA,IAAAmB,IAAA;cACA;cACA,KAAAC,QAAA,CAAAC,OAAA,CAAAd,OAAA;;cAEA;cACA,KAAAe,MAAA,CAAAC,QAAA;gBACAC,IAAA,EAAAxB,IAAA;gBACAyB,KAAA,cAAAzB,IAAA,CAAA0B,EAAA;cACA;;cAEA;cACA,MAAAC,YAAA,QAAAC,eAAA,CAAA5B,IAAA,CAAAI,IAAA;cACA;cACA,SAAAyB,MAAA,CAAAC,IAAA,KAAAH,YAAA;gBACA,KAAAI,OAAA,CAAAC,IAAA,CAAAL,YAAA,EAAAM,KAAA,CAAAC,GAAA;kBACA,IAAAA,GAAA,CAAAnC,IAAA;oBACA,MAAAmC,GAAA;kBACA;gBACA;cACA;YACA;cACA,KAAAd,QAAA,CAAAe,KAAA,CAAA5B,OAAA;YACA;UACA,GACA0B,KAAA,CAAAE,KAAA;YACAC,OAAA,CAAAD,KAAA,UAAAA,KAAA;YACA,KAAAf,QAAA,CAAAe,KAAA;UACA,GACAE,OAAA;YACA,KAAA5B,OAAA;UACA;QACA;MACA;IACA;IACAmB,gBAAAxB,IAAA;MACA,QAAAA,IAAA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}