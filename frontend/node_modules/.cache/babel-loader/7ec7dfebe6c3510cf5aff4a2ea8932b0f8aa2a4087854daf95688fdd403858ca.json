{"ast":null,"code":"import { ref, computed, watch, useSlots } from 'vue';\nimport { detectXssPayload } from '../utils/xssUtils';\nexport default {\n  __name: 'SafeInput',\n  props: {\n    modelValue: {\n      type: String,\n      default: ''\n    },\n    type: {\n      type: String,\n      default: 'text'\n    },\n    placeholder: {\n      type: String,\n      default: '请输入'\n    },\n    maxlength: {\n      type: Number,\n      default: 500\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    sanitize: {\n      type: Boolean,\n      default: true\n    }\n  },\n  emits: ['update:modelValue', 'xss-detected'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const props = __props;\n    const slots = useSlots();\n    const hasSlot = computed(() => !!slots.suffix);\n    const emit = __emit;\n    const safeValue = ref(props.modelValue);\n    const detectedXss = ref(false);\n\n    // 监听输入变化\n    watch(() => props.modelValue, newVal => {\n      if (newVal !== safeValue.value) {\n        safeValue.value = newVal;\n      }\n    });\n\n    // 处理输入\n    const handleInput = val => {\n      // 检测XSS\n      const isXss = detectXssPayload(val);\n      detectedXss.value = isXss;\n      if (isXss) {\n        emit('xss-detected', val);\n      }\n\n      // 如果启用了净化功能，对输入进行过滤\n      let processedValue = val;\n      if (props.sanitize && isXss) {\n        processedValue = sanitizeInput(val);\n      }\n      safeValue.value = processedValue;\n      emit('update:modelValue', processedValue);\n    };\n\n    // 简单的输入净化\n    const sanitizeInput = input => {\n      if (!input) return '';\n      return input.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/`/g, '&#96;').replace(/\\(/g, '&#40;').replace(/\\)/g, '&#41;').replace(/javascript:/gi, '').replace(/on\\w+=/gi, '');\n    };\n    const __returned__ = {\n      props,\n      slots,\n      hasSlot,\n      emit,\n      safeValue,\n      detectedXss,\n      handleInput,\n      sanitizeInput,\n      ref,\n      computed,\n      watch,\n      useSlots,\n      get detectXssPayload() {\n        return detectXssPayload;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","watch","useSlots","detectXssPayload","props","__props","slots","hasSlot","suffix","emit","__emit","safeValue","modelValue","detectedXss","newVal","value","handleInput","val","isXss","processedValue","sanitize","sanitizeInput","input","replace"],"sources":["D:/Desktop/AI接单项目/已完成/20250321-WX-WEB-01/xss-defense-system/xss-defense-demo/frontend/src/components/SafeInput.vue"],"sourcesContent":["<template>\r\n  <div class=\"safe-input-container\">\r\n    <el-input\r\n      v-model=\"safeValue\"\r\n      :type=\"type\"\r\n      :placeholder=\"placeholder\"\r\n      :maxlength=\"maxlength\"\r\n      :clearable=\"clearable\"\r\n      @input=\"handleInput\"\r\n    >\r\n      <template v-if=\"hasSlot\" #suffix>\r\n        <slot name=\"suffix\"></slot>\r\n      </template>\r\n    </el-input>\r\n    <div v-if=\"detectedXss\" class=\"xss-warning\">\r\n      <el-alert\r\n        title=\"检测到潜在XSS攻击载荷!\"\r\n        type=\"warning\"\r\n        :closable=\"false\"\r\n        show-icon\r\n      >\r\n        <div>输入内容包含可能的恶意代码。</div>\r\n      </el-alert>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, watch, useSlots } from 'vue'\r\nimport { detectXssPayload } from '../utils/xssUtils'\r\n\r\nconst props = defineProps({\r\n  modelValue: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  type: {\r\n    type: String,\r\n    default: 'text'\r\n  },\r\n  placeholder: {\r\n    type: String,\r\n    default: '请输入'\r\n  },\r\n  maxlength: {\r\n    type: Number,\r\n    default: 500\r\n  },\r\n  clearable: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  sanitize: {\r\n    type: Boolean,\r\n    default: true\r\n  }\r\n})\r\n\r\nconst slots = useSlots()\r\nconst hasSlot = computed(() => !!slots.suffix)\r\n\r\nconst emit = defineEmits(['update:modelValue', 'xss-detected'])\r\nconst safeValue = ref(props.modelValue)\r\nconst detectedXss = ref(false)\r\n\r\n// 监听输入变化\r\nwatch(() => props.modelValue, (newVal) => {\r\n  if (newVal !== safeValue.value) {\r\n    safeValue.value = newVal\r\n  }\r\n})\r\n\r\n// 处理输入\r\nconst handleInput = (val) => {\r\n  // 检测XSS\r\n  const isXss = detectXssPayload(val)\r\n  detectedXss.value = isXss\r\n  \r\n  if (isXss) {\r\n    emit('xss-detected', val)\r\n  }\r\n  \r\n  // 如果启用了净化功能，对输入进行过滤\r\n  let processedValue = val\r\n  if (props.sanitize && isXss) {\r\n    processedValue = sanitizeInput(val)\r\n  }\r\n  \r\n  safeValue.value = processedValue\r\n  emit('update:modelValue', processedValue)\r\n}\r\n\r\n// 简单的输入净化\r\nconst sanitizeInput = (input) => {\r\n  if (!input) return ''\r\n  \r\n  return input\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/\"/g, '&quot;')\r\n    .replace(/'/g, '&#39;')\r\n    .replace(/`/g, '&#96;')\r\n    .replace(/\\(/g, '&#40;')\r\n    .replace(/\\)/g, '&#41;')\r\n    .replace(/javascript:/gi, '')\r\n    .replace(/on\\w+=/gi, '')\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.safe-input-container {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.xss-warning {\r\n  margin-top: 5px;\r\n}\r\n</style> "],"mappings":"AA4BA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,KAAK;AACpD,SAASC,gBAAgB,QAAQ,mBAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEpD,MAAMC,KAAK,GAAGC,OAyBZ;IAEF,MAAMC,KAAK,GAAGJ,QAAQ,CAAC,CAAC;IACxB,MAAMK,OAAO,GAAGP,QAAQ,CAAC,MAAM,CAAC,CAACM,KAAK,CAACE,MAAM,CAAC;IAE9C,MAAMC,IAAI,GAAGC,MAAkD;IAC/D,MAAMC,SAAS,GAAGZ,GAAG,CAACK,KAAK,CAACQ,UAAU,CAAC;IACvC,MAAMC,WAAW,GAAGd,GAAG,CAAC,KAAK,CAAC;;IAE9B;IACAE,KAAK,CAAC,MAAMG,KAAK,CAACQ,UAAU,EAAGE,MAAM,IAAK;MACxC,IAAIA,MAAM,KAAKH,SAAS,CAACI,KAAK,EAAE;QAC9BJ,SAAS,CAACI,KAAK,GAAGD,MAAM;MAC1B;IACF,CAAC,CAAC;;IAEF;IACA,MAAME,WAAW,GAAIC,GAAG,IAAK;MAC3B;MACA,MAAMC,KAAK,GAAGf,gBAAgB,CAACc,GAAG,CAAC;MACnCJ,WAAW,CAACE,KAAK,GAAGG,KAAK;MAEzB,IAAIA,KAAK,EAAE;QACTT,IAAI,CAAC,cAAc,EAAEQ,GAAG,CAAC;MAC3B;;MAEA;MACA,IAAIE,cAAc,GAAGF,GAAG;MACxB,IAAIb,KAAK,CAACgB,QAAQ,IAAIF,KAAK,EAAE;QAC3BC,cAAc,GAAGE,aAAa,CAACJ,GAAG,CAAC;MACrC;MAEAN,SAAS,CAACI,KAAK,GAAGI,cAAc;MAChCV,IAAI,CAAC,mBAAmB,EAAEU,cAAc,CAAC;IAC3C,CAAC;;IAED;IACA,MAAME,aAAa,GAAIC,KAAK,IAAK;MAC/B,IAAI,CAACA,KAAK,EAAE,OAAO,EAAE;MAErB,OAAOA,KAAK,CACTC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CACvBA,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CACtBA,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CACtBA,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CACvBA,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CACvBA,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAC5BA,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;IAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}