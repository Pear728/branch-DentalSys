{"ast":null,"code":"import axios from 'axios';\n\n// 模拟数据\nconst mockData = {\n  logs: [{\n    id: 1,\n    timestamp: new Date().toISOString(),\n    payload: '<script>alert(\"XSS\")</script>',\n    severity: 'high',\n    source: 'Login Form',\n    prevented: true\n  }, {\n    id: 2,\n    timestamp: new Date(Date.now() - 3600000).toISOString(),\n    payload: 'javascript:alert(document.cookie)',\n    severity: 'medium',\n    source: 'Search Bar',\n    prevented: true\n  }, {\n    id: 3,\n    timestamp: new Date(Date.now() - 7200000).toISOString(),\n    payload: '<img src=\"x\" onerror=\"alert(\\'XSS\\')\">',\n    severity: 'high',\n    source: 'Comment Section',\n    prevented: false\n  }],\n  config: {\n    enableInputValidation: true,\n    enableOutputEncoding: true,\n    enableCsp: true,\n    cspPolicy: \"default-src 'self'; script-src 'self'\"\n  }\n};\n\n// 模拟API延迟\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// 检查是否使用模拟数据\nconst useMock = true; // 设置为true启用模拟数据\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: 'http://localhost:8082/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  // 可以在此处添加身份验证令牌等\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 定义API函数\nexport default {\n  // 获取攻击日志\n  async getAttackLogs() {\n    if (useMock) {\n      await delay(500); // 模拟网络延迟\n      return {\n        data: mockData.logs\n      };\n    }\n    return api.get('/logs');\n  },\n  // 获取防御配置\n  async getDefenseConfig() {\n    if (useMock) {\n      await delay(300); // 模拟网络延迟\n      return {\n        data: mockData.config\n      };\n    }\n    return api.get('/config');\n  },\n  // 更新防御配置\n  async updateDefenseConfig(config) {\n    if (useMock) {\n      await delay(400); // 模拟网络延迟\n      mockData.config = {\n        ...mockData.config,\n        ...config\n      };\n      return {\n        data: mockData.config\n      };\n    }\n    return api.post('/config', config);\n  },\n  // 运行XSS测试\n  async runXssTest(payload) {\n    if (useMock) {\n      await delay(800); // 模拟网络延迟\n      // 生成模拟测试结果\n      const result = {\n        originalPayload: payload.payload,\n        sanitizedPayload: payload.defenseOptions.inputValidation ? payload.payload.replace(/</g, '&lt;').replace(/>/g, '&gt;') : payload.payload,\n        attackType: payload.payload.includes('<script') ? '脚本注入 (Reflected XSS)' : '通用XSS攻击',\n        severity: payload.payload.includes('<script') ? 'high' : 'medium',\n        prevented: payload.defenseOptions.inputValidation || payload.defenseOptions.outputEncoding,\n        description: '此载荷尝试执行脚本，可能导致信息泄露或执行恶意代码。'\n      };\n\n      // 添加到模拟日志\n      if (!mockData.logs.some(log => log.payload === payload.payload)) {\n        mockData.logs.unshift({\n          id: Date.now(),\n          timestamp: new Date().toISOString(),\n          payload: payload.payload,\n          severity: result.severity,\n          source: 'Test Page',\n          prevented: result.prevented\n        });\n      }\n      return {\n        data: result\n      };\n    }\n    return api.post('/test', payload);\n  },\n  // 清空攻击日志\n  async clearAttackLogs() {\n    if (useMock) {\n      await delay(300); // 模拟网络延迟\n      mockData.logs = [];\n      return {\n        data: {\n          success: true\n        }\n      };\n    }\n    return api.delete('/logs');\n  }\n};","map":{"version":3,"names":["axios","mockData","logs","id","timestamp","Date","toISOString","payload","severity","source","prevented","now","config","enableInputValidation","enableOutputEncoding","enableCsp","cspPolicy","delay","ms","Promise","resolve","setTimeout","useMock","api","create","baseURL","timeout","headers","interceptors","request","use","error","reject","response","getAttackLogs","data","get","getDefenseConfig","updateDefenseConfig","post","runXssTest","result","originalPayload","sanitizedPayload","defenseOptions","inputValidation","replace","attackType","includes","outputEncoding","description","some","log","unshift","clearAttackLogs","success","delete"],"sources":["D:/Desktop/AI接单项目/进行中/20250321-WX-WEB-01/工作文件/xss-defense-system/frontend/src/api/index.js"],"sourcesContent":["import axios from 'axios'\r\n\r\n// 模拟数据\r\nconst mockData = {\r\n  logs: [\r\n    {\r\n      id: 1,\r\n      timestamp: new Date().toISOString(),\r\n      payload: '<script>alert(\"XSS\")</script>',\r\n      severity: 'high',\r\n      source: 'Login Form',\r\n      prevented: true\r\n    },\r\n    {\r\n      id: 2,\r\n      timestamp: new Date(Date.now() - 3600000).toISOString(),\r\n      payload: 'javascript:alert(document.cookie)',\r\n      severity: 'medium',\r\n      source: 'Search Bar',\r\n      prevented: true\r\n    },\r\n    {\r\n      id: 3,\r\n      timestamp: new Date(Date.now() - 7200000).toISOString(),\r\n      payload: '<img src=\"x\" onerror=\"alert(\\'XSS\\')\">',\r\n      severity: 'high',\r\n      source: 'Comment Section',\r\n      prevented: false\r\n    }\r\n  ],\r\n  config: {\r\n    enableInputValidation: true,\r\n    enableOutputEncoding: true,\r\n    enableCsp: true,\r\n    cspPolicy: \"default-src 'self'; script-src 'self'\"\r\n  }\r\n};\r\n\r\n// 模拟API延迟\r\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// 检查是否使用模拟数据\r\nconst useMock = true; // 设置为true启用模拟数据\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8082/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n  }\r\n})\r\n\r\n// 请求拦截器\r\napi.interceptors.request.use(\r\n  config => {\r\n    // 可以在此处添加身份验证令牌等\r\n    return config\r\n  },\r\n  error => {\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\napi.interceptors.response.use(\r\n  response => {\r\n    return response\r\n  },\r\n  error => {\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 定义API函数\r\nexport default {\r\n  // 获取攻击日志\r\n  async getAttackLogs() {\r\n    if (useMock) {\r\n      await delay(500); // 模拟网络延迟\r\n      return { data: mockData.logs };\r\n    }\r\n    return api.get('/logs');\r\n  },\r\n  \r\n  // 获取防御配置\r\n  async getDefenseConfig() {\r\n    if (useMock) {\r\n      await delay(300); // 模拟网络延迟\r\n      return { data: mockData.config };\r\n    }\r\n    return api.get('/config');\r\n  },\r\n  \r\n  // 更新防御配置\r\n  async updateDefenseConfig(config) {\r\n    if (useMock) {\r\n      await delay(400); // 模拟网络延迟\r\n      mockData.config = { ...mockData.config, ...config };\r\n      return { data: mockData.config };\r\n    }\r\n    return api.post('/config', config);\r\n  },\r\n  \r\n  // 运行XSS测试\r\n  async runXssTest(payload) {\r\n    if (useMock) {\r\n      await delay(800); // 模拟网络延迟\r\n      // 生成模拟测试结果\r\n      const result = {\r\n        originalPayload: payload.payload,\r\n        sanitizedPayload: payload.defenseOptions.inputValidation ? \r\n          payload.payload.replace(/</g, '&lt;').replace(/>/g, '&gt;') : \r\n          payload.payload,\r\n        attackType: payload.payload.includes('<script') ? '脚本注入 (Reflected XSS)' : '通用XSS攻击',\r\n        severity: payload.payload.includes('<script') ? 'high' : 'medium',\r\n        prevented: payload.defenseOptions.inputValidation || payload.defenseOptions.outputEncoding,\r\n        description: '此载荷尝试执行脚本，可能导致信息泄露或执行恶意代码。'\r\n      };\r\n      \r\n      // 添加到模拟日志\r\n      if (!mockData.logs.some(log => log.payload === payload.payload)) {\r\n        mockData.logs.unshift({\r\n          id: Date.now(),\r\n          timestamp: new Date().toISOString(),\r\n          payload: payload.payload,\r\n          severity: result.severity,\r\n          source: 'Test Page',\r\n          prevented: result.prevented\r\n        });\r\n      }\r\n      \r\n      return { data: result };\r\n    }\r\n    return api.post('/test', payload);\r\n  },\r\n  \r\n  // 清空攻击日志\r\n  async clearAttackLogs() {\r\n    if (useMock) {\r\n      await delay(300); // 模拟网络延迟\r\n      mockData.logs = [];\r\n      return { data: { success: true } };\r\n    }\r\n    return api.delete('/logs');\r\n  }\r\n} "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,QAAQ,GAAG;EACfC,IAAI,EAAE,CACJ;IACEC,EAAE,EAAE,CAAC;IACLC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCC,OAAO,EAAE,+BAA+B;IACxCC,QAAQ,EAAE,MAAM;IAChBC,MAAM,EAAE,YAAY;IACpBC,SAAS,EAAE;EACb,CAAC,EACD;IACEP,EAAE,EAAE,CAAC;IACLC,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACM,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAACL,WAAW,CAAC,CAAC;IACvDC,OAAO,EAAE,mCAAmC;IAC5CC,QAAQ,EAAE,QAAQ;IAClBC,MAAM,EAAE,YAAY;IACpBC,SAAS,EAAE;EACb,CAAC,EACD;IACEP,EAAE,EAAE,CAAC;IACLC,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACM,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAACL,WAAW,CAAC,CAAC;IACvDC,OAAO,EAAE,wCAAwC;IACjDC,QAAQ,EAAE,MAAM;IAChBC,MAAM,EAAE,iBAAiB;IACzBC,SAAS,EAAE;EACb,CAAC,CACF;EACDE,MAAM,EAAE;IACNC,qBAAqB,EAAE,IAAI;IAC3BC,oBAAoB,EAAE,IAAI;IAC1BC,SAAS,EAAE,IAAI;IACfC,SAAS,EAAE;EACb;AACF,CAAC;;AAED;AACA,MAAMC,KAAK,GAAIC,EAAE,IAAK,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;;AAErE;AACA,MAAMI,OAAO,GAAG,IAAI,CAAC,CAAC;;AAEtB;AACA,MAAMC,GAAG,GAAGvB,KAAK,CAACwB,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1BlB,MAAM,IAAI;EACR;EACA,OAAOA,MAAM;AACf,CAAC,EACDmB,KAAK,IAAI;EACP,OAAOZ,OAAO,CAACa,MAAM,CAACD,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAR,GAAG,CAACK,YAAY,CAACK,QAAQ,CAACH,GAAG,CAC3BG,QAAQ,IAAI;EACV,OAAOA,QAAQ;AACjB,CAAC,EACDF,KAAK,IAAI;EACP,OAAOZ,OAAO,CAACa,MAAM,CAACD,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,eAAe;EACb;EACA,MAAMG,aAAaA,CAAA,EAAG;IACpB,IAAIZ,OAAO,EAAE;MACX,MAAML,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;MAClB,OAAO;QAAEkB,IAAI,EAAElC,QAAQ,CAACC;MAAK,CAAC;IAChC;IACA,OAAOqB,GAAG,CAACa,GAAG,CAAC,OAAO,CAAC;EACzB,CAAC;EAED;EACA,MAAMC,gBAAgBA,CAAA,EAAG;IACvB,IAAIf,OAAO,EAAE;MACX,MAAML,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;MAClB,OAAO;QAAEkB,IAAI,EAAElC,QAAQ,CAACW;MAAO,CAAC;IAClC;IACA,OAAOW,GAAG,CAACa,GAAG,CAAC,SAAS,CAAC;EAC3B,CAAC;EAED;EACA,MAAME,mBAAmBA,CAAC1B,MAAM,EAAE;IAChC,IAAIU,OAAO,EAAE;MACX,MAAML,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;MAClBhB,QAAQ,CAACW,MAAM,GAAG;QAAE,GAAGX,QAAQ,CAACW,MAAM;QAAE,GAAGA;MAAO,CAAC;MACnD,OAAO;QAAEuB,IAAI,EAAElC,QAAQ,CAACW;MAAO,CAAC;IAClC;IACA,OAAOW,GAAG,CAACgB,IAAI,CAAC,SAAS,EAAE3B,MAAM,CAAC;EACpC,CAAC;EAED;EACA,MAAM4B,UAAUA,CAACjC,OAAO,EAAE;IACxB,IAAIe,OAAO,EAAE;MACX,MAAML,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;MAClB;MACA,MAAMwB,MAAM,GAAG;QACbC,eAAe,EAAEnC,OAAO,CAACA,OAAO;QAChCoC,gBAAgB,EAAEpC,OAAO,CAACqC,cAAc,CAACC,eAAe,GACtDtC,OAAO,CAACA,OAAO,CAACuC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,GAC3DvC,OAAO,CAACA,OAAO;QACjBwC,UAAU,EAAExC,OAAO,CAACA,OAAO,CAACyC,QAAQ,CAAC,SAAS,CAAC,GAAG,sBAAsB,GAAG,SAAS;QACpFxC,QAAQ,EAAED,OAAO,CAACA,OAAO,CAACyC,QAAQ,CAAC,SAAS,CAAC,GAAG,MAAM,GAAG,QAAQ;QACjEtC,SAAS,EAAEH,OAAO,CAACqC,cAAc,CAACC,eAAe,IAAItC,OAAO,CAACqC,cAAc,CAACK,cAAc;QAC1FC,WAAW,EAAE;MACf,CAAC;;MAED;MACA,IAAI,CAACjD,QAAQ,CAACC,IAAI,CAACiD,IAAI,CAACC,GAAG,IAAIA,GAAG,CAAC7C,OAAO,KAAKA,OAAO,CAACA,OAAO,CAAC,EAAE;QAC/DN,QAAQ,CAACC,IAAI,CAACmD,OAAO,CAAC;UACpBlD,EAAE,EAAEE,IAAI,CAACM,GAAG,CAAC,CAAC;UACdP,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;UACnCC,OAAO,EAAEA,OAAO,CAACA,OAAO;UACxBC,QAAQ,EAAEiC,MAAM,CAACjC,QAAQ;UACzBC,MAAM,EAAE,WAAW;UACnBC,SAAS,EAAE+B,MAAM,CAAC/B;QACpB,CAAC,CAAC;MACJ;MAEA,OAAO;QAAEyB,IAAI,EAAEM;MAAO,CAAC;IACzB;IACA,OAAOlB,GAAG,CAACgB,IAAI,CAAC,OAAO,EAAEhC,OAAO,CAAC;EACnC,CAAC;EAED;EACA,MAAM+C,eAAeA,CAAA,EAAG;IACtB,IAAIhC,OAAO,EAAE;MACX,MAAML,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;MAClBhB,QAAQ,CAACC,IAAI,GAAG,EAAE;MAClB,OAAO;QAAEiC,IAAI,EAAE;UAAEoB,OAAO,EAAE;QAAK;MAAE,CAAC;IACpC;IACA,OAAOhC,GAAG,CAACiC,MAAM,CAAC,OAAO,CAAC;EAC5B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}