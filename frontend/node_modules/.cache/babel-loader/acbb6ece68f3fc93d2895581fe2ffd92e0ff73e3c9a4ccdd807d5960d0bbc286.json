{"ast":null,"code":"import axios from 'axios';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: 'http://localhost:8080/api',\n  timeout: 10000,\n  withCredentials: true,\n  // 允许跨域请求携带凭证\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  // 可以在此处添加身份验证令牌等\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  console.log(`API请求成功: ${response.config.method.toUpperCase()} ${response.config.url}`);\n  return response;\n}, error => {\n  // 详细记录错误信息\n  console.error('API请求错误:', error.message);\n\n  // 记录请求详情\n  if (error.config) {\n    console.error(`请求详情: ${error.config.method.toUpperCase()} ${error.config.url}`);\n  }\n  if (error.response) {\n    // 服务器返回错误状态码\n    console.error('错误状态:', error.response.status);\n    console.error('错误数据:', error.response.data);\n    if (error.response.status === 401) {\n      // 处理未授权错误\n      console.warn('未授权访问，可能需要登录');\n    } else if (error.response.status >= 500) {\n      console.error('服务器内部错误，请检查后端日志');\n    }\n  } else if (error.request) {\n    // 请求发送但未收到响应\n    console.error('未收到响应，可能是CORS或网络问题');\n    console.error('请确认后端服务是否正常运行');\n  } else {\n    // 请求设置时发生错误\n    console.error('请求配置错误:', error.message);\n  }\n\n  // 添加错误类型标记，便于UI处理\n  if (error.code === 'ECONNABORTED') {\n    error.isTimeout = true;\n  }\n  return Promise.reject(error);\n});\n\n// 定义API函数\nexport default {\n  // 获取攻击日志\n  getAttackLogs() {\n    return api.get('/logs');\n  },\n  // 获取最新的攻击日志\n  getLatestAttackLog(count = 1) {\n    return api.get(`/logs/latest?count=${count}`);\n  },\n  // 根据ID获取攻击日志详情\n  getAttackLogById(id) {\n    return api.get(`/logs/${id}`);\n  },\n  // 获取防御配置\n  getDefenseConfig() {\n    return api.get('/config');\n  },\n  // 更新防御配置\n  updateDefenseConfig(config) {\n    return api.post('/config', config);\n  },\n  // 运行XSS测试\n  runXssTest(payload) {\n    return api.post('/xss/test', payload);\n  },\n  // 清空攻击日志\n  clearAttackLogs() {\n    return api.delete('/logs');\n  },\n  // 获取数据库信息\n  getDatabaseInfo() {\n    return api.get('/info/database');\n  },\n  // 获取系统信息\n  getSystemInfo() {\n    return api.get('/info/system');\n  },\n  // 修复数据库\n  fixDatabase() {\n    return api.get('/db/fix');\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","timeout","withCredentials","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","console","log","method","toUpperCase","url","message","status","data","warn","code","isTimeout","getAttackLogs","get","getLatestAttackLog","count","getAttackLogById","id","getDefenseConfig","updateDefenseConfig","post","runXssTest","payload","clearAttackLogs","delete","getDatabaseInfo","getSystemInfo","fixDatabase"],"sources":["D:/Desktop/AI接单项目/进行中/20250321-WX-WEB-01/工作文件/xss-defense-system/frontend/src/api/index.js"],"sourcesContent":["import axios from 'axios'\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8080/api',\r\n  timeout: 10000,\r\n  withCredentials: true,  // 允许跨域请求携带凭证\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n  }\r\n})\r\n\r\n// 请求拦截器\r\napi.interceptors.request.use(\r\n  config => {\r\n    // 可以在此处添加身份验证令牌等\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config\r\n  },\r\n  error => {\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\napi.interceptors.response.use(\r\n  response => {\r\n    console.log(`API请求成功: ${response.config.method.toUpperCase()} ${response.config.url}`);\r\n    return response\r\n  },\r\n  error => {\r\n    // 详细记录错误信息\r\n    console.error('API请求错误:', error.message);\r\n    \r\n    // 记录请求详情\r\n    if (error.config) {\r\n      console.error(`请求详情: ${error.config.method.toUpperCase()} ${error.config.url}`);\r\n    }\r\n    \r\n    if (error.response) {\r\n      // 服务器返回错误状态码\r\n      console.error('错误状态:', error.response.status);\r\n      console.error('错误数据:', error.response.data);\r\n      \r\n      if (error.response.status === 401) {\r\n        // 处理未授权错误\r\n        console.warn('未授权访问，可能需要登录');\r\n      } else if (error.response.status >= 500) {\r\n        console.error('服务器内部错误，请检查后端日志');\r\n      }\r\n    } else if (error.request) {\r\n      // 请求发送但未收到响应\r\n      console.error('未收到响应，可能是CORS或网络问题');\r\n      console.error('请确认后端服务是否正常运行');\r\n    } else {\r\n      // 请求设置时发生错误\r\n      console.error('请求配置错误:', error.message);\r\n    }\r\n    \r\n    // 添加错误类型标记，便于UI处理\r\n    if (error.code === 'ECONNABORTED') {\r\n      error.isTimeout = true;\r\n    }\r\n    \r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 定义API函数\r\nexport default {\r\n  // 获取攻击日志\r\n  getAttackLogs() {\r\n    return api.get('/logs')\r\n  },\r\n  \r\n  // 获取最新的攻击日志\r\n  getLatestAttackLog(count = 1) {\r\n    return api.get(`/logs/latest?count=${count}`)\r\n  },\r\n  \r\n  // 根据ID获取攻击日志详情\r\n  getAttackLogById(id) {\r\n    return api.get(`/logs/${id}`)\r\n  },\r\n  \r\n  // 获取防御配置\r\n  getDefenseConfig() {\r\n    return api.get('/config')\r\n  },\r\n  \r\n  // 更新防御配置\r\n  updateDefenseConfig(config) {\r\n    return api.post('/config', config)\r\n  },\r\n  \r\n  // 运行XSS测试\r\n  runXssTest(payload) {\r\n    return api.post('/xss/test', payload)\r\n  },\r\n  \r\n  // 清空攻击日志\r\n  clearAttackLogs() {\r\n    return api.delete('/logs')\r\n  },\r\n  \r\n  // 获取数据库信息\r\n  getDatabaseInfo() {\r\n    return api.get('/info/database')\r\n  },\r\n  \r\n  // 获取系统信息\r\n  getSystemInfo() {\r\n    return api.get('/info/system')\r\n  },\r\n  \r\n  // 修复数据库\r\n  fixDatabase() {\r\n    return api.get('/db/fix')\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}