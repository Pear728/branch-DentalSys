{"ast":null,"code":"import { ref, watch, computed } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport SafeInput from '../components/SafeInput.vue';\nimport { ElMessage } from 'element-plus';\nimport { xssVectors } from '../utils/xssUtils';\nexport default {\n  __name: 'XssTest',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const router = useRouter();\n    const loading = ref(false);\n    const testResult = ref(null);\n\n    // 测试表单\n    const testForm = ref({\n      inputType: 'predefined',\n      selectedVector: '',\n      payload: '',\n      defenseOptions: {\n        inputValidation: true,\n        outputEncoding: true,\n        csp: true\n      }\n    });\n\n    // 监听选择的向量改变\n    watch(() => testForm.value.selectedVector, newVal => {\n      if (newVal) {\n        testForm.value.payload = newVal;\n      }\n    });\n\n    // 处理XSS检测回调\n    const handleXssDetected = payload => {\n      console.log('XSS detected:', payload);\n      // 这里可以添加其他处理逻辑\n    };\n\n    // 获取最新的攻击日志记录\n    const attackLogs = computed(() => store.state.attackLogs);\n    const latestLog = computed(() => attackLogs.value.length > 0 ? attackLogs.value[0] : null);\n\n    // 从数据库获取最新日志\n    const refreshLatestLog = async () => {\n      const log = await store.dispatch('fetchLatestAttackLog');\n      if (!log) {\n        ElMessage.warning('未找到日志记录');\n      }\n    };\n\n    // 导航到日志页面\n    const viewAllLogs = () => {\n      router.push('/logs');\n    };\n\n    // 格式化日期\n    const formatDate = dateStr => {\n      if (!dateStr) return '';\n      const date = new Date(dateStr);\n      return date.toLocaleString();\n    };\n\n    // 运行测试\n    const runTest = async () => {\n      loading.value = true;\n      testResult.value = null;\n      const payload = testForm.value.inputType === 'predefined' ? testForm.value.selectedVector : testForm.value.payload;\n      if (!payload) {\n        ElMessage.warning('请输入或选择XSS载荷');\n        loading.value = false;\n        return;\n      }\n      try {\n        // 调用真实的后端API\n        const response = await store.dispatch('runXssTest', {\n          input: payload,\n          defenseOptions: {\n            htmlEscape: testForm.value.defenseOptions.outputEncoding,\n            removeJsEvents: testForm.value.defenseOptions.inputValidation,\n            removeDangerousTags: testForm.value.defenseOptions.inputValidation\n          }\n        });\n        if (response) {\n          testResult.value = {\n            originalPayload: response.input,\n            sanitizedPayload: response.sanitizedOutput,\n            attackType: response.attackType,\n            severity: response.severity,\n            prevented: response.prevented,\n            description: response.description\n          };\n\n          // 刷新攻击日志数据\n          await store.dispatch('fetchAttackLogs');\n\n          // 额外获取最新的数据库记录\n          setTimeout(async () => {\n            const latestRecord = await store.dispatch('fetchLatestAttackLog');\n            if (latestRecord) {\n              ElMessage.success(`测试数据已存入数据库，记录ID: ${latestRecord.id}`);\n            }\n          }, 500);\n        }\n        loading.value = false;\n      } catch (error) {\n        console.error('Failed to run test:', error);\n        let errorMessage = '测试执行失败，请查看控制台日志';\n\n        // 获取详细错误信息（如果有）\n        if (error.response && error.response.data) {\n          if (error.response.data.message) {\n            errorMessage = error.response.data.message;\n          }\n          console.error('服务器返回错误:', error.response.data);\n        }\n        ElMessage.error(errorMessage);\n        loading.value = false;\n      }\n    };\n\n    // 重置表单\n    const resetForm = () => {\n      testForm.value = {\n        inputType: 'predefined',\n        selectedVector: '',\n        payload: '',\n        defenseOptions: {\n          inputValidation: true,\n          outputEncoding: true,\n          csp: true\n        }\n      };\n      testResult.value = null;\n    };\n\n    // 辅助函数：获取危险等级对应的tag类型\n    const getSeverityType = severity => {\n      switch (severity) {\n        case 'high':\n          return 'danger';\n        case 'medium':\n          return 'warning';\n        default:\n          return 'info';\n      }\n    };\n    // 辅助函数：确定攻击类型\n    // const getAttackType = (payload) => {\n    //   if (!payload) return '未知攻击类型'\n\n    //   if (payload.includes('<script')) {\n    //     return '脚本注入 (Reflected XSS)'\n    //   } else if (payload.includes('onerror') || payload.includes('onload')) {\n    //     return '事件处理注入 (DOM XSS)'\n    //   } else if (payload.includes('javascript:')) {\n    //     return 'JavaScript 伪协议 (DOM XSS)'\n    //   } else {\n    //     return '通用XSS攻击'\n    //   }\n    // }\n\n    // // 辅助函数：根据载荷生成说明\n    // const getDescriptionForPayload = (payload, severity) => {\n    //   if (severity === 'high') {\n    //     return '此载荷尝试执行高危脚本，可能窃取cookie或执行恶意代码。'\n    //   } else if (severity === 'medium') {\n    //     return '此载荷尝试注入HTML或JavaScript代码，可能导致页面内容被篡改。'\n    //   } else {\n    //     return '此载荷包含潜在的XSS模式，但危险性较低。'\n    //   }\n    // }\n\n    const __returned__ = {\n      store,\n      router,\n      loading,\n      testResult,\n      testForm,\n      handleXssDetected,\n      attackLogs,\n      latestLog,\n      refreshLatestLog,\n      viewAllLogs,\n      formatDate,\n      runTest,\n      resetForm,\n      getSeverityType,\n      ref,\n      watch,\n      computed,\n      get useStore() {\n        return useStore;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      SafeInput,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get xssVectors() {\n        return xssVectors;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","computed","useStore","useRouter","SafeInput","ElMessage","xssVectors","store","router","loading","testResult","testForm","inputType","selectedVector","payload","defenseOptions","inputValidation","outputEncoding","csp","value","newVal","handleXssDetected","console","log","attackLogs","state","latestLog","length","refreshLatestLog","dispatch","warning","viewAllLogs","push","formatDate","dateStr","date","Date","toLocaleString","runTest","response","input","htmlEscape","removeJsEvents","removeDangerousTags","originalPayload","sanitizedPayload","sanitizedOutput","attackType","severity","prevented","description","setTimeout","latestRecord","success","id","error","errorMessage","data","message","resetForm","getSeverityType"],"sources":["D:/Desktop/AI接单项目/进行中/20250321-WX-WEB-01/工作文件/xss-defense-system/frontend/src/views/XssTest.vue"],"sourcesContent":["<!-- eslint-disable -->\r\n<template>\r\n  <div class=\"xss-test-container\">\r\n    <h2 class=\"xss-test-title\">XSS攻击测试</h2>\r\n\r\n    <el-card class=\"test-card\">\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <h3>测试XSS攻击载荷</h3>\r\n        </div>\r\n      </template>\r\n\r\n      <el-form :model=\"testForm\" label-width=\"120px\">\r\n        <el-form-item label=\"输入类型\">\r\n          <el-radio-group v-model=\"testForm.inputType\">\r\n            <el-radio label=\"manual\">手动输入</el-radio>\r\n            <el-radio label=\"predefined\">预设载荷</el-radio>\r\n          </el-radio-group>\r\n        </el-form-item>\r\n\r\n        <el-form-item v-if=\"testForm.inputType === 'predefined'\" label=\"选择预设载荷\">\r\n          <el-select v-model=\"testForm.selectedVector\" placeholder=\"选择XSS载荷\" style=\"width: 100%\">\r\n            <el-option\r\n              v-for=\"vector in xssVectors\"\r\n              :key=\"vector.payload\"\r\n              :label=\"vector.name\"\r\n              :value=\"vector.payload\"\r\n            >\r\n              <span>{{ vector.name }}</span>\r\n              <span class=\"vector-type\">{{ vector.type }}</span>\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n\r\n        <el-form-item v-if=\"testForm.inputType === 'manual'\" label=\"XSS载荷\">\r\n          <SafeInput\r\n            v-model=\"testForm.payload\"\r\n            placeholder=\"输入一个XSS载荷...\"\r\n            :sanitize=\"false\"\r\n            @xss-detected=\"handleXssDetected\"\r\n          />\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"防御设置\">\r\n          <el-checkbox v-model=\"testForm.defenseOptions.inputValidation\">输入验证</el-checkbox>\r\n          <el-checkbox v-model=\"testForm.defenseOptions.outputEncoding\">输出编码</el-checkbox>\r\n          <el-checkbox v-model=\"testForm.defenseOptions.csp\">内容安全策略</el-checkbox>\r\n        </el-form-item>\r\n\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"runTest\" :loading=\"loading\">运行测试</el-button>\r\n          <el-button @click=\"resetForm\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n\r\n    <el-card v-if=\"testResult\" class=\"result-card\">\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <h3>测试结果</h3>\r\n        </div>\r\n      </template>\r\n\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"12\">\r\n          <div class=\"result-section\">\r\n            <h4>防御前 (原始输入)</h4>\r\n            <div class=\"danger-content\">\r\n              <pre>{{ testResult.originalPayload }}</pre>\r\n            </div>\r\n            <div class=\"render-container\">\r\n              <h5>渲染结果:</h5>\r\n              <div class=\"render-box\" v-html=\"testResult.originalPayload\"></div>\r\n            </div>\r\n          </div>\r\n        </el-col>\r\n\r\n        <el-col :span=\"12\">\r\n          <div class=\"result-section\">\r\n            <h4>防御后</h4>\r\n            <div class=\"safe-content\">\r\n              <pre>{{ testResult.sanitizedPayload }}</pre>\r\n            </div>\r\n            <div class=\"render-container\">\r\n              <h5>渲染结果:</h5>\r\n              <div class=\"render-box\" v-safe-html=\"testResult.sanitizedPayload\"></div>\r\n            </div>\r\n          </div>\r\n        </el-col>\r\n      </el-row>\r\n\r\n      <el-divider></el-divider>\r\n\r\n      <div class=\"analysis-section\">\r\n        <h4>攻击分析</h4>\r\n        <el-descriptions :column=\"1\" border>\r\n          <el-descriptions-item label=\"攻击类型\">{{ testResult.attackType }}</el-descriptions-item>\r\n          <el-descriptions-item label=\"危险等级\">\r\n            <el-tag :type=\"getSeverityType(testResult.severity)\">{{ testResult.severity }}</el-tag>\r\n          </el-descriptions-item>\r\n          <el-descriptions-item label=\"防御效果\">\r\n            <el-tag :type=\"testResult.prevented ? 'success' : 'danger'\">\r\n              {{ testResult.prevented ? '成功防御' : '防御失败' }}\r\n            </el-tag>\r\n          </el-descriptions-item>\r\n          <el-descriptions-item label=\"分析说明\">{{ testResult.description }}</el-descriptions-item>\r\n        </el-descriptions>\r\n      </div>\r\n    </el-card>\r\n\r\n    <!-- 新增：攻击日志记录展示 -->\r\n    <el-card v-if=\"latestLog\" class=\"log-card\">\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <h3>数据库存储记录</h3>\r\n          <div>\r\n            <el-button type=\"primary\" link @click=\"refreshLatestLog\">刷新</el-button>\r\n            <el-button type=\"success\" link @click=\"viewAllLogs\">查看全部日志</el-button>\r\n          </div>\r\n        </div>\r\n      </template>\r\n      \r\n      <el-alert\r\n        title=\"XSS测试数据已成功存入数据库\"\r\n        type=\"success\"\r\n        :closable=\"false\"\r\n        show-icon\r\n      >\r\n        <template #default>\r\n          数据库记录ID: <strong>{{ latestLog.id }}</strong>，可通过API <code>/logs/{{ latestLog.id }}</code> 查询\r\n        </template>\r\n      </el-alert>\r\n      \r\n      <el-divider content-position=\"left\">数据库记录详情</el-divider>\r\n      \r\n      <el-descriptions :column=\"1\" border size=\"small\">\r\n        <el-descriptions-item label=\"记录ID\">{{ latestLog.id }}</el-descriptions-item>\r\n        <el-descriptions-item label=\"记录时间\">{{ formatDate(latestLog.timestamp) }}</el-descriptions-item>\r\n        <el-descriptions-item label=\"来源\">{{ latestLog.source }}</el-descriptions-item>\r\n        <el-descriptions-item label=\"载荷\">\r\n          <el-tag size=\"small\">{{ latestLog.payload }}</el-tag>\r\n        </el-descriptions-item>\r\n        <el-descriptions-item label=\"攻击类型\">{{ latestLog.attackType }}</el-descriptions-item>\r\n        <el-descriptions-item label=\"危险等级\">\r\n          <el-tag :type=\"getSeverityType(latestLog.severity)\">{{ latestLog.severity }}</el-tag>\r\n        </el-descriptions-item>\r\n        <el-descriptions-item label=\"防御状态\">\r\n          <el-tag :type=\"latestLog.prevented ? 'success' : 'danger'\">\r\n            {{ latestLog.prevented ? '已防御' : '未防御' }}\r\n          </el-tag>\r\n        </el-descriptions-item>\r\n        <el-descriptions-item label=\"防御措施\">{{ latestLog.defenseMeasure }}</el-descriptions-item>\r\n        <el-descriptions-item label=\"IP地址\">{{ latestLog.ipAddress }}</el-descriptions-item>\r\n        <el-descriptions-item label=\"用户代理\">{{ latestLog.userAgent }}</el-descriptions-item>\r\n      </el-descriptions>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, watch, computed } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { useRouter } from 'vue-router'\r\nimport SafeInput from '../components/SafeInput.vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport { xssVectors} from '../utils/xssUtils'\r\n\r\nconst store = useStore()\r\nconst router = useRouter()\r\nconst loading = ref(false)\r\nconst testResult = ref(null)\r\n\r\n// 测试表单\r\nconst testForm = ref({\r\n  inputType: 'predefined',\r\n  selectedVector: '',\r\n  payload: '',\r\n  defenseOptions: {\r\n    inputValidation: true,\r\n    outputEncoding: true,\r\n    csp: true\r\n  }\r\n})\r\n\r\n// 监听选择的向量改变\r\nwatch(() => testForm.value.selectedVector, (newVal) => {\r\n  if (newVal) {\r\n    testForm.value.payload = newVal\r\n  }\r\n})\r\n\r\n// 处理XSS检测回调\r\nconst handleXssDetected = (payload) => {\r\n  console.log('XSS detected:', payload)\r\n  // 这里可以添加其他处理逻辑\r\n}\r\n\r\n// 获取最新的攻击日志记录\r\nconst attackLogs = computed(() => store.state.attackLogs)\r\nconst latestLog = computed(() => attackLogs.value.length > 0 ? attackLogs.value[0] : null)\r\n\r\n// 从数据库获取最新日志\r\nconst refreshLatestLog = async () => {\r\n  const log = await store.dispatch('fetchLatestAttackLog')\r\n  if (!log) {\r\n    ElMessage.warning('未找到日志记录')\r\n  }\r\n}\r\n\r\n// 导航到日志页面\r\nconst viewAllLogs = () => {\r\n  router.push('/logs')\r\n}\r\n\r\n// 格式化日期\r\nconst formatDate = (dateStr) => {\r\n  if (!dateStr) return ''\r\n  const date = new Date(dateStr)\r\n  return date.toLocaleString()\r\n}\r\n\r\n// 运行测试\r\nconst runTest = async () => {\r\n  loading.value = true\r\n  testResult.value = null\r\n\r\n  const payload = testForm.value.inputType === 'predefined'\r\n    ? testForm.value.selectedVector\r\n    : testForm.value.payload\r\n\r\n  if (!payload) {\r\n    ElMessage.warning('请输入或选择XSS载荷')\r\n    loading.value = false\r\n    return\r\n  }\r\n\r\n  try {\r\n    // 调用真实的后端API\r\n    const response = await store.dispatch('runXssTest', {\r\n      input: payload,\r\n      defenseOptions: {\r\n        htmlEscape: testForm.value.defenseOptions.outputEncoding,\r\n        removeJsEvents: testForm.value.defenseOptions.inputValidation,\r\n        removeDangerousTags: testForm.value.defenseOptions.inputValidation\r\n      }\r\n    })\r\n    \r\n    if (response) {\r\n      testResult.value = {\r\n        originalPayload: response.input,\r\n        sanitizedPayload: response.sanitizedOutput,\r\n        attackType: response.attackType,\r\n        severity: response.severity,\r\n        prevented: response.prevented,\r\n        description: response.description\r\n      }\r\n      \r\n      // 刷新攻击日志数据\r\n      await store.dispatch('fetchAttackLogs')\r\n      \r\n      // 额外获取最新的数据库记录\r\n      setTimeout(async () => {\r\n        const latestRecord = await store.dispatch('fetchLatestAttackLog')\r\n        if (latestRecord) {\r\n          ElMessage.success(`测试数据已存入数据库，记录ID: ${latestRecord.id}`)\r\n        }\r\n      }, 500)\r\n    }\r\n    \r\n    loading.value = false\r\n  } catch (error) {\r\n    console.error('Failed to run test:', error)\r\n    let errorMessage = '测试执行失败，请查看控制台日志'\r\n    \r\n    // 获取详细错误信息（如果有）\r\n    if (error.response && error.response.data) {\r\n      if (error.response.data.message) {\r\n        errorMessage = error.response.data.message\r\n      }\r\n      console.error('服务器返回错误:', error.response.data)\r\n    }\r\n    \r\n    ElMessage.error(errorMessage)\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 重置表单\r\nconst resetForm = () => {\r\n  testForm.value = {\r\n    inputType: 'predefined',\r\n    selectedVector: '',\r\n    payload: '',\r\n    defenseOptions: {\r\n      inputValidation: true,\r\n      outputEncoding: true,\r\n      csp: true\r\n    }\r\n  }\r\n  testResult.value = null\r\n}\r\n\r\n// 辅助函数：获取危险等级对应的tag类型\r\nconst getSeverityType = (severity) => {\r\n  switch(severity) {\r\n    case 'high': return 'danger'\r\n    case 'medium': return 'warning'\r\n    default: return 'info'\r\n  }\r\n}\r\n// 辅助函数：确定攻击类型\r\n// const getAttackType = (payload) => {\r\n//   if (!payload) return '未知攻击类型'\r\n  \r\n//   if (payload.includes('<script')) {\r\n//     return '脚本注入 (Reflected XSS)'\r\n//   } else if (payload.includes('onerror') || payload.includes('onload')) {\r\n//     return '事件处理注入 (DOM XSS)'\r\n//   } else if (payload.includes('javascript:')) {\r\n//     return 'JavaScript 伪协议 (DOM XSS)'\r\n//   } else {\r\n//     return '通用XSS攻击'\r\n//   }\r\n// }\r\n\r\n// // 辅助函数：根据载荷生成说明\r\n// const getDescriptionForPayload = (payload, severity) => {\r\n//   if (severity === 'high') {\r\n//     return '此载荷尝试执行高危脚本，可能窃取cookie或执行恶意代码。'\r\n//   } else if (severity === 'medium') {\r\n//     return '此载荷尝试注入HTML或JavaScript代码，可能导致页面内容被篡改。'\r\n//   } else {\r\n//     return '此载荷包含潜在的XSS模式，但危险性较低。'\r\n//   }\r\n// }\r\n</script>\r\n\r\n<style scoped>\r\n.xss-test-container {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.xss-test-title {\r\n  margin-top: 20px;\r\n}\r\n\r\n.test-card, .result-card {\r\n  height: 100%;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.vector-type {\r\n  float: right;\r\n  color: #909399;\r\n  font-size: 0.9em;\r\n}\r\n\r\n.result-section {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.render-container {\r\n  margin-top: 10px;\r\n}\r\n\r\n.render-box {\r\n  border: 1px solid #dcdfe6;\r\n  border-radius: 4px;\r\n  padding: 10px;\r\n  background-color: #fff;\r\n  min-height: 100px;\r\n}\r\n\r\n.danger-content {\r\n  background-color: #fff9f9;\r\n  border: 1px solid #ffebeb;\r\n  border-radius: 4px;\r\n  padding: 10px;\r\n  color: #f56c6c;\r\n}\r\n\r\n.safe-content {\r\n  background-color: #f0f9eb;\r\n  border: 1px solid #e1f3d8;\r\n  border-radius: 4px;\r\n  padding: 10px;\r\n  color: #67c23a;\r\n}\r\n\r\n.analysis-section {\r\n  margin-top: 20px;\r\n}\r\n\r\npre {\r\n  white-space: pre-wrap;\r\n  word-wrap: break-word;\r\n}\r\n\r\n.log-card {\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}