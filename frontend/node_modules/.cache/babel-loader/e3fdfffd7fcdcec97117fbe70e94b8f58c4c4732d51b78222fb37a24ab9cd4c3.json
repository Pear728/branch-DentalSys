{"ast":null,"code":"import { mapGetters } from 'vuex';\nexport default {\n  name: 'PatientProfile',\n  data() {\n    // 验证新密码\n    const validateNewPassword = (rule, value, callback) => {\n      if (value === this.passwordForm.oldPassword) {\n        callback(new Error('新密码不能与当前密码相同'));\n      } else {\n        callback();\n      }\n    };\n\n    // 验证确认密码\n    const validateConfirmPassword = (rule, value, callback) => {\n      if (value !== this.passwordForm.newPassword) {\n        callback(new Error('两次输入的密码不一致'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      isEditing: false,\n      defaultAvatar: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png',\n      // 个人资料表单\n      profileForm: {\n        username: '',\n        realName: '',\n        gender: 1,\n        phone: '',\n        email: '',\n        avatar: '',\n        birthDate: '',\n        idCard: '',\n        address: '',\n        emergencyContact: '',\n        emergencyPhone: '',\n        medicalHistory: '',\n        allergies: ''\n      },\n      // 账号安全相关\n      showChangePassword: false,\n      showChangePhone: false,\n      showChangeEmail: false,\n      // 修改密码表单\n      passwordForm: {\n        oldPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      },\n      // 密码表单验证规则\n      passwordRules: {\n        oldPassword: [{\n          required: true,\n          message: '请输入当前密码',\n          trigger: 'blur'\n        }],\n        newPassword: [{\n          required: true,\n          message: '请输入新密码',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          message: '密码长度最少为6个字符',\n          trigger: 'blur'\n        }, {\n          validator: validateNewPassword,\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          required: true,\n          message: '请再次输入新密码',\n          trigger: 'blur'\n        }, {\n          validator: validateConfirmPassword,\n          trigger: 'blur'\n        }]\n      },\n      // 修改手机表单\n      phoneForm: {\n        newPhone: '',\n        verifyCode: ''\n      },\n      // 手机表单验证规则\n      phoneRules: {\n        newPhone: [{\n          required: true,\n          message: '请输入新手机号',\n          trigger: 'blur'\n        }, {\n          pattern: /^1[3-9]\\d{9}$/,\n          message: '请输入正确的手机号码',\n          trigger: 'blur'\n        }],\n        verifyCode: [{\n          required: true,\n          message: '请输入验证码',\n          trigger: 'blur'\n        }, {\n          len: 6,\n          message: '验证码长度应为6位',\n          trigger: 'blur'\n        }]\n      },\n      // 修改邮箱表单\n      emailForm: {\n        newEmail: '',\n        verifyCode: ''\n      },\n      // 邮箱表单验证规则\n      emailRules: {\n        newEmail: [{\n          required: true,\n          message: '请输入新邮箱',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: '请输入正确的邮箱地址',\n          trigger: 'blur'\n        }],\n        verifyCode: [{\n          required: true,\n          message: '请输入验证码',\n          trigger: 'blur'\n        }, {\n          len: 6,\n          message: '验证码长度应为6位',\n          trigger: 'blur'\n        }]\n      },\n      // 验证码倒计时\n      cooldown: 0,\n      emailCooldown: 0\n    };\n  },\n  computed: {\n    ...mapGetters(['currentUser'])\n  },\n  created() {\n    this.getProfileData();\n  },\n  methods: {\n    // 获取个人资料数据\n    getProfileData() {\n      // 默认先填充当前用户数据\n      this.profileForm.username = this.currentUser.username;\n      this.profileForm.realName = this.currentUser.realName;\n      this.profileForm.gender = this.currentUser.gender;\n      this.profileForm.phone = this.currentUser.phone;\n      this.profileForm.email = this.currentUser.email;\n      this.profileForm.avatar = this.currentUser.avatar;\n\n      // 获取患者详细信息\n      this.$http.get(`/patient/profile/${this.currentUser.id}`).then(response => {\n        if (response.data.code === 200) {\n          const data = response.data.data;\n\n          // 填充患者特有的信息\n          this.profileForm.birthDate = data.birthDate ? new Date(data.birthDate) : '';\n          this.profileForm.idCard = data.idCard;\n          this.profileForm.address = data.address;\n          this.profileForm.emergencyContact = data.emergencyContact;\n          this.profileForm.emergencyPhone = data.emergencyPhone;\n          this.profileForm.medicalHistory = data.medicalHistory;\n          this.profileForm.allergies = data.allergies;\n        }\n      }).catch(error => {\n        console.error('获取个人资料失败', error);\n        this.$message.error('获取个人资料失败，请稍后重试');\n      });\n    },\n    // 编辑个人资料\n    editProfile() {\n      this.isEditing = true;\n    },\n    // 保存个人资料\n    saveProfile() {\n      // 将表单中的个人信息和患者专有信息分开\n      const basicInfo = {\n        id: this.currentUser.id,\n        realName: this.profileForm.realName,\n        gender: this.profileForm.gender,\n        phone: this.profileForm.phone,\n        email: this.profileForm.email\n      };\n      const patientInfo = {\n        userId: this.currentUser.id,\n        birthDate: this.profileForm.birthDate ? this.formatDate(this.profileForm.birthDate) : null,\n        idCard: this.profileForm.idCard,\n        address: this.profileForm.address,\n        emergencyContact: this.profileForm.emergencyContact,\n        emergencyPhone: this.profileForm.emergencyPhone,\n        medicalHistory: this.profileForm.medicalHistory,\n        allergies: this.profileForm.allergies\n      };\n\n      // 更新基本信息\n      this.$http.put('/user', basicInfo).then(response => {\n        if (response.data.code === 200) {\n          // 成功更新用户基本信息，继续更新患者信息\n          return this.$http.put('/patient/profile', patientInfo);\n        } else {\n          this.$message.error(response.data.message || '更新个人资料失败');\n          return Promise.reject(new Error('更新个人资料失败'));\n        }\n      }).then(response => {\n        if (response.data.code === 200) {\n          this.$message.success('更新个人资料成功');\n          this.isEditing = false;\n\n          // 更新Vuex中的用户信息\n          this.$store.commit('updateUser', basicInfo);\n        } else {\n          this.$message.error(response.data.message || '更新患者资料失败');\n        }\n      }).catch(error => {\n        console.error('更新个人资料失败', error);\n        this.$message.error('更新个人资料失败，请稍后重试');\n      });\n    },\n    // 取消编辑\n    cancelEdit() {\n      this.isEditing = false;\n      this.getProfileData(); // 重新获取数据，恢复原始值\n    },\n    // 修改密码\n    changePassword() {\n      this.$refs.passwordForm.validate(valid => {\n        if (valid) {\n          // 模拟密码修改成功\n          this.$message.success('密码修改成功，请重新登录');\n          this.showChangePassword = false;\n\n          // 清空表单\n          this.$refs.passwordForm.resetFields();\n\n          // 模拟退出登录\n          setTimeout(() => {\n            this.$message.info('模拟退出登录，实际应用中会跳转到登录页');\n            // 注释掉实际退出操作，便于测试\n            // this.$store.dispatch('logout')\n            // this.$router.push('/login')\n          }, 1500);\n        }\n      });\n    },\n    // 发送手机验证码\n    sendVerifyCode() {\n      if (!this.phoneForm.newPhone) {\n        this.$message.warning('请先输入新手机号');\n        return;\n      }\n      if (!/^1[3-9]\\d{9}$/.test(this.phoneForm.newPhone)) {\n        this.$message.warning('请输入正确的手机号码');\n        return;\n      }\n\n      // 模拟生成验证码\n      const mockCode = Math.floor(100000 + Math.random() * 900000).toString(); // 生成六位数字验证码\n\n      // 自动填入验证码\n      this.phoneForm.verifyCode = mockCode;\n\n      // 显示成功提示\n      this.$message.success(`模拟验证码已生成：${mockCode}`);\n\n      // 启动倒计时\n      this.cooldown = 60;\n      const timer = setInterval(() => {\n        this.cooldown--;\n        if (this.cooldown <= 0) {\n          clearInterval(timer);\n        }\n      }, 1000);\n    },\n    // 修改手机号\n    changePhone() {\n      this.$refs.phoneForm.validate(valid => {\n        if (valid) {\n          // 模拟手机号修改成功\n          this.$message.success('手机号修改成功');\n          this.showChangePhone = false;\n\n          // 更新表单和存储的用户信息\n          this.profileForm.phone = this.phoneForm.newPhone;\n          this.$store.commit('updateUser', {\n            phone: this.phoneForm.newPhone\n          });\n\n          // 清空表单\n          this.$refs.phoneForm.resetFields();\n        }\n      });\n    },\n    // 发送邮箱验证码\n    sendEmailCode() {\n      if (!this.emailForm.newEmail) {\n        this.$message.warning('请先输入新邮箱');\n        return;\n      }\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(this.emailForm.newEmail)) {\n        this.$message.warning('请输入正确的邮箱地址');\n        return;\n      }\n\n      // 模拟生成验证码\n      const mockCode = Math.floor(100000 + Math.random() * 900000).toString(); // 生成六位数字验证码\n\n      // 自动填入验证码\n      this.emailForm.verifyCode = mockCode;\n\n      // 显示成功提示\n      this.$message.success(`模拟验证码已生成：${mockCode}`);\n\n      // 启动倒计时\n      this.emailCooldown = 60;\n      const timer = setInterval(() => {\n        this.emailCooldown--;\n        if (this.emailCooldown <= 0) {\n          clearInterval(timer);\n        }\n      }, 1000);\n    },\n    // 修改邮箱\n    changeEmail() {\n      this.$refs.emailForm.validate(valid => {\n        if (valid) {\n          // 模拟邮箱修改成功\n          this.$message.success('邮箱修改成功');\n          this.showChangeEmail = false;\n\n          // 更新表单和存储的用户信息\n          this.profileForm.email = this.emailForm.newEmail;\n          this.$store.commit('updateUser', {\n            email: this.emailForm.newEmail\n          });\n\n          // 清空表单\n          this.$refs.emailForm.resetFields();\n        }\n      });\n    },\n    // 格式化日期\n    formatDate(date) {\n      if (!date) return null;\n      const d = new Date(date);\n      const year = d.getFullYear();\n      const month = (d.getMonth() + 1).toString().padStart(2, '0');\n      const day = d.getDate().toString().padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    },\n    // 手机号脱敏显示\n    maskedPhone(phone) {\n      if (!phone) return '未绑定';\n      return phone.substr(0, 3) + '****' + phone.substr(7);\n    },\n    // 邮箱脱敏显示\n    maskedEmail(email) {\n      if (!email) return '未绑定';\n      const parts = email.split('@');\n      if (parts.length !== 2) return email;\n      let username = parts[0];\n      const domain = parts[1];\n      if (username.length <= 3) {\n        username = username.charAt(0) + '***';\n      } else {\n        username = username.substr(0, 3) + '***';\n      }\n      return username + '@' + domain;\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","name","data","validateNewPassword","rule","value","callback","passwordForm","oldPassword","Error","validateConfirmPassword","newPassword","isEditing","defaultAvatar","profileForm","username","realName","gender","phone","email","avatar","birthDate","idCard","address","emergencyContact","emergencyPhone","medicalHistory","allergies","showChangePassword","showChangePhone","showChangeEmail","confirmPassword","passwordRules","required","message","trigger","min","validator","phoneForm","newPhone","verifyCode","phoneRules","pattern","len","emailForm","newEmail","emailRules","type","cooldown","emailCooldown","computed","created","getProfileData","methods","currentUser","$http","get","id","then","response","code","Date","catch","error","console","$message","editProfile","saveProfile","basicInfo","patientInfo","userId","formatDate","put","Promise","reject","success","$store","commit","cancelEdit","changePassword","$refs","validate","valid","resetFields","setTimeout","info","sendVerifyCode","warning","test","mockCode","Math","floor","random","toString","timer","setInterval","clearInterval","changePhone","sendEmailCode","emailRegex","changeEmail","date","d","year","getFullYear","month","getMonth","padStart","day","getDate","maskedPhone","substr","maskedEmail","parts","split","length","domain","charAt"],"sources":["src/views/patient/Profile.vue"],"sourcesContent":["<template>\n  <div class=\"patient-profile\">\n    <el-card class=\"profile-card\">\n      <div slot=\"header\">\n        <span>个人资料</span>\n        <el-button style=\"float: right; padding: 3px 0\" type=\"text\" @click=\"editProfile\">\n          <i class=\"el-icon-edit\"></i> 编辑资料\n        </el-button>\n      </div>\n      \n      <el-form :model=\"profileForm\" label-width=\"100px\" class=\"profile-form\">\n        <el-row :gutter=\"20\">\n          <el-col :span=\"8\">\n            <div class=\"avatar-container\">\n              <el-avatar :size=\"120\" :src=\"profileForm.avatar || defaultAvatar\"></el-avatar>\n              <div class=\"upload-avatar\" v-if=\"isEditing\">\n                <el-button type=\"primary\" size=\"small\" icon=\"el-icon-upload\">更换头像</el-button>\n              </div>\n            </div>\n          </el-col>\n          <el-col :span=\"16\">\n            <el-form-item label=\"用户名\">\n              <el-input v-model=\"profileForm.username\" :disabled=\"true\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"真实姓名\">\n              <el-input v-model=\"profileForm.realName\" :disabled=\"!isEditing\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"性别\">\n              <el-radio-group v-model=\"profileForm.gender\" :disabled=\"!isEditing\">\n                <el-radio :label=\"1\">男</el-radio>\n                <el-radio :label=\"0\">女</el-radio>\n              </el-radio-group>\n            </el-form-item>\n            <el-form-item label=\"手机号码\">\n              <el-input v-model=\"profileForm.phone\" :disabled=\"!isEditing\"></el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n        \n        <el-divider></el-divider>\n        \n        <el-row :gutter=\"20\">\n          <el-col :span=\"12\">\n            <el-form-item label=\"生日\">\n              <el-date-picker\n                v-model=\"profileForm.birthDate\"\n                type=\"date\"\n                placeholder=\"选择日期\"\n                style=\"width: 100%\"\n                :disabled=\"!isEditing\">\n              </el-date-picker>\n            </el-form-item>\n            <el-form-item label=\"身份证号\">\n              <el-input v-model=\"profileForm.idCard\" :disabled=\"!isEditing\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"邮箱\">\n              <el-input v-model=\"profileForm.email\" :disabled=\"!isEditing\"></el-input>\n            </el-form-item>\n          </el-col>\n          <el-col :span=\"12\">\n            <el-form-item label=\"紧急联系人\">\n              <el-input v-model=\"profileForm.emergencyContact\" :disabled=\"!isEditing\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"紧急联系电话\">\n              <el-input v-model=\"profileForm.emergencyPhone\" :disabled=\"!isEditing\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"住址\">\n              <el-input v-model=\"profileForm.address\" :disabled=\"!isEditing\"></el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n        \n        <el-divider>医疗信息</el-divider>\n        \n        <el-row :gutter=\"20\">\n          <el-col :span=\"24\">\n            <el-form-item label=\"病史\">\n              <el-input\n                type=\"textarea\"\n                :rows=\"3\"\n                placeholder=\"请填写您的病史信息\"\n                v-model=\"profileForm.medicalHistory\"\n                :disabled=\"!isEditing\">\n              </el-input>\n            </el-form-item>\n            <el-form-item label=\"过敏史\">\n              <el-input\n                type=\"textarea\"\n                :rows=\"3\"\n                placeholder=\"请填写您的过敏史信息\"\n                v-model=\"profileForm.allergies\"\n                :disabled=\"!isEditing\">\n              </el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n        \n        <el-form-item v-if=\"isEditing\">\n          <el-button type=\"primary\" @click=\"saveProfile\">保存</el-button>\n          <el-button @click=\"cancelEdit\">取消</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n    \n    <el-card class=\"security-card\">\n      <div slot=\"header\">\n        <span>账号安全</span>\n      </div>\n      \n      <div class=\"security-item\">\n        <div class=\"security-info\">\n          <i class=\"el-icon-lock\"></i>\n          <div class=\"security-text\">\n            <h4>修改密码</h4>\n            <p>定期修改密码可以保护您的账号安全</p>\n          </div>\n        </div>\n        <el-button size=\"small\" @click=\"showChangePassword = true\">修改</el-button>\n      </div>\n      \n      <div class=\"security-item\">\n        <div class=\"security-info\">\n          <i class=\"el-icon-mobile-phone\"></i>\n          <div class=\"security-text\">\n            <h4>绑定手机</h4>\n            <p>已绑定手机：{{ maskedPhone(profileForm.phone) }}</p>\n          </div>\n        </div>\n        <el-button size=\"small\" @click=\"showChangePhone = true\">修改</el-button>\n      </div>\n      \n      <div class=\"security-item\">\n        <div class=\"security-info\">\n          <i class=\"el-icon-message\"></i>\n          <div class=\"security-text\">\n            <h4>绑定邮箱</h4>\n            <p>已绑定邮箱：{{ maskedEmail(profileForm.email) }}</p>\n          </div>\n        </div>\n        <el-button size=\"small\" @click=\"showChangeEmail = true\">修改</el-button>\n      </div>\n    </el-card>\n    \n    <!-- 修改密码对话框 -->\n    <el-dialog title=\"修改密码\" :visible.sync=\"showChangePassword\" width=\"400px\">\n      <el-form :model=\"passwordForm\" :rules=\"passwordRules\" ref=\"passwordForm\" label-width=\"100px\">\n        <el-form-item label=\"当前密码\" prop=\"oldPassword\">\n          <el-input v-model=\"passwordForm.oldPassword\" type=\"password\" show-password></el-input>\n        </el-form-item>\n        <el-form-item label=\"新密码\" prop=\"newPassword\">\n          <el-input v-model=\"passwordForm.newPassword\" type=\"password\" show-password></el-input>\n        </el-form-item>\n        <el-form-item label=\"确认新密码\" prop=\"confirmPassword\">\n          <el-input v-model=\"passwordForm.confirmPassword\" type=\"password\" show-password></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"showChangePassword = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"changePassword\">确认修改</el-button>\n      </div>\n    </el-dialog>\n    \n    <!-- 修改手机对话框 -->\n    <el-dialog title=\"修改手机号\" :visible.sync=\"showChangePhone\" width=\"400px\">\n      <el-form :model=\"phoneForm\" :rules=\"phoneRules\" ref=\"phoneForm\" label-width=\"100px\">\n        <el-form-item label=\"当前手机号\">\n          <el-input v-model=\"profileForm.phone\" disabled></el-input>\n        </el-form-item>\n        <el-form-item label=\"新手机号\" prop=\"newPhone\">\n          <el-input v-model=\"phoneForm.newPhone\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"验证码\" prop=\"verifyCode\">\n          <div class=\"verify-code-container\">\n            <el-input v-model=\"phoneForm.verifyCode\" class=\"verify-code-input\"></el-input>\n            <el-button type=\"primary\" :disabled=\"cooldown > 0\" @click=\"sendVerifyCode\">\n              {{ cooldown > 0 ? `${cooldown}秒后重新获取` : '获取验证码' }}\n            </el-button>\n          </div>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"showChangePhone = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"changePhone\">确认修改</el-button>\n      </div>\n    </el-dialog>\n    \n    <!-- 修改邮箱对话框 -->\n    <el-dialog title=\"修改邮箱\" :visible.sync=\"showChangeEmail\" width=\"400px\">\n      <el-form :model=\"emailForm\" :rules=\"emailRules\" ref=\"emailForm\" label-width=\"100px\">\n        <el-form-item label=\"当前邮箱\">\n          <el-input v-model=\"profileForm.email\" disabled></el-input>\n        </el-form-item>\n        <el-form-item label=\"新邮箱\" prop=\"newEmail\">\n          <el-input v-model=\"emailForm.newEmail\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"验证码\" prop=\"verifyCode\">\n          <div class=\"verify-code-container\">\n            <el-input v-model=\"emailForm.verifyCode\" class=\"verify-code-input\"></el-input>\n            <el-button type=\"primary\" :disabled=\"emailCooldown > 0\" @click=\"sendEmailVerifyCode\">\n              {{ emailCooldown > 0 ? `${emailCooldown}秒后重新获取` : '获取验证码' }}\n            </el-button>\n          </div>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"showChangeEmail = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"changeEmail\">确认修改</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'PatientProfile',\n  data() {\n    // 验证新密码\n    const validateNewPassword = (rule, value, callback) => {\n      if (value === this.passwordForm.oldPassword) {\n        callback(new Error('新密码不能与当前密码相同'))\n      } else {\n        callback()\n      }\n    }\n    \n    // 验证确认密码\n    const validateConfirmPassword = (rule, value, callback) => {\n      if (value !== this.passwordForm.newPassword) {\n        callback(new Error('两次输入的密码不一致'))\n      } else {\n        callback()\n      }\n    }\n    \n    return {\n      isEditing: false,\n      defaultAvatar: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png',\n      \n      // 个人资料表单\n      profileForm: {\n        username: '',\n        realName: '',\n        gender: 1,\n        phone: '',\n        email: '',\n        avatar: '',\n        birthDate: '',\n        idCard: '',\n        address: '',\n        emergencyContact: '',\n        emergencyPhone: '',\n        medicalHistory: '',\n        allergies: ''\n      },\n      \n      // 账号安全相关\n      showChangePassword: false,\n      showChangePhone: false,\n      showChangeEmail: false,\n      \n      // 修改密码表单\n      passwordForm: {\n        oldPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      },\n      \n      // 密码表单验证规则\n      passwordRules: {\n        oldPassword: [\n          { required: true, message: '请输入当前密码', trigger: 'blur' }\n        ],\n        newPassword: [\n          { required: true, message: '请输入新密码', trigger: 'blur' },\n          { min: 6, message: '密码长度最少为6个字符', trigger: 'blur' },\n          { validator: validateNewPassword, trigger: 'blur' }\n        ],\n        confirmPassword: [\n          { required: true, message: '请再次输入新密码', trigger: 'blur' },\n          { validator: validateConfirmPassword, trigger: 'blur' }\n        ]\n      },\n      \n      // 修改手机表单\n      phoneForm: {\n        newPhone: '',\n        verifyCode: ''\n      },\n      \n      // 手机表单验证规则\n      phoneRules: {\n        newPhone: [\n          { required: true, message: '请输入新手机号', trigger: 'blur' },\n          { pattern: /^1[3-9]\\d{9}$/, message: '请输入正确的手机号码', trigger: 'blur' }\n        ],\n        verifyCode: [\n          { required: true, message: '请输入验证码', trigger: 'blur' },\n          { len: 6, message: '验证码长度应为6位', trigger: 'blur' }\n        ]\n      },\n      \n      // 修改邮箱表单\n      emailForm: {\n        newEmail: '',\n        verifyCode: ''\n      },\n      \n      // 邮箱表单验证规则\n      emailRules: {\n        newEmail: [\n          { required: true, message: '请输入新邮箱', trigger: 'blur' },\n          { type: 'email', message: '请输入正确的邮箱地址', trigger: 'blur' }\n        ],\n        verifyCode: [\n          { required: true, message: '请输入验证码', trigger: 'blur' },\n          { len: 6, message: '验证码长度应为6位', trigger: 'blur' }\n        ]\n      },\n      \n      // 验证码倒计时\n      cooldown: 0,\n      emailCooldown: 0\n    }\n  },\n  computed: {\n    ...mapGetters(['currentUser'])\n  },\n  created() {\n    this.getProfileData()\n  },\n  methods: {\n    // 获取个人资料数据\n    getProfileData() {\n      // 默认先填充当前用户数据\n      this.profileForm.username = this.currentUser.username\n      this.profileForm.realName = this.currentUser.realName\n      this.profileForm.gender = this.currentUser.gender\n      this.profileForm.phone = this.currentUser.phone\n      this.profileForm.email = this.currentUser.email\n      this.profileForm.avatar = this.currentUser.avatar\n      \n      // 获取患者详细信息\n      this.$http.get(`/patient/profile/${this.currentUser.id}`)\n        .then(response => {\n          if (response.data.code === 200) {\n            const data = response.data.data\n            \n            // 填充患者特有的信息\n            this.profileForm.birthDate = data.birthDate ? new Date(data.birthDate) : ''\n            this.profileForm.idCard = data.idCard\n            this.profileForm.address = data.address\n            this.profileForm.emergencyContact = data.emergencyContact\n            this.profileForm.emergencyPhone = data.emergencyPhone\n            this.profileForm.medicalHistory = data.medicalHistory\n            this.profileForm.allergies = data.allergies\n          }\n        })\n        .catch(error => {\n          console.error('获取个人资料失败', error)\n          this.$message.error('获取个人资料失败，请稍后重试')\n        })\n    },\n    \n    // 编辑个人资料\n    editProfile() {\n      this.isEditing = true\n    },\n    \n    // 保存个人资料\n    saveProfile() {\n      // 将表单中的个人信息和患者专有信息分开\n      const basicInfo = {\n        id: this.currentUser.id,\n        realName: this.profileForm.realName,\n        gender: this.profileForm.gender,\n        phone: this.profileForm.phone,\n        email: this.profileForm.email\n      }\n      \n      const patientInfo = {\n        userId: this.currentUser.id,\n        birthDate: this.profileForm.birthDate ? this.formatDate(this.profileForm.birthDate) : null,\n        idCard: this.profileForm.idCard,\n        address: this.profileForm.address,\n        emergencyContact: this.profileForm.emergencyContact,\n        emergencyPhone: this.profileForm.emergencyPhone,\n        medicalHistory: this.profileForm.medicalHistory,\n        allergies: this.profileForm.allergies\n      }\n      \n      // 更新基本信息\n      this.$http.put('/user', basicInfo)\n        .then(response => {\n          if (response.data.code === 200) {\n            // 成功更新用户基本信息，继续更新患者信息\n            return this.$http.put('/patient/profile', patientInfo)\n          } else {\n            this.$message.error(response.data.message || '更新个人资料失败')\n            return Promise.reject(new Error('更新个人资料失败'))\n          }\n        })\n        .then(response => {\n          if (response.data.code === 200) {\n            this.$message.success('更新个人资料成功')\n            this.isEditing = false\n            \n            // 更新Vuex中的用户信息\n            this.$store.commit('updateUser', basicInfo)\n          } else {\n            this.$message.error(response.data.message || '更新患者资料失败')\n          }\n        })\n        .catch(error => {\n          console.error('更新个人资料失败', error)\n          this.$message.error('更新个人资料失败，请稍后重试')\n        })\n    },\n    \n    // 取消编辑\n    cancelEdit() {\n      this.isEditing = false\n      this.getProfileData() // 重新获取数据，恢复原始值\n    },\n    \n    // 修改密码\n    changePassword() {\n      this.$refs.passwordForm.validate(valid => {\n        if (valid) {\n          // 模拟密码修改成功\n          this.$message.success('密码修改成功，请重新登录')\n          this.showChangePassword = false\n          \n          // 清空表单\n          this.$refs.passwordForm.resetFields()\n          \n          // 模拟退出登录\n          setTimeout(() => {\n            this.$message.info('模拟退出登录，实际应用中会跳转到登录页')\n            // 注释掉实际退出操作，便于测试\n            // this.$store.dispatch('logout')\n            // this.$router.push('/login')\n          }, 1500)\n        }\n      })\n    },\n    \n    // 发送手机验证码\n    sendVerifyCode() {\n      if (!this.phoneForm.newPhone) {\n        this.$message.warning('请先输入新手机号')\n        return\n      }\n      \n      if (!/^1[3-9]\\d{9}$/.test(this.phoneForm.newPhone)) {\n        this.$message.warning('请输入正确的手机号码')\n        return\n      }\n      \n      // 模拟生成验证码\n      const mockCode = Math.floor(100000 + Math.random() * 900000).toString() // 生成六位数字验证码\n      \n      // 自动填入验证码\n      this.phoneForm.verifyCode = mockCode\n      \n      // 显示成功提示\n      this.$message.success(`模拟验证码已生成：${mockCode}`)\n      \n      // 启动倒计时\n      this.cooldown = 60\n      const timer = setInterval(() => {\n        this.cooldown--\n        if (this.cooldown <= 0) {\n          clearInterval(timer)\n        }\n      }, 1000)\n    },\n    \n    // 修改手机号\n    changePhone() {\n      this.$refs.phoneForm.validate(valid => {\n        if (valid) {\n          // 模拟手机号修改成功\n          this.$message.success('手机号修改成功')\n          this.showChangePhone = false\n          \n          // 更新表单和存储的用户信息\n          this.profileForm.phone = this.phoneForm.newPhone\n          this.$store.commit('updateUser', { phone: this.phoneForm.newPhone })\n          \n          // 清空表单\n          this.$refs.phoneForm.resetFields()\n        }\n      })\n    },\n    \n    // 发送邮箱验证码\n    sendEmailCode() {\n      if (!this.emailForm.newEmail) {\n        this.$message.warning('请先输入新邮箱')\n        return\n      }\n      \n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n      if (!emailRegex.test(this.emailForm.newEmail)) {\n        this.$message.warning('请输入正确的邮箱地址')\n        return\n      }\n      \n      // 模拟生成验证码\n      const mockCode = Math.floor(100000 + Math.random() * 900000).toString() // 生成六位数字验证码\n      \n      // 自动填入验证码\n      this.emailForm.verifyCode = mockCode\n      \n      // 显示成功提示\n      this.$message.success(`模拟验证码已生成：${mockCode}`)\n      \n      // 启动倒计时\n      this.emailCooldown = 60\n      const timer = setInterval(() => {\n        this.emailCooldown--\n        if (this.emailCooldown <= 0) {\n          clearInterval(timer)\n        }\n      }, 1000)\n    },\n    \n    // 修改邮箱\n    changeEmail() {\n      this.$refs.emailForm.validate(valid => {\n        if (valid) {\n          // 模拟邮箱修改成功\n          this.$message.success('邮箱修改成功')\n          this.showChangeEmail = false\n          \n          // 更新表单和存储的用户信息\n          this.profileForm.email = this.emailForm.newEmail\n          this.$store.commit('updateUser', { email: this.emailForm.newEmail })\n          \n          // 清空表单\n          this.$refs.emailForm.resetFields()\n        }\n      })\n    },\n    \n    // 格式化日期\n    formatDate(date) {\n      if (!date) return null\n      \n      const d = new Date(date)\n      const year = d.getFullYear()\n      const month = (d.getMonth() + 1).toString().padStart(2, '0')\n      const day = d.getDate().toString().padStart(2, '0')\n      \n      return `${year}-${month}-${day}`\n    },\n    \n    // 手机号脱敏显示\n    maskedPhone(phone) {\n      if (!phone) return '未绑定'\n      return phone.substr(0, 3) + '****' + phone.substr(7)\n    },\n    \n    // 邮箱脱敏显示\n    maskedEmail(email) {\n      if (!email) return '未绑定'\n      \n      const parts = email.split('@')\n      if (parts.length !== 2) return email\n      \n      let username = parts[0]\n      const domain = parts[1]\n      \n      if (username.length <= 3) {\n        username = username.charAt(0) + '***'\n      } else {\n        username = username.substr(0, 3) + '***'\n      }\n      \n      return username + '@' + domain\n    }\n  }\n}\n</script>\n\n<style scoped>\n.patient-profile {\n  padding-bottom: 20px;\n}\n\n.profile-card,\n.security-card {\n  margin-bottom: 20px;\n}\n\n.avatar-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.upload-avatar {\n  margin-top: 15px;\n}\n\n.verify-code-container {\n  display: flex;\n  align-items: center;\n}\n\n.verify-code-input {\n  margin-right: 10px;\n}\n\n.security-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 15px 0;\n  border-bottom: 1px solid #ebeef5;\n}\n\n.security-item:last-child {\n  border-bottom: none;\n}\n\n.security-info {\n  display: flex;\n  align-items: center;\n}\n\n.security-info i {\n  font-size: 24px;\n  color: #409EFF;\n  margin-right: 15px;\n}\n\n.security-text h4 {\n  margin: 0;\n  margin-bottom: 5px;\n}\n\n.security-text p {\n  margin: 0;\n  font-size: 13px;\n  color: #909399;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}