{"ast":null,"code":"import { mapGetters } from 'vuex';\nexport default {\n  name: 'DoctorSchedule',\n  data() {\n    // 验证结束时间必须大于开始时间\n    const validateEndTime = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('请选择结束时间'));\n      } else if (!this.scheduleForm.startTime) {\n        callback(new Error('请先选择开始时间'));\n      } else {\n        const startTime = new Date(this.scheduleForm.startTime);\n        const endTime = new Date(value);\n        if (endTime <= startTime) {\n          callback(new Error('结束时间必须大于开始时间'));\n        } else {\n          callback();\n        }\n      }\n    };\n\n    // 批量创建时验证结束时间\n    const validateBatchEndTime = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('请选择结束时间'));\n      } else if (!this.batchForm.startTime) {\n        callback(new Error('请先选择开始时间'));\n      } else {\n        const startTime = new Date(this.batchForm.startTime);\n        const endTime = new Date(value);\n        if (endTime <= startTime) {\n          callback(new Error('结束时间必须大于开始时间'));\n        } else {\n          callback();\n        }\n      }\n    };\n    return {\n      schedules: [],\n      selectedDate: null,\n      currentSchedule: null,\n      submitLoading: false,\n      batchLoading: false,\n      // 排班表单\n      scheduleDialogVisible: false,\n      scheduleForm: {\n        id: null,\n        doctorId: null,\n        scheduleDate: null,\n        startTime: null,\n        endTime: null,\n        maxAppointments: 10,\n        status: 1,\n        remark: ''\n      },\n      scheduleRules: {\n        startTime: [{\n          required: true,\n          message: '请选择开始时间',\n          trigger: 'change'\n        }],\n        endTime: [{\n          required: true,\n          message: '请选择结束时间',\n          trigger: 'change'\n        }, {\n          validator: validateEndTime,\n          trigger: 'change'\n        }],\n        maxAppointments: [{\n          required: true,\n          message: '请设置最大预约数',\n          trigger: 'change'\n        }]\n      },\n      // 批量排班表单\n      batchForm: {\n        dateRange: null,\n        startTime: null,\n        endTime: null,\n        maxAppointments: 10\n      },\n      batchRules: {\n        dateRange: [{\n          required: true,\n          message: '请选择日期范围',\n          trigger: 'change'\n        }],\n        startTime: [{\n          required: true,\n          message: '请选择开始时间',\n          trigger: 'change'\n        }],\n        endTime: [{\n          required: true,\n          message: '请选择结束时间',\n          trigger: 'change'\n        }, {\n          validator: validateBatchEndTime,\n          trigger: 'change'\n        }],\n        maxAppointments: [{\n          required: true,\n          message: '请设置最大预约数',\n          trigger: 'change'\n        }]\n      },\n      // 日期选择器选项\n      datePickerOptions: {\n        disabledDate(time) {\n          // 禁用过去的日期\n          const today = new Date();\n          today.setHours(0, 0, 0, 0);\n          return time.getTime() < today.getTime();\n        }\n      }\n    };\n  },\n  computed: {\n    ...mapGetters(['currentUser']),\n    // 格式化后的选中日期\n    formattedSelectedDate() {\n      return this.selectedDate ? this.formatDate(this.selectedDate) : '';\n    }\n  },\n  mounted() {\n    this.fetchSchedules();\n  },\n  methods: {\n    // 获取排班列表\n    fetchSchedules() {\n      this.$http.get(`/schedule/doctor/${this.currentUser.id}`).then(response => {\n        if (response.data.code === 200) {\n          this.schedules = response.data.data;\n\n          // 如果有选中的日期，更新当前排班信息\n          if (this.selectedDate) {\n            this.updateCurrentSchedule();\n          }\n        }\n      }).catch(error => {\n        console.error('获取排班列表错误:', error);\n        this.$message.error('获取排班列表失败，请稍后重试');\n      });\n    },\n    // 刷新排班列表\n    refreshSchedules() {\n      this.fetchSchedules();\n    },\n    // 检查指定日期是否有排班\n    hasSchedule(day) {\n      return this.schedules.some(schedule => {\n        const scheduleDate = this.formatDate(new Date(schedule.scheduleDate));\n        return scheduleDate === day;\n      });\n    },\n    // 获取指定日期的排班时间\n    getScheduleTime(day) {\n      const schedule = this.schedules.find(schedule => {\n        const scheduleDate = this.formatDate(new Date(schedule.scheduleDate));\n        return scheduleDate === day;\n      });\n      if (schedule) {\n        return `${schedule.startTime}-${schedule.endTime}`;\n      }\n      return '';\n    },\n    // 处理日期点击\n    handleDateClick(day) {\n      // 转换为Date对象\n      const date = new Date(day);\n\n      // 如果点击相同日期，则取消选择\n      if (this.selectedDate && this.formatDate(this.selectedDate) === day) {\n        this.selectedDate = null;\n        this.currentSchedule = null;\n      } else {\n        this.selectedDate = date;\n        this.updateCurrentSchedule();\n      }\n    },\n    // 检查日期是否被选中\n    isDateSelected(day) {\n      return this.selectedDate && this.formatDate(this.selectedDate) === day;\n    },\n    // 更新当前选中日期的排班信息\n    updateCurrentSchedule() {\n      if (!this.selectedDate) return;\n      const selectedDateStr = this.formatDate(this.selectedDate);\n      const schedule = this.schedules.find(schedule => {\n        const scheduleDate = this.formatDate(new Date(schedule.scheduleDate));\n        return scheduleDate === selectedDateStr;\n      });\n      this.currentSchedule = schedule || null;\n    },\n    // 创建/修改排班\n    createSchedule() {\n      if (!this.selectedDate) {\n        this.$message.warning('请先选择一个日期');\n        return;\n      }\n      if (this.currentSchedule && this.currentSchedule.appointedCount > 0) {\n        this.$message.warning('该排班已有患者预约，无法修改');\n        return;\n      }\n\n      // 初始化表单\n      this.scheduleForm = this.currentSchedule ? {\n        ...this.currentSchedule\n      } : {\n        id: null,\n        doctorId: this.currentUser.id,\n        scheduleDate: this.selectedDate,\n        startTime: null,\n        endTime: null,\n        maxAppointments: 10,\n        status: 1,\n        remark: ''\n      };\n\n      // 如果是修改排班，需要转换startTime和endTime为Date对象\n      if (this.currentSchedule) {\n        const [startHour, startMinute] = this.currentSchedule.startTime.split(':').map(Number);\n        const [endHour, endMinute] = this.currentSchedule.endTime.split(':').map(Number);\n        const startTime = new Date();\n        startTime.setHours(startHour, startMinute, 0, 0);\n        const endTime = new Date();\n        endTime.setHours(endHour, endMinute, 0, 0);\n        this.scheduleForm.startTime = startTime;\n        this.scheduleForm.endTime = endTime;\n      }\n      this.scheduleDialogVisible = true;\n\n      // 等待Dialog渲染完成后，重置表单验证\n      this.$nextTick(() => {\n        this.$refs.scheduleForm && this.$refs.scheduleForm.clearValidate();\n      });\n    },\n    // 提交排班\n    submitSchedule() {\n      this.$refs.scheduleForm.validate(valid => {\n        if (valid) {\n          this.submitLoading = true;\n\n          // 处理表单数据\n          const formData = {\n            ...this.scheduleForm\n          };\n\n          // 处理日期和时间\n          formData.scheduleDate = this.formatDate(this.selectedDate);\n          formData.startTime = this.formatTime(formData.startTime);\n          formData.endTime = this.formatTime(formData.endTime);\n\n          // 判断是创建还是更新\n          const method = formData.id ? 'put' : 'post';\n          const url = '/schedule';\n          this.$http[method](url, formData).then(response => {\n            if (response.data.code === 200) {\n              this.$message.success(formData.id ? '排班修改成功' : '排班创建成功');\n              this.scheduleDialogVisible = false;\n\n              // 刷新排班列表\n              this.fetchSchedules();\n            } else {\n              this.$message.error(response.data.message || (formData.id ? '排班修改失败' : '排班创建失败'));\n            }\n          }).catch(error => {\n            console.error('提交排班错误:', error);\n            this.$message.error(formData.id ? '排班修改失败，请稍后重试' : '排班创建失败，请稍后重试');\n          }).finally(() => {\n            this.submitLoading = false;\n          });\n        }\n      });\n    },\n    // 切换排班状态\n    toggleScheduleStatus() {\n      if (!this.currentSchedule) return;\n      const newStatus = this.currentSchedule.status === 1 ? 0 : 1;\n      this.$http.put(`/schedule/${this.currentSchedule.id}/status/${newStatus}`).then(response => {\n        if (response.data.code === 200) {\n          this.$message.success(`排班状态已修改为${newStatus === 1 ? '可预约' : '不可用'}`);\n\n          // 更新排班状态\n          this.currentSchedule.status = newStatus;\n        } else {\n          this.$message.error(response.data.message || '修改排班状态失败');\n        }\n      }).catch(error => {\n        console.error('修改排班状态错误:', error);\n        this.$message.error('修改排班状态失败，请稍后重试');\n      });\n    },\n    // 批量创建排班\n    submitBatchSchedule() {\n      this.$refs.batchForm.validate(valid => {\n        if (valid) {\n          this.batchLoading = true;\n\n          // 处理日期和时间\n          const startDate = this.formatDate(this.batchForm.dateRange[0]);\n          const endDate = this.formatDate(this.batchForm.dateRange[1]);\n          const startTime = this.formatTime(this.batchForm.startTime);\n          const endTime = this.formatTime(this.batchForm.endTime);\n          const params = {\n            doctorId: this.currentUser.id,\n            startDate,\n            endDate,\n            startTime,\n            endTime,\n            maxAppointments: this.batchForm.maxAppointments\n          };\n          this.$http.post('/schedule/batch', null, {\n            params\n          }).then(response => {\n            if (response.data.code === 200) {\n              this.$message.success('批量排班创建成功');\n              this.resetBatchForm();\n\n              // 刷新排班列表\n              this.fetchSchedules();\n            } else {\n              this.$message.error(response.data.message || '批量排班创建失败');\n            }\n          }).catch(error => {\n            console.error('批量排班错误:', error);\n            this.$message.error('批量排班创建失败，请稍后重试');\n          }).finally(() => {\n            this.batchLoading = false;\n          });\n        }\n      });\n    },\n    // 重置批量排班表单\n    resetBatchForm() {\n      this.$refs.batchForm.resetFields();\n    },\n    // 格式化日期为 YYYY-MM-DD\n    formatDate(date) {\n      if (!date) return '';\n      const d = new Date(date);\n      const year = d.getFullYear();\n      const month = (d.getMonth() + 1).toString().padStart(2, '0');\n      const day = d.getDate().toString().padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    },\n    // 格式化时间为 HH:MM\n    formatTime(date) {\n      if (!date) return '';\n      const d = new Date(date);\n      const hours = d.getHours().toString().padStart(2, '0');\n      const minutes = d.getMinutes().toString().padStart(2, '0');\n      return `${hours}:${minutes}`;\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","name","data","validateEndTime","rule","value","callback","Error","scheduleForm","startTime","Date","endTime","validateBatchEndTime","batchForm","schedules","selectedDate","currentSchedule","submitLoading","batchLoading","scheduleDialogVisible","id","doctorId","scheduleDate","maxAppointments","status","remark","scheduleRules","required","message","trigger","validator","dateRange","batchRules","datePickerOptions","disabledDate","time","today","setHours","getTime","computed","formattedSelectedDate","formatDate","mounted","fetchSchedules","methods","$http","get","currentUser","then","response","code","updateCurrentSchedule","catch","error","console","$message","refreshSchedules","hasSchedule","day","some","schedule","getScheduleTime","find","handleDateClick","date","isDateSelected","selectedDateStr","createSchedule","warning","appointedCount","startHour","startMinute","split","map","Number","endHour","endMinute","$nextTick","$refs","clearValidate","submitSchedule","validate","valid","formData","formatTime","method","url","success","finally","toggleScheduleStatus","newStatus","put","submitBatchSchedule","startDate","endDate","params","post","resetBatchForm","resetFields","d","year","getFullYear","month","getMonth","toString","padStart","getDate","hours","getHours","minutes","getMinutes"],"sources":["src/views/doctor/Schedule.vue"],"sourcesContent":["<template>\n  <div class=\"schedule-container\">\n    <el-row :gutter=\"20\">\n      <el-col :span=\"16\">\n        <el-card class=\"schedule-card\">\n          <div slot=\"header\">\n            <span>我的排班</span>\n            <el-button style=\"float: right; padding: 3px 0\" type=\"text\" @click=\"refreshSchedules\">\n              <i class=\"el-icon-refresh\"></i> 刷新\n            </el-button>\n          </div>\n          \n          <el-calendar class=\"schedule-calendar\">\n            <template slot=\"dateCell\" slot-scope=\"{date, data}\">\n              <div \n                class=\"calendar-cell\"\n                :class=\"{\n                  'has-schedule': hasSchedule(data.day),\n                  'selected': isDateSelected(data.day)\n                }\"\n                @click=\"handleDateClick(data.day)\">\n                <div class=\"calendar-day\">{{ data.day.split('-')[2] }}</div>\n                <div v-if=\"hasSchedule(data.day)\" class=\"schedule-time\">\n                  {{ getScheduleTime(data.day) }}\n                </div>\n              </div>\n            </template>\n          </el-calendar>\n        </el-card>\n      </el-col>\n      \n      <el-col :span=\"8\">\n        <el-card class=\"date-detail-card\">\n          <div slot=\"header\">\n            <span>{{ selectedDate ? formatDate(selectedDate) + ' 排班详情' : '日期详情' }}</span>\n            <el-button \n              v-if=\"selectedDate\"\n              style=\"float: right; padding: 3px 0\" \n              type=\"text\" \n              @click=\"createSchedule\">\n              {{ currentSchedule ? '修改排班' : '添加排班' }}\n            </el-button>\n          </div>\n          \n          <div v-if=\"!selectedDate\" class=\"empty-detail\">\n            <i class=\"el-icon-date\"></i>\n            <p>请先在日历中选择一个日期</p>\n          </div>\n          \n          <div v-else-if=\"currentSchedule\" class=\"schedule-detail\">\n            <el-descriptions border direction=\"vertical\" :column=\"1\">\n              <el-descriptions-item label=\"开始时间\">{{ currentSchedule.startTime }}</el-descriptions-item>\n              <el-descriptions-item label=\"结束时间\">{{ currentSchedule.endTime }}</el-descriptions-item>\n              <el-descriptions-item label=\"最大预约数\">{{ currentSchedule.maxAppointments }}</el-descriptions-item>\n              <el-descriptions-item label=\"已预约数\">{{ currentSchedule.appointedCount }}</el-descriptions-item>\n              <el-descriptions-item label=\"状态\">\n                <el-tag :type=\"currentSchedule.status === 1 ? 'success' : 'danger'\">\n                  {{ currentSchedule.status === 1 ? '可预约' : '不可用' }}\n                </el-tag>\n              </el-descriptions-item>\n              <el-descriptions-item label=\"备注\">{{ currentSchedule.remark || '无' }}</el-descriptions-item>\n            </el-descriptions>\n            \n            <div class=\"schedule-operations\">\n              <el-button \n                type=\"primary\" \n                size=\"small\"\n                :disabled=\"currentSchedule.appointedCount > 0\"\n                @click=\"createSchedule\">\n                修改排班\n              </el-button>\n              <el-button \n                :type=\"currentSchedule.status === 1 ? 'danger' : 'success'\" \n                size=\"small\"\n                @click=\"toggleScheduleStatus\">\n                {{ currentSchedule.status === 1 ? '设为不可约' : '设为可预约' }}\n              </el-button>\n            </div>\n          </div>\n          \n          <div v-else class=\"empty-schedule\">\n            <i class=\"el-icon-time\"></i>\n            <p>该日期暂无排班</p>\n            <el-button type=\"primary\" @click=\"createSchedule\">添加排班</el-button>\n          </div>\n        </el-card>\n        \n        <el-card class=\"batch-card\">\n          <div slot=\"header\">\n            <span>批量排班</span>\n          </div>\n          \n          <el-form :model=\"batchForm\" :rules=\"batchRules\" ref=\"batchForm\" label-width=\"100px\">\n            <el-form-item label=\"日期范围\" prop=\"dateRange\">\n              <el-date-picker\n                v-model=\"batchForm.dateRange\"\n                type=\"daterange\"\n                range-separator=\"至\"\n                start-placeholder=\"开始日期\"\n                end-placeholder=\"结束日期\"\n                :picker-options=\"datePickerOptions\"\n                style=\"width: 100%\">\n              </el-date-picker>\n            </el-form-item>\n            \n            <el-form-item label=\"时间段\" required>\n              <el-row :gutter=\"10\">\n                <el-col :span=\"11\">\n                  <el-form-item prop=\"startTime\">\n                    <el-time-picker\n                      v-model=\"batchForm.startTime\"\n                      format=\"HH:mm\"\n                      placeholder=\"开始时间\"\n                      style=\"width: 100%\">\n                    </el-time-picker>\n                  </el-form-item>\n                </el-col>\n                <el-col class=\"center\" :span=\"2\">至</el-col>\n                <el-col :span=\"11\">\n                  <el-form-item prop=\"endTime\">\n                    <el-time-picker\n                      v-model=\"batchForm.endTime\"\n                      format=\"HH:mm\"\n                      placeholder=\"结束时间\"\n                      style=\"width: 100%\">\n                    </el-time-picker>\n                  </el-form-item>\n                </el-col>\n              </el-row>\n            </el-form-item>\n            \n            <el-form-item label=\"最大预约数\" prop=\"maxAppointments\">\n              <el-input-number\n                v-model=\"batchForm.maxAppointments\"\n                :min=\"1\"\n                :max=\"50\"\n                style=\"width: 100%\">\n              </el-input-number>\n            </el-form-item>\n            \n            <el-form-item>\n              <el-button type=\"primary\" @click=\"submitBatchSchedule\" :loading=\"batchLoading\">批量创建</el-button>\n              <el-button @click=\"resetBatchForm\">重置</el-button>\n            </el-form-item>\n          </el-form>\n        </el-card>\n      </el-col>\n    </el-row>\n    \n    <!-- 排班编辑对话框 -->\n    <el-dialog :title=\"currentSchedule ? '修改排班' : '添加排班'\" :visible.sync=\"scheduleDialogVisible\" width=\"500px\">\n      <el-form :model=\"scheduleForm\" :rules=\"scheduleRules\" ref=\"scheduleForm\" label-width=\"100px\">\n        <el-form-item label=\"日期\">\n          <el-input v-model=\"formattedSelectedDate\" disabled></el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"开始时间\" prop=\"startTime\">\n          <el-time-picker\n            v-model=\"scheduleForm.startTime\"\n            format=\"HH:mm\"\n            placeholder=\"开始时间\"\n            style=\"width: 100%\">\n          </el-time-picker>\n        </el-form-item>\n        \n        <el-form-item label=\"结束时间\" prop=\"endTime\">\n          <el-time-picker\n            v-model=\"scheduleForm.endTime\"\n            format=\"HH:mm\"\n            placeholder=\"结束时间\"\n            style=\"width: 100%\">\n          </el-time-picker>\n        </el-form-item>\n        \n        <el-form-item label=\"最大预约数\" prop=\"maxAppointments\">\n          <el-input-number\n            v-model=\"scheduleForm.maxAppointments\"\n            :min=\"1\"\n            :max=\"50\"\n            style=\"width: 100%\">\n          </el-input-number>\n        </el-form-item>\n        \n        <el-form-item label=\"状态\" prop=\"status\">\n          <el-radio-group v-model=\"scheduleForm.status\">\n            <el-radio :label=\"1\">可预约</el-radio>\n            <el-radio :label=\"0\">不可用</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        \n        <el-form-item label=\"备注\">\n          <el-input\n            type=\"textarea\"\n            v-model=\"scheduleForm.remark\"\n            placeholder=\"请输入备注信息\"\n            :rows=\"2\">\n          </el-input>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"scheduleDialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"submitSchedule\" :loading=\"submitLoading\">确定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'DoctorSchedule',\n  data() {\n    // 验证结束时间必须大于开始时间\n    const validateEndTime = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('请选择结束时间'))\n      } else if (!this.scheduleForm.startTime) {\n        callback(new Error('请先选择开始时间'))\n      } else {\n        const startTime = new Date(this.scheduleForm.startTime)\n        const endTime = new Date(value)\n        if (endTime <= startTime) {\n          callback(new Error('结束时间必须大于开始时间'))\n        } else {\n          callback()\n        }\n      }\n    }\n    \n    // 批量创建时验证结束时间\n    const validateBatchEndTime = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('请选择结束时间'))\n      } else if (!this.batchForm.startTime) {\n        callback(new Error('请先选择开始时间'))\n      } else {\n        const startTime = new Date(this.batchForm.startTime)\n        const endTime = new Date(value)\n        if (endTime <= startTime) {\n          callback(new Error('结束时间必须大于开始时间'))\n        } else {\n          callback()\n        }\n      }\n    }\n    \n    return {\n      schedules: [],\n      selectedDate: null,\n      currentSchedule: null,\n      submitLoading: false,\n      batchLoading: false,\n      \n      // 排班表单\n      scheduleDialogVisible: false,\n      scheduleForm: {\n        id: null,\n        doctorId: null,\n        scheduleDate: null,\n        startTime: null,\n        endTime: null,\n        maxAppointments: 10,\n        status: 1,\n        remark: ''\n      },\n      scheduleRules: {\n        startTime: [\n          { required: true, message: '请选择开始时间', trigger: 'change' }\n        ],\n        endTime: [\n          { required: true, message: '请选择结束时间', trigger: 'change' },\n          { validator: validateEndTime, trigger: 'change' }\n        ],\n        maxAppointments: [\n          { required: true, message: '请设置最大预约数', trigger: 'change' }\n        ]\n      },\n      \n      // 批量排班表单\n      batchForm: {\n        dateRange: null,\n        startTime: null,\n        endTime: null,\n        maxAppointments: 10\n      },\n      batchRules: {\n        dateRange: [\n          { required: true, message: '请选择日期范围', trigger: 'change' }\n        ],\n        startTime: [\n          { required: true, message: '请选择开始时间', trigger: 'change' }\n        ],\n        endTime: [\n          { required: true, message: '请选择结束时间', trigger: 'change' },\n          { validator: validateBatchEndTime, trigger: 'change' }\n        ],\n        maxAppointments: [\n          { required: true, message: '请设置最大预约数', trigger: 'change' }\n        ]\n      },\n      \n      // 日期选择器选项\n      datePickerOptions: {\n        disabledDate(time) {\n          // 禁用过去的日期\n          const today = new Date()\n          today.setHours(0, 0, 0, 0)\n          return time.getTime() < today.getTime()\n        }\n      }\n    }\n  },\n  computed: {\n    ...mapGetters(['currentUser']),\n    \n    // 格式化后的选中日期\n    formattedSelectedDate() {\n      return this.selectedDate ? this.formatDate(this.selectedDate) : ''\n    }\n  },\n  mounted() {\n    this.fetchSchedules()\n  },\n  methods: {\n    // 获取排班列表\n    fetchSchedules() {\n      this.$http.get(`/schedule/doctor/${this.currentUser.id}`)\n        .then(response => {\n          if (response.data.code === 200) {\n            this.schedules = response.data.data\n            \n            // 如果有选中的日期，更新当前排班信息\n            if (this.selectedDate) {\n              this.updateCurrentSchedule()\n            }\n          }\n        })\n        .catch(error => {\n          console.error('获取排班列表错误:', error)\n          this.$message.error('获取排班列表失败，请稍后重试')\n        })\n    },\n    \n    // 刷新排班列表\n    refreshSchedules() {\n      this.fetchSchedules()\n    },\n    \n    // 检查指定日期是否有排班\n    hasSchedule(day) {\n      return this.schedules.some(schedule => {\n        const scheduleDate = this.formatDate(new Date(schedule.scheduleDate))\n        return scheduleDate === day\n      })\n    },\n    \n    // 获取指定日期的排班时间\n    getScheduleTime(day) {\n      const schedule = this.schedules.find(schedule => {\n        const scheduleDate = this.formatDate(new Date(schedule.scheduleDate))\n        return scheduleDate === day\n      })\n      \n      if (schedule) {\n        return `${schedule.startTime}-${schedule.endTime}`\n      }\n      \n      return ''\n    },\n    \n    // 处理日期点击\n    handleDateClick(day) {\n      // 转换为Date对象\n      const date = new Date(day)\n      \n      // 如果点击相同日期，则取消选择\n      if (this.selectedDate && this.formatDate(this.selectedDate) === day) {\n        this.selectedDate = null\n        this.currentSchedule = null\n      } else {\n        this.selectedDate = date\n        this.updateCurrentSchedule()\n      }\n    },\n    \n    // 检查日期是否被选中\n    isDateSelected(day) {\n      return this.selectedDate && this.formatDate(this.selectedDate) === day\n    },\n    \n    // 更新当前选中日期的排班信息\n    updateCurrentSchedule() {\n      if (!this.selectedDate) return\n      \n      const selectedDateStr = this.formatDate(this.selectedDate)\n      const schedule = this.schedules.find(schedule => {\n        const scheduleDate = this.formatDate(new Date(schedule.scheduleDate))\n        return scheduleDate === selectedDateStr\n      })\n      \n      this.currentSchedule = schedule || null\n    },\n    \n    // 创建/修改排班\n    createSchedule() {\n      if (!this.selectedDate) {\n        this.$message.warning('请先选择一个日期')\n        return\n      }\n      \n      if (this.currentSchedule && this.currentSchedule.appointedCount > 0) {\n        this.$message.warning('该排班已有患者预约，无法修改')\n        return\n      }\n      \n      // 初始化表单\n      this.scheduleForm = this.currentSchedule ? { ...this.currentSchedule } : {\n        id: null,\n        doctorId: this.currentUser.id,\n        scheduleDate: this.selectedDate,\n        startTime: null,\n        endTime: null,\n        maxAppointments: 10,\n        status: 1,\n        remark: ''\n      }\n      \n      // 如果是修改排班，需要转换startTime和endTime为Date对象\n      if (this.currentSchedule) {\n        const [startHour, startMinute] = this.currentSchedule.startTime.split(':').map(Number)\n        const [endHour, endMinute] = this.currentSchedule.endTime.split(':').map(Number)\n        \n        const startTime = new Date()\n        startTime.setHours(startHour, startMinute, 0, 0)\n        \n        const endTime = new Date()\n        endTime.setHours(endHour, endMinute, 0, 0)\n        \n        this.scheduleForm.startTime = startTime\n        this.scheduleForm.endTime = endTime\n      }\n      \n      this.scheduleDialogVisible = true\n      \n      // 等待Dialog渲染完成后，重置表单验证\n      this.$nextTick(() => {\n        this.$refs.scheduleForm && this.$refs.scheduleForm.clearValidate()\n      })\n    },\n    \n    // 提交排班\n    submitSchedule() {\n      this.$refs.scheduleForm.validate(valid => {\n        if (valid) {\n          this.submitLoading = true\n          \n          // 处理表单数据\n          const formData = { ...this.scheduleForm }\n          \n          // 处理日期和时间\n          formData.scheduleDate = this.formatDate(this.selectedDate)\n          formData.startTime = this.formatTime(formData.startTime)\n          formData.endTime = this.formatTime(formData.endTime)\n          \n          // 判断是创建还是更新\n          const method = formData.id ? 'put' : 'post'\n          const url = '/schedule'\n          \n          this.$http[method](url, formData)\n            .then(response => {\n              if (response.data.code === 200) {\n                this.$message.success(formData.id ? '排班修改成功' : '排班创建成功')\n                this.scheduleDialogVisible = false\n                \n                // 刷新排班列表\n                this.fetchSchedules()\n              } else {\n                this.$message.error(response.data.message || (formData.id ? '排班修改失败' : '排班创建失败'))\n              }\n            })\n            .catch(error => {\n              console.error('提交排班错误:', error)\n              this.$message.error(formData.id ? '排班修改失败，请稍后重试' : '排班创建失败，请稍后重试')\n            })\n            .finally(() => {\n              this.submitLoading = false\n            })\n        }\n      })\n    },\n    \n    // 切换排班状态\n    toggleScheduleStatus() {\n      if (!this.currentSchedule) return\n      \n      const newStatus = this.currentSchedule.status === 1 ? 0 : 1\n      \n      this.$http.put(`/schedule/${this.currentSchedule.id}/status/${newStatus}`)\n        .then(response => {\n          if (response.data.code === 200) {\n            this.$message.success(`排班状态已修改为${newStatus === 1 ? '可预约' : '不可用'}`)\n            \n            // 更新排班状态\n            this.currentSchedule.status = newStatus\n          } else {\n            this.$message.error(response.data.message || '修改排班状态失败')\n          }\n        })\n        .catch(error => {\n          console.error('修改排班状态错误:', error)\n          this.$message.error('修改排班状态失败，请稍后重试')\n        })\n    },\n    \n    // 批量创建排班\n    submitBatchSchedule() {\n      this.$refs.batchForm.validate(valid => {\n        if (valid) {\n          this.batchLoading = true\n          \n          // 处理日期和时间\n          const startDate = this.formatDate(this.batchForm.dateRange[0])\n          const endDate = this.formatDate(this.batchForm.dateRange[1])\n          const startTime = this.formatTime(this.batchForm.startTime)\n          const endTime = this.formatTime(this.batchForm.endTime)\n          \n          const params = {\n            doctorId: this.currentUser.id,\n            startDate,\n            endDate,\n            startTime,\n            endTime,\n            maxAppointments: this.batchForm.maxAppointments\n          }\n          \n          this.$http.post('/schedule/batch', null, { params })\n            .then(response => {\n              if (response.data.code === 200) {\n                this.$message.success('批量排班创建成功')\n                this.resetBatchForm()\n                \n                // 刷新排班列表\n                this.fetchSchedules()\n              } else {\n                this.$message.error(response.data.message || '批量排班创建失败')\n              }\n            })\n            .catch(error => {\n              console.error('批量排班错误:', error)\n              this.$message.error('批量排班创建失败，请稍后重试')\n            })\n            .finally(() => {\n              this.batchLoading = false\n            })\n        }\n      })\n    },\n    \n    // 重置批量排班表单\n    resetBatchForm() {\n      this.$refs.batchForm.resetFields()\n    },\n    \n    // 格式化日期为 YYYY-MM-DD\n    formatDate(date) {\n      if (!date) return ''\n      \n      const d = new Date(date)\n      const year = d.getFullYear()\n      const month = (d.getMonth() + 1).toString().padStart(2, '0')\n      const day = d.getDate().toString().padStart(2, '0')\n      \n      return `${year}-${month}-${day}`\n    },\n    \n    // 格式化时间为 HH:MM\n    formatTime(date) {\n      if (!date) return ''\n      \n      const d = new Date(date)\n      const hours = d.getHours().toString().padStart(2, '0')\n      const minutes = d.getMinutes().toString().padStart(2, '0')\n      \n      return `${hours}:${minutes}`\n    }\n  }\n}\n</script>\n\n<style scoped>\n.schedule-container {\n  height: 100%;\n}\n\n.schedule-card,\n.date-detail-card,\n.batch-card {\n  margin-bottom: 20px;\n}\n\n.schedule-calendar {\n  background-color: #fff;\n}\n\n.calendar-cell {\n  height: 100%;\n  padding: 4px;\n  text-align: center;\n  position: relative;\n  cursor: pointer;\n  border-radius: 4px;\n  transition: background-color 0.3s;\n}\n\n.calendar-cell:hover {\n  background-color: #f5f7fa;\n}\n\n.calendar-day {\n  font-weight: bold;\n}\n\n.has-schedule {\n  background-color: #f0f9eb;\n}\n\n.has-schedule:hover {\n  background-color: #e1f3d8;\n}\n\n.schedule-time {\n  font-size: 12px;\n  color: #67c23a;\n  margin-top: 2px;\n}\n\n.selected {\n  background-color: #e6f7ff;\n  border: 1px solid #1890ff;\n}\n\n.selected.has-schedule {\n  background-color: #d5f3c9;\n}\n\n.empty-detail,\n.empty-schedule {\n  text-align: center;\n  padding: 40px 0;\n  color: #909399;\n}\n\n.empty-detail i,\n.empty-schedule i {\n  font-size: 40px;\n  margin-bottom: 10px;\n}\n\n.schedule-detail {\n  padding: 10px 0;\n}\n\n.schedule-operations {\n  margin-top: 20px;\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n}\n\n.center {\n  text-align: center;\n  line-height: 40px;\n}\n</style>\n"],"mappings":"AAgNA,SAAAA,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;IACA,MAAAC,eAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,KAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA,iBAAAC,YAAA,CAAAC,SAAA;QACAH,QAAA,KAAAC,KAAA;MACA;QACA,MAAAE,SAAA,OAAAC,IAAA,MAAAF,YAAA,CAAAC,SAAA;QACA,MAAAE,OAAA,OAAAD,IAAA,CAAAL,KAAA;QACA,IAAAM,OAAA,IAAAF,SAAA;UACAH,QAAA,KAAAC,KAAA;QACA;UACAD,QAAA;QACA;MACA;IACA;;IAEA;IACA,MAAAM,oBAAA,GAAAA,CAAAR,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,KAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA,iBAAAM,SAAA,CAAAJ,SAAA;QACAH,QAAA,KAAAC,KAAA;MACA;QACA,MAAAE,SAAA,OAAAC,IAAA,MAAAG,SAAA,CAAAJ,SAAA;QACA,MAAAE,OAAA,OAAAD,IAAA,CAAAL,KAAA;QACA,IAAAM,OAAA,IAAAF,SAAA;UACAH,QAAA,KAAAC,KAAA;QACA;UACAD,QAAA;QACA;MACA;IACA;IAEA;MACAQ,SAAA;MACAC,YAAA;MACAC,eAAA;MACAC,aAAA;MACAC,YAAA;MAEA;MACAC,qBAAA;MACAX,YAAA;QACAY,EAAA;QACAC,QAAA;QACAC,YAAA;QACAb,SAAA;QACAE,OAAA;QACAY,eAAA;QACAC,MAAA;QACAC,MAAA;MACA;MACAC,aAAA;QACAjB,SAAA,GACA;UAAAkB,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAlB,OAAA,GACA;UAAAgB,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,SAAA,EAAA3B,eAAA;UAAA0B,OAAA;QAAA,EACA;QACAN,eAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;MAEA;MACAhB,SAAA;QACAkB,SAAA;QACAtB,SAAA;QACAE,OAAA;QACAY,eAAA;MACA;MACAS,UAAA;QACAD,SAAA,GACA;UAAAJ,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACApB,SAAA,GACA;UAAAkB,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAlB,OAAA,GACA;UAAAgB,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,SAAA,EAAAlB,oBAAA;UAAAiB,OAAA;QAAA,EACA;QACAN,eAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;MAEA;MACAI,iBAAA;QACAC,aAAAC,IAAA;UACA;UACA,MAAAC,KAAA,OAAA1B,IAAA;UACA0B,KAAA,CAAAC,QAAA;UACA,OAAAF,IAAA,CAAAG,OAAA,KAAAF,KAAA,CAAAE,OAAA;QACA;MACA;IACA;EACA;EACAC,QAAA;IACA,GAAAvC,UAAA;IAEA;IACAwC,sBAAA;MACA,YAAAzB,YAAA,QAAA0B,UAAA,MAAA1B,YAAA;IACA;EACA;EACA2B,QAAA;IACA,KAAAC,cAAA;EACA;EACAC,OAAA;IACA;IACAD,eAAA;MACA,KAAAE,KAAA,CAAAC,GAAA,0BAAAC,WAAA,CAAA3B,EAAA,IACA4B,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAA/C,IAAA,CAAAgD,IAAA;UACA,KAAApC,SAAA,GAAAmC,QAAA,CAAA/C,IAAA,CAAAA,IAAA;;UAEA;UACA,SAAAa,YAAA;YACA,KAAAoC,qBAAA;UACA;QACA;MACA,GACAC,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;IACA;IAEA;IACAG,iBAAA;MACA,KAAAb,cAAA;IACA;IAEA;IACAc,YAAAC,GAAA;MACA,YAAA5C,SAAA,CAAA6C,IAAA,CAAAC,QAAA;QACA,MAAAtC,YAAA,QAAAmB,UAAA,KAAA/B,IAAA,CAAAkD,QAAA,CAAAtC,YAAA;QACA,OAAAA,YAAA,KAAAoC,GAAA;MACA;IACA;IAEA;IACAG,gBAAAH,GAAA;MACA,MAAAE,QAAA,QAAA9C,SAAA,CAAAgD,IAAA,CAAAF,QAAA;QACA,MAAAtC,YAAA,QAAAmB,UAAA,KAAA/B,IAAA,CAAAkD,QAAA,CAAAtC,YAAA;QACA,OAAAA,YAAA,KAAAoC,GAAA;MACA;MAEA,IAAAE,QAAA;QACA,UAAAA,QAAA,CAAAnD,SAAA,IAAAmD,QAAA,CAAAjD,OAAA;MACA;MAEA;IACA;IAEA;IACAoD,gBAAAL,GAAA;MACA;MACA,MAAAM,IAAA,OAAAtD,IAAA,CAAAgD,GAAA;;MAEA;MACA,SAAA3C,YAAA,SAAA0B,UAAA,MAAA1B,YAAA,MAAA2C,GAAA;QACA,KAAA3C,YAAA;QACA,KAAAC,eAAA;MACA;QACA,KAAAD,YAAA,GAAAiD,IAAA;QACA,KAAAb,qBAAA;MACA;IACA;IAEA;IACAc,eAAAP,GAAA;MACA,YAAA3C,YAAA,SAAA0B,UAAA,MAAA1B,YAAA,MAAA2C,GAAA;IACA;IAEA;IACAP,sBAAA;MACA,UAAApC,YAAA;MAEA,MAAAmD,eAAA,QAAAzB,UAAA,MAAA1B,YAAA;MACA,MAAA6C,QAAA,QAAA9C,SAAA,CAAAgD,IAAA,CAAAF,QAAA;QACA,MAAAtC,YAAA,QAAAmB,UAAA,KAAA/B,IAAA,CAAAkD,QAAA,CAAAtC,YAAA;QACA,OAAAA,YAAA,KAAA4C,eAAA;MACA;MAEA,KAAAlD,eAAA,GAAA4C,QAAA;IACA;IAEA;IACAO,eAAA;MACA,UAAApD,YAAA;QACA,KAAAwC,QAAA,CAAAa,OAAA;QACA;MACA;MAEA,SAAApD,eAAA,SAAAA,eAAA,CAAAqD,cAAA;QACA,KAAAd,QAAA,CAAAa,OAAA;QACA;MACA;;MAEA;MACA,KAAA5D,YAAA,QAAAQ,eAAA;QAAA,QAAAA;MAAA;QACAI,EAAA;QACAC,QAAA,OAAA0B,WAAA,CAAA3B,EAAA;QACAE,YAAA,OAAAP,YAAA;QACAN,SAAA;QACAE,OAAA;QACAY,eAAA;QACAC,MAAA;QACAC,MAAA;MACA;;MAEA;MACA,SAAAT,eAAA;QACA,OAAAsD,SAAA,EAAAC,WAAA,SAAAvD,eAAA,CAAAP,SAAA,CAAA+D,KAAA,MAAAC,GAAA,CAAAC,MAAA;QACA,OAAAC,OAAA,EAAAC,SAAA,SAAA5D,eAAA,CAAAL,OAAA,CAAA6D,KAAA,MAAAC,GAAA,CAAAC,MAAA;QAEA,MAAAjE,SAAA,OAAAC,IAAA;QACAD,SAAA,CAAA4B,QAAA,CAAAiC,SAAA,EAAAC,WAAA;QAEA,MAAA5D,OAAA,OAAAD,IAAA;QACAC,OAAA,CAAA0B,QAAA,CAAAsC,OAAA,EAAAC,SAAA;QAEA,KAAApE,YAAA,CAAAC,SAAA,GAAAA,SAAA;QACA,KAAAD,YAAA,CAAAG,OAAA,GAAAA,OAAA;MACA;MAEA,KAAAQ,qBAAA;;MAEA;MACA,KAAA0D,SAAA;QACA,KAAAC,KAAA,CAAAtE,YAAA,SAAAsE,KAAA,CAAAtE,YAAA,CAAAuE,aAAA;MACA;IACA;IAEA;IACAC,eAAA;MACA,KAAAF,KAAA,CAAAtE,YAAA,CAAAyE,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAAjE,aAAA;;UAEA;UACA,MAAAkE,QAAA;YAAA,QAAA3E;UAAA;;UAEA;UACA2E,QAAA,CAAA7D,YAAA,QAAAmB,UAAA,MAAA1B,YAAA;UACAoE,QAAA,CAAA1E,SAAA,QAAA2E,UAAA,CAAAD,QAAA,CAAA1E,SAAA;UACA0E,QAAA,CAAAxE,OAAA,QAAAyE,UAAA,CAAAD,QAAA,CAAAxE,OAAA;;UAEA;UACA,MAAA0E,MAAA,GAAAF,QAAA,CAAA/D,EAAA;UACA,MAAAkE,GAAA;UAEA,KAAAzC,KAAA,CAAAwC,MAAA,EAAAC,GAAA,EAAAH,QAAA,EACAnC,IAAA,CAAAC,QAAA;YACA,IAAAA,QAAA,CAAA/C,IAAA,CAAAgD,IAAA;cACA,KAAAK,QAAA,CAAAgC,OAAA,CAAAJ,QAAA,CAAA/D,EAAA;cACA,KAAAD,qBAAA;;cAEA;cACA,KAAAwB,cAAA;YACA;cACA,KAAAY,QAAA,CAAAF,KAAA,CAAAJ,QAAA,CAAA/C,IAAA,CAAA0B,OAAA,KAAAuD,QAAA,CAAA/D,EAAA;YACA;UACA,GACAgC,KAAA,CAAAC,KAAA;YACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;YACA,KAAAE,QAAA,CAAAF,KAAA,CAAA8B,QAAA,CAAA/D,EAAA;UACA,GACAoE,OAAA;YACA,KAAAvE,aAAA;UACA;QACA;MACA;IACA;IAEA;IACAwE,qBAAA;MACA,UAAAzE,eAAA;MAEA,MAAA0E,SAAA,QAAA1E,eAAA,CAAAQ,MAAA;MAEA,KAAAqB,KAAA,CAAA8C,GAAA,mBAAA3E,eAAA,CAAAI,EAAA,WAAAsE,SAAA,IACA1C,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAA/C,IAAA,CAAAgD,IAAA;UACA,KAAAK,QAAA,CAAAgC,OAAA,YAAAG,SAAA;;UAEA;UACA,KAAA1E,eAAA,CAAAQ,MAAA,GAAAkE,SAAA;QACA;UACA,KAAAnC,QAAA,CAAAF,KAAA,CAAAJ,QAAA,CAAA/C,IAAA,CAAA0B,OAAA;QACA;MACA,GACAwB,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;IACA;IAEA;IACAuC,oBAAA;MACA,KAAAd,KAAA,CAAAjE,SAAA,CAAAoE,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAAhE,YAAA;;UAEA;UACA,MAAA2E,SAAA,QAAApD,UAAA,MAAA5B,SAAA,CAAAkB,SAAA;UACA,MAAA+D,OAAA,QAAArD,UAAA,MAAA5B,SAAA,CAAAkB,SAAA;UACA,MAAAtB,SAAA,QAAA2E,UAAA,MAAAvE,SAAA,CAAAJ,SAAA;UACA,MAAAE,OAAA,QAAAyE,UAAA,MAAAvE,SAAA,CAAAF,OAAA;UAEA,MAAAoF,MAAA;YACA1E,QAAA,OAAA0B,WAAA,CAAA3B,EAAA;YACAyE,SAAA;YACAC,OAAA;YACArF,SAAA;YACAE,OAAA;YACAY,eAAA,OAAAV,SAAA,CAAAU;UACA;UAEA,KAAAsB,KAAA,CAAAmD,IAAA;YAAAD;UAAA,GACA/C,IAAA,CAAAC,QAAA;YACA,IAAAA,QAAA,CAAA/C,IAAA,CAAAgD,IAAA;cACA,KAAAK,QAAA,CAAAgC,OAAA;cACA,KAAAU,cAAA;;cAEA;cACA,KAAAtD,cAAA;YACA;cACA,KAAAY,QAAA,CAAAF,KAAA,CAAAJ,QAAA,CAAA/C,IAAA,CAAA0B,OAAA;YACA;UACA,GACAwB,KAAA,CAAAC,KAAA;YACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;YACA,KAAAE,QAAA,CAAAF,KAAA;UACA,GACAmC,OAAA;YACA,KAAAtE,YAAA;UACA;QACA;MACA;IACA;IAEA;IACA+E,eAAA;MACA,KAAAnB,KAAA,CAAAjE,SAAA,CAAAqF,WAAA;IACA;IAEA;IACAzD,WAAAuB,IAAA;MACA,KAAAA,IAAA;MAEA,MAAAmC,CAAA,OAAAzF,IAAA,CAAAsD,IAAA;MACA,MAAAoC,IAAA,GAAAD,CAAA,CAAAE,WAAA;MACA,MAAAC,KAAA,IAAAH,CAAA,CAAAI,QAAA,QAAAC,QAAA,GAAAC,QAAA;MACA,MAAA/C,GAAA,GAAAyC,CAAA,CAAAO,OAAA,GAAAF,QAAA,GAAAC,QAAA;MAEA,UAAAL,IAAA,IAAAE,KAAA,IAAA5C,GAAA;IACA;IAEA;IACA0B,WAAApB,IAAA;MACA,KAAAA,IAAA;MAEA,MAAAmC,CAAA,OAAAzF,IAAA,CAAAsD,IAAA;MACA,MAAA2C,KAAA,GAAAR,CAAA,CAAAS,QAAA,GAAAJ,QAAA,GAAAC,QAAA;MACA,MAAAI,OAAA,GAAAV,CAAA,CAAAW,UAAA,GAAAN,QAAA,GAAAC,QAAA;MAEA,UAAAE,KAAA,IAAAE,OAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}