{"ast":null,"code":"import { ref, watch } from 'vue';\nimport { useStore } from 'vuex';\nimport SafeInput from '../components/SafeInput.vue';\nimport { ElMessage } from 'element-plus';\nimport { xssVectors, analyzeXssSeverity } from '../utils/xssUtils';\nexport default {\n  __name: 'XssTest',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const loading = ref(false);\n    const testResult = ref(null);\n\n    // 测试表单\n    const testForm = ref({\n      inputType: 'predefined',\n      selectedVector: '',\n      payload: '',\n      defenseOptions: {\n        inputValidation: true,\n        outputEncoding: true,\n        csp: true\n      }\n    });\n\n    // 监听选择的向量改变\n    watch(() => testForm.value.selectedVector, newVal => {\n      if (newVal) {\n        testForm.value.payload = newVal;\n      }\n    });\n\n    // 处理XSS检测回调\n    const handleXssDetected = payload => {\n      console.log('XSS detected:', payload);\n      // 这里可以添加其他处理逻辑\n    };\n\n    // 运行测试\n    const runTest = async () => {\n      loading.value = true;\n      testResult.value = null;\n      const payload = testForm.value.inputType === 'predefined' ? testForm.value.selectedVector : testForm.value.payload;\n      if (!payload) {\n        ElMessage.warning('请输入或选择XSS载荷');\n        loading.value = false;\n        return;\n      }\n      try {\n        // 实际应用中会调用API，这里模拟一个结果\n        // const response = await store.dispatch('runXssTest', {\n        //   payload,\n        //   defenseOptions: testForm.value.defenseOptions\n        // })\n\n        // 模拟API响应\n        setTimeout(() => {\n          const severity = analyzeXssSeverity(payload);\n\n          // 模拟不同防御选项的效果\n          let sanitizedPayload = payload;\n          let prevented = false;\n          if (testForm.value.defenseOptions.inputValidation || testForm.value.defenseOptions.outputEncoding) {\n            sanitizedPayload = payload.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/`/g, '&#96;');\n            if (testForm.value.defenseOptions.inputValidation) {\n              sanitizedPayload = sanitizedPayload.replace(/javascript:/gi, '').replace(/on\\w+=/gi, '');\n            }\n            prevented = true;\n          }\n          testResult.value = {\n            originalPayload: payload,\n            sanitizedPayload: sanitizedPayload,\n            attackType: getAttackType(payload),\n            severity: severity,\n            prevented: prevented,\n            description: getDescriptionForPayload(payload, severity)\n          };\n\n          // 添加到攻击日志\n          const logEntry = {\n            id: Date.now(),\n            timestamp: new Date().toISOString(),\n            payload: payload,\n            severity: severity,\n            source: 'Test Page',\n            prevented: prevented\n          };\n          store.commit('ADD_ATTACK_LOG', logEntry);\n          loading.value = false;\n        }, 800);\n      } catch (error) {\n        console.error('Failed to run test:', error);\n        loading.value = false;\n      }\n    };\n\n    // 重置表单\n    const resetForm = () => {\n      testForm.value = {\n        inputType: 'predefined',\n        selectedVector: '',\n        payload: '',\n        defenseOptions: {\n          inputValidation: true,\n          outputEncoding: true,\n          csp: true\n        }\n      };\n      testResult.value = null;\n    };\n\n    // 辅助函数：获取危险等级对应的tag类型\n    const getSeverityType = severity => {\n      switch (severity) {\n        case 'high':\n          return 'danger';\n        case 'medium':\n          return 'warning';\n        default:\n          return 'info';\n      }\n    };\n\n    // 辅助函数：确定攻击类型\n    const getAttackType = payload => {\n      if (payload.includes('<script')) {\n        return '脚本注入 (Reflected XSS)';\n      } else if (payload.includes('onerror') || payload.includes('onload')) {\n        return '事件处理注入 (DOM XSS)';\n      } else if (payload.includes('javascript:')) {\n        return 'JavaScript 伪协议 (DOM XSS)';\n      } else {\n        return '通用XSS攻击';\n      }\n    };\n\n    // 辅助函数：根据载荷生成说明\n    const getDescriptionForPayload = (payload, severity) => {\n      if (severity === 'high') {\n        return '此载荷尝试执行高危脚本，可能窃取cookie或执行恶意代码。';\n      } else if (severity === 'medium') {\n        return '此载荷尝试注入HTML或JavaScript代码，可能导致页面内容被篡改。';\n      } else {\n        return '此载荷包含潜在的XSS模式，但危险性较低。';\n      }\n    };\n    const __returned__ = {\n      store,\n      loading,\n      testResult,\n      testForm,\n      handleXssDetected,\n      runTest,\n      resetForm,\n      getSeverityType,\n      getAttackType,\n      getDescriptionForPayload,\n      ref,\n      watch,\n      get useStore() {\n        return useStore;\n      },\n      SafeInput,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get xssVectors() {\n        return xssVectors;\n      },\n      get analyzeXssSeverity() {\n        return analyzeXssSeverity;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","useStore","SafeInput","ElMessage","xssVectors","analyzeXssSeverity","store","loading","testResult","testForm","inputType","selectedVector","payload","defenseOptions","inputValidation","outputEncoding","csp","value","newVal","handleXssDetected","console","log","runTest","warning","setTimeout","severity","sanitizedPayload","prevented","replace","originalPayload","attackType","getAttackType","description","getDescriptionForPayload","logEntry","id","Date","now","timestamp","toISOString","source","commit","error","resetForm","getSeverityType","includes"],"sources":["D:/Desktop/AI接单项目/进行中/20250321-WX-WEB-01/工作文件/xss-defense-system/frontend/src/views/XssTest.vue"],"sourcesContent":["<!-- eslint-disable -->\r\n<template>\r\n  <div class=\"xss-test-container\">\r\n    <h2 class=\"xss-test-title\">XSS攻击测试</h2>\r\n\r\n    <el-card class=\"test-card\">\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <h3>测试XSS攻击载荷</h3>\r\n        </div>\r\n      </template>\r\n\r\n      <el-form :model=\"testForm\" label-width=\"120px\">\r\n        <el-form-item label=\"输入类型\">\r\n          <el-radio-group v-model=\"testForm.inputType\">\r\n            <el-radio label=\"manual\">手动输入</el-radio>\r\n            <el-radio label=\"predefined\">预设载荷</el-radio>\r\n          </el-radio-group>\r\n        </el-form-item>\r\n\r\n        <el-form-item v-if=\"testForm.inputType === 'predefined'\" label=\"选择预设载荷\">\r\n          <el-select v-model=\"testForm.selectedVector\" placeholder=\"选择XSS载荷\" style=\"width: 100%\">\r\n            <el-option\r\n              v-for=\"vector in xssVectors\"\r\n              :key=\"vector.payload\"\r\n              :label=\"vector.name\"\r\n              :value=\"vector.payload\"\r\n            >\r\n              <span>{{ vector.name }}</span>\r\n              <span class=\"vector-type\">{{ vector.type }}</span>\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n\r\n        <el-form-item v-if=\"testForm.inputType === 'manual'\" label=\"XSS载荷\">\r\n          <SafeInput\r\n            v-model=\"testForm.payload\"\r\n            placeholder=\"输入一个XSS载荷...\"\r\n            :sanitize=\"false\"\r\n            @xss-detected=\"handleXssDetected\"\r\n          />\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"防御设置\">\r\n          <el-checkbox v-model=\"testForm.defenseOptions.inputValidation\">输入验证</el-checkbox>\r\n          <el-checkbox v-model=\"testForm.defenseOptions.outputEncoding\">输出编码</el-checkbox>\r\n          <el-checkbox v-model=\"testForm.defenseOptions.csp\">内容安全策略</el-checkbox>\r\n        </el-form-item>\r\n\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"runTest\" :loading=\"loading\">运行测试</el-button>\r\n          <el-button @click=\"resetForm\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n\r\n    <el-card v-if=\"testResult\" class=\"result-card\">\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <h3>测试结果</h3>\r\n        </div>\r\n      </template>\r\n\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"12\">\r\n          <div class=\"result-section\">\r\n            <h4>防御前 (原始输入)</h4>\r\n            <div class=\"danger-content\">\r\n              <pre>{{ testResult.originalPayload }}</pre>\r\n            </div>\r\n            <div class=\"render-container\">\r\n              <h5>渲染结果:</h5>\r\n              <div class=\"render-box\" v-html=\"testResult.originalPayload\"></div>\r\n            </div>\r\n          </div>\r\n        </el-col>\r\n\r\n        <el-col :span=\"12\">\r\n          <div class=\"result-section\">\r\n            <h4>防御后</h4>\r\n            <div class=\"safe-content\">\r\n              <pre>{{ testResult.sanitizedPayload }}</pre>\r\n            </div>\r\n            <div class=\"render-container\">\r\n              <h5>渲染结果:</h5>\r\n              <div class=\"render-box\" v-safe-html=\"testResult.sanitizedPayload\"></div>\r\n            </div>\r\n          </div>\r\n        </el-col>\r\n      </el-row>\r\n\r\n      <el-divider></el-divider>\r\n\r\n      <div class=\"analysis-section\">\r\n        <h4>攻击分析</h4>\r\n        <el-descriptions :column=\"1\" border>\r\n          <el-descriptions-item label=\"攻击类型\">{{ testResult.attackType }}</el-descriptions-item>\r\n          <el-descriptions-item label=\"危险等级\">\r\n            <el-tag :type=\"getSeverityType(testResult.severity)\">{{ testResult.severity }}</el-tag>\r\n          </el-descriptions-item>\r\n          <el-descriptions-item label=\"防御效果\">\r\n            <el-tag :type=\"testResult.prevented ? 'success' : 'danger'\">\r\n              {{ testResult.prevented ? '成功防御' : '防御失败' }}\r\n            </el-tag>\r\n          </el-descriptions-item>\r\n          <el-descriptions-item label=\"分析说明\">{{ testResult.description }}</el-descriptions-item>\r\n        </el-descriptions>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, watch } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport SafeInput from '../components/SafeInput.vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport { xssVectors, analyzeXssSeverity } from '../utils/xssUtils'\r\n\r\nconst store = useStore()\r\nconst loading = ref(false)\r\nconst testResult = ref(null)\r\n\r\n// 测试表单\r\nconst testForm = ref({\r\n  inputType: 'predefined',\r\n  selectedVector: '',\r\n  payload: '',\r\n  defenseOptions: {\r\n    inputValidation: true,\r\n    outputEncoding: true,\r\n    csp: true\r\n  }\r\n})\r\n\r\n// 监听选择的向量改变\r\nwatch(() => testForm.value.selectedVector, (newVal) => {\r\n  if (newVal) {\r\n    testForm.value.payload = newVal\r\n  }\r\n})\r\n\r\n// 处理XSS检测回调\r\nconst handleXssDetected = (payload) => {\r\n  console.log('XSS detected:', payload)\r\n  // 这里可以添加其他处理逻辑\r\n}\r\n\r\n// 运行测试\r\nconst runTest = async () => {\r\n  loading.value = true\r\n  testResult.value = null\r\n\r\n  const payload = testForm.value.inputType === 'predefined'\r\n    ? testForm.value.selectedVector\r\n    : testForm.value.payload\r\n\r\n  if (!payload) {\r\n    ElMessage.warning('请输入或选择XSS载荷')\r\n    loading.value = false\r\n    return\r\n  }\r\n\r\n  try {\r\n    // 实际应用中会调用API，这里模拟一个结果\r\n    // const response = await store.dispatch('runXssTest', {\r\n    //   payload,\r\n    //   defenseOptions: testForm.value.defenseOptions\r\n    // })\r\n\r\n    // 模拟API响应\r\n    setTimeout(() => {\r\n      const severity = analyzeXssSeverity(payload)\r\n\r\n      // 模拟不同防御选项的效果\r\n      let sanitizedPayload = payload\r\n      let prevented = false\r\n\r\n      if (testForm.value.defenseOptions.inputValidation || testForm.value.defenseOptions.outputEncoding) {\r\n        sanitizedPayload = payload\r\n          .replace(/</g, '&lt;')\r\n          .replace(/>/g, '&gt;')\r\n          .replace(/\"/g, '&quot;')\r\n          .replace(/'/g, '&#39;')\r\n          .replace(/`/g, '&#96;')\r\n\r\n        if (testForm.value.defenseOptions.inputValidation) {\r\n          sanitizedPayload = sanitizedPayload\r\n            .replace(/javascript:/gi, '')\r\n            .replace(/on\\w+=/gi, '')\r\n        }\r\n\r\n        prevented = true\r\n      }\r\n\r\n      testResult.value = {\r\n        originalPayload: payload,\r\n        sanitizedPayload: sanitizedPayload,\r\n        attackType: getAttackType(payload),\r\n        severity: severity,\r\n        prevented: prevented,\r\n        description: getDescriptionForPayload(payload, severity)\r\n      }\r\n\r\n      // 添加到攻击日志\r\n      const logEntry = {\r\n        id: Date.now(),\r\n        timestamp: new Date().toISOString(),\r\n        payload: payload,\r\n        severity: severity,\r\n        source: 'Test Page',\r\n        prevented: prevented\r\n      }\r\n\r\n      store.commit('ADD_ATTACK_LOG', logEntry)\r\n      loading.value = false\r\n    }, 800)\r\n  } catch (error) {\r\n    console.error('Failed to run test:', error)\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 重置表单\r\nconst resetForm = () => {\r\n  testForm.value = {\r\n    inputType: 'predefined',\r\n    selectedVector: '',\r\n    payload: '',\r\n    defenseOptions: {\r\n      inputValidation: true,\r\n      outputEncoding: true,\r\n      csp: true\r\n    }\r\n  }\r\n  testResult.value = null\r\n}\r\n\r\n// 辅助函数：获取危险等级对应的tag类型\r\nconst getSeverityType = (severity) => {\r\n  switch(severity) {\r\n    case 'high': return 'danger'\r\n    case 'medium': return 'warning'\r\n    default: return 'info'\r\n  }\r\n}\r\n\r\n// 辅助函数：确定攻击类型\r\nconst getAttackType = (payload) => {\r\n  if (payload.includes('<script')) {\r\n    return '脚本注入 (Reflected XSS)'\r\n  } else if (payload.includes('onerror') || payload.includes('onload')) {\r\n    return '事件处理注入 (DOM XSS)'\r\n  } else if (payload.includes('javascript:')) {\r\n    return 'JavaScript 伪协议 (DOM XSS)'\r\n  } else {\r\n    return '通用XSS攻击'\r\n  }\r\n}\r\n\r\n// 辅助函数：根据载荷生成说明\r\nconst getDescriptionForPayload = (payload, severity) => {\r\n  if (severity === 'high') {\r\n    return '此载荷尝试执行高危脚本，可能窃取cookie或执行恶意代码。'\r\n  } else if (severity === 'medium') {\r\n    return '此载荷尝试注入HTML或JavaScript代码，可能导致页面内容被篡改。'\r\n  } else {\r\n    return '此载荷包含潜在的XSS模式，但危险性较低。'\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.xss-test-container {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.xss-test-title {\r\n  margin-top: 20px;\r\n}\r\n\r\n.test-card, .result-card {\r\n  height: 100%;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.vector-type {\r\n  float: right;\r\n  color: #909399;\r\n  font-size: 0.9em;\r\n}\r\n\r\n.result-section {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.render-container {\r\n  margin-top: 10px;\r\n}\r\n\r\n.render-box {\r\n  border: 1px solid #dcdfe6;\r\n  border-radius: 4px;\r\n  padding: 10px;\r\n  background-color: #fff;\r\n  min-height: 100px;\r\n}\r\n\r\n.danger-content {\r\n  background-color: #fff9f9;\r\n  border: 1px solid #ffebeb;\r\n  border-radius: 4px;\r\n  padding: 10px;\r\n  color: #f56c6c;\r\n}\r\n\r\n.safe-content {\r\n  background-color: #f0f9eb;\r\n  border: 1px solid #e1f3d8;\r\n  border-radius: 4px;\r\n  padding: 10px;\r\n  color: #67c23a;\r\n}\r\n\r\n.analysis-section {\r\n  margin-top: 20px;\r\n}\r\n\r\npre {\r\n  white-space: pre-wrap;\r\n  word-wrap: break-word;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}