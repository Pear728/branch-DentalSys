{"ast":null,"code":"import { renderSlot as _renderSlot, resolveComponent as _resolveComponent, withCtx as _withCtx, createSlots as _createSlots, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"safe-input-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"xss-warning\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_alert = _resolveComponent(\"el-alert\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_input, {\n    modelValue: $setup.safeValue,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.safeValue = $event),\n    type: $props.type,\n    placeholder: $props.placeholder,\n    maxlength: $props.maxlength,\n    clearable: $props.clearable,\n    onInput: $setup.handleInput\n  }, _createSlots({\n    _: 2 /* DYNAMIC */\n  }, [$setup.hasSlot ? {\n    name: \"suffix\",\n    fn: _withCtx(() => [_renderSlot(_ctx.$slots, \"suffix\", {}, undefined, true)]),\n    key: \"0\"\n  } : undefined]), 1032 /* PROPS, DYNAMIC_SLOTS */, [\"modelValue\", \"type\", \"placeholder\", \"maxlength\", \"clearable\"]), $setup.detectedXss ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_el_alert, {\n    title: \"检测到潜在XSS攻击载荷!\",\n    type: \"warning\",\n    closable: false,\n    \"show-icon\": \"\"\n  }, {\n    default: _withCtx(() => _cache[1] || (_cache[1] = [_createElementVNode(\"div\", null, \"输入内容包含可能的恶意代码。\", -1 /* HOISTED */)])),\n    _: 1 /* STABLE */\n  })])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createVNode","_component_el_input","modelValue","$setup","safeValue","_cache","$event","type","$props","placeholder","maxlength","clearable","onInput","handleInput","_createSlots","_","hasSlot","name","fn","_withCtx","_renderSlot","_ctx","$slots","undefined","detectedXss","_hoisted_2","_component_el_alert","title","closable","default","_createElementVNode","_createCommentVNode"],"sources":["D:\\Desktop\\AI接单项目\\已完成\\20250321-WX-WEB-01\\xss-defense-system\\xss-defense-demo\\frontend\\src\\components\\SafeInput.vue"],"sourcesContent":["<template>\r\n  <div class=\"safe-input-container\">\r\n    <el-input\r\n      v-model=\"safeValue\"\r\n      :type=\"type\"\r\n      :placeholder=\"placeholder\"\r\n      :maxlength=\"maxlength\"\r\n      :clearable=\"clearable\"\r\n      @input=\"handleInput\"\r\n    >\r\n      <template v-if=\"hasSlot\" #suffix>\r\n        <slot name=\"suffix\"></slot>\r\n      </template>\r\n    </el-input>\r\n    <div v-if=\"detectedXss\" class=\"xss-warning\">\r\n      <el-alert\r\n        title=\"检测到潜在XSS攻击载荷!\"\r\n        type=\"warning\"\r\n        :closable=\"false\"\r\n        show-icon\r\n      >\r\n        <div>输入内容包含可能的恶意代码。</div>\r\n      </el-alert>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, watch, useSlots } from 'vue'\r\nimport { detectXssPayload } from '../utils/xssUtils'\r\n\r\nconst props = defineProps({\r\n  modelValue: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  type: {\r\n    type: String,\r\n    default: 'text'\r\n  },\r\n  placeholder: {\r\n    type: String,\r\n    default: '请输入'\r\n  },\r\n  maxlength: {\r\n    type: Number,\r\n    default: 500\r\n  },\r\n  clearable: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  sanitize: {\r\n    type: Boolean,\r\n    default: true\r\n  }\r\n})\r\n\r\nconst slots = useSlots()\r\nconst hasSlot = computed(() => !!slots.suffix)\r\n\r\nconst emit = defineEmits(['update:modelValue', 'xss-detected'])\r\nconst safeValue = ref(props.modelValue)\r\nconst detectedXss = ref(false)\r\n\r\n// 监听输入变化\r\nwatch(() => props.modelValue, (newVal) => {\r\n  if (newVal !== safeValue.value) {\r\n    safeValue.value = newVal\r\n  }\r\n})\r\n\r\n// 处理输入\r\nconst handleInput = (val) => {\r\n  // 检测XSS\r\n  const isXss = detectXssPayload(val)\r\n  detectedXss.value = isXss\r\n  \r\n  if (isXss) {\r\n    emit('xss-detected', val)\r\n  }\r\n  \r\n  // 如果启用了净化功能，对输入进行过滤\r\n  let processedValue = val\r\n  if (props.sanitize && isXss) {\r\n    processedValue = sanitizeInput(val)\r\n  }\r\n  \r\n  safeValue.value = processedValue\r\n  emit('update:modelValue', processedValue)\r\n}\r\n\r\n// 简单的输入净化\r\nconst sanitizeInput = (input) => {\r\n  if (!input) return ''\r\n  \r\n  return input\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/\"/g, '&quot;')\r\n    .replace(/'/g, '&#39;')\r\n    .replace(/`/g, '&#96;')\r\n    .replace(/\\(/g, '&#40;')\r\n    .replace(/\\)/g, '&#41;')\r\n    .replace(/javascript:/gi, '')\r\n    .replace(/on\\w+=/gi, '')\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.safe-input-container {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.xss-warning {\r\n  margin-top: 5px;\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAsB;;EADnCC,GAAA;EAc4BD,KAAK,EAAC;;;;;uBAbhCE,mBAAA,CAuBM,OAvBNC,UAuBM,GAtBJC,YAAA,CAWWC,mBAAA;IAbfC,UAAA,EAGeC,MAAA,CAAAC,SAAS;IAHxB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAGeH,MAAA,CAAAC,SAAS,GAAAE,MAAA;IACjBC,IAAI,EAAEC,MAAA,CAAAD,IAAI;IACVE,WAAW,EAAED,MAAA,CAAAC,WAAW;IACxBC,SAAS,EAAEF,MAAA,CAAAE,SAAS;IACpBC,SAAS,EAAEH,MAAA,CAAAG,SAAS;IACpBC,OAAK,EAAET,MAAA,CAAAU;KARdC,YAAA;IAAAC,CAAA;EAAA,IAUsBZ,MAAA,CAAAa,OAAO,G;IAV7BC,IAAA,EAUgC,QAAM;IAVtCC,EAAA,EAAAC,QAAA,CAWQ,MAA2B,CAA3BC,WAAA,CAA2BC,IAAA,CAAAC,MAAA,gBAAAC,SAAA,Q;IAXnC1B,GAAA;MAAA0B,SAAA,C,sGAcepB,MAAA,CAAAqB,WAAW,I,cAAtB1B,mBAAA,CASM,OATN2B,UASM,GARJzB,YAAA,CAOW0B,mBAAA;IANTC,KAAK,EAAC,eAAe;IACrBpB,IAAI,EAAC,SAAS;IACbqB,QAAQ,EAAE,KAAK;IAChB,WAAS,EAAT;;IAnBRC,OAAA,EAAAV,QAAA,CAqBQ,MAAyBd,MAAA,QAAAA,MAAA,OAAzByB,mBAAA,CAAyB,aAApB,gBAAc,oB;IArB3Bf,CAAA;UAAAgB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}