{"ast":null,"code":"import { mapGetters } from 'vuex';\nexport default {\n  name: 'DoctorProfile',\n  data() {\n    // 验证新密码\n    const validateNewPassword = (rule, value, callback) => {\n      if (value === this.passwordForm.oldPassword) {\n        callback(new Error('新密码不能与当前密码相同'));\n      } else {\n        callback();\n      }\n    };\n\n    // 验证确认密码\n    const validateConfirmPassword = (rule, value, callback) => {\n      if (value !== this.passwordForm.newPassword) {\n        callback(new Error('两次输入的密码不一致'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      isEditing: false,\n      defaultAvatar: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png',\n      // 个人资料表单\n      profileForm: {\n        username: '',\n        realName: '',\n        gender: 1,\n        phone: '',\n        email: '',\n        avatar: '',\n        department: '',\n        professionalTitle: '',\n        specialty: '',\n        introduction: '',\n        certificateNo: '',\n        yearsOfExperience: 0\n      },\n      // 账号安全相关\n      showChangePassword: false,\n      showChangePhone: false,\n      showChangeEmail: false,\n      // 修改密码表单\n      passwordForm: {\n        oldPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      },\n      // 密码表单验证规则\n      passwordRules: {\n        oldPassword: [{\n          required: true,\n          message: '请输入当前密码',\n          trigger: 'blur'\n        }],\n        newPassword: [{\n          required: true,\n          message: '请输入新密码',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          message: '密码长度最少为6个字符',\n          trigger: 'blur'\n        }, {\n          validator: validateNewPassword,\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          required: true,\n          message: '请再次输入新密码',\n          trigger: 'blur'\n        }, {\n          validator: validateConfirmPassword,\n          trigger: 'blur'\n        }]\n      },\n      // 修改手机表单\n      phoneForm: {\n        newPhone: '',\n        verifyCode: ''\n      },\n      // 手机表单验证规则\n      phoneRules: {\n        newPhone: [{\n          required: true,\n          message: '请输入新手机号',\n          trigger: 'blur'\n        }, {\n          pattern: /^1[3-9]\\d{9}$/,\n          message: '请输入正确的手机号码',\n          trigger: 'blur'\n        }],\n        verifyCode: [{\n          required: true,\n          message: '请输入验证码',\n          trigger: 'blur'\n        }, {\n          len: 6,\n          message: '验证码长度应为6位',\n          trigger: 'blur'\n        }]\n      },\n      // 修改邮箱表单\n      emailForm: {\n        newEmail: '',\n        verifyCode: ''\n      },\n      // 邮箱表单验证规则\n      emailRules: {\n        newEmail: [{\n          required: true,\n          message: '请输入新邮箱',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: '请输入正确的邮箱地址',\n          trigger: 'blur'\n        }],\n        verifyCode: [{\n          required: true,\n          message: '请输入验证码',\n          trigger: 'blur'\n        }, {\n          len: 6,\n          message: '验证码长度应为6位',\n          trigger: 'blur'\n        }]\n      },\n      // 验证码倒计时\n      cooldown: 0,\n      emailCooldown: 0\n    };\n  },\n  computed: {\n    ...mapGetters(['currentUser'])\n  },\n  created() {\n    this.getProfileData();\n  },\n  methods: {\n    // 获取个人资料数据\n    getProfileData() {\n      console.log('正在获取个人资料...');\n\n      // 设置空白表单，防止旧数据污染\n      this.profileForm = {\n        username: '',\n        realName: '',\n        gender: 0,\n        phone: '',\n        email: '',\n        avatar: '',\n        department: '',\n        professionalTitle: '',\n        specialty: '',\n        introduction: '',\n        certificateNo: '',\n        yearsOfExperience: 0\n      };\n\n      // 直接获取医生详细信息，不依赖Vuex存储的数据\n      this.$http.get(`/doctor/profile/${this.currentUser.id}`).then(response => {\n        if (response.data.code === 200) {\n          console.log('获取到个人资料:', response.data.data);\n          const data = response.data.data;\n\n          // 填充基本信息\n          this.profileForm.username = data.username;\n          this.profileForm.realName = data.realName;\n\n          // 确保性别值为数字\n          let genderValue = data.gender;\n          if (genderValue !== 0 && genderValue !== 1) {\n            genderValue = parseInt(genderValue) || 0;\n          }\n          this.profileForm.gender = genderValue;\n          console.log('从后端获取的性别值：', genderValue, typeof genderValue);\n          this.profileForm.phone = data.phone || '';\n          this.profileForm.email = data.email || '';\n\n          // 填充医生特有的信息\n          this.profileForm.professionalTitle = data.title || '';\n          this.profileForm.specialty = data.specialty || '';\n          this.profileForm.introduction = data.introduction || '';\n\n          // 其他可能的字段\n          if (data.department) this.profileForm.department = data.department;\n          if (data.certificateNo) this.profileForm.certificateNo = data.certificateNo;\n          if (data.yearsOfExperience) this.profileForm.yearsOfExperience = data.yearsOfExperience;\n        }\n      }).catch(error => {\n        console.error('获取个人资料失败', error);\n        this.$message.error('获取个人资料失败，请稍后重试');\n      });\n    },\n    // 编辑个人资料\n    editProfile() {\n      this.isEditing = true;\n    },\n    // 保存个人资料\n    saveProfile() {\n      // 将表单中的个人信息和医生专有信息分开\n      const basicInfo = {\n        id: this.currentUser.id,\n        realName: this.profileForm.realName,\n        // 确保性别值为数字类型\n        gender: parseInt(this.profileForm.gender),\n        phone: this.profileForm.phone,\n        email: this.profileForm.email\n      };\n      console.log('提交的性别值:', basicInfo.gender, typeof basicInfo.gender);\n\n      // 对齐后端字段名：professionalTitle -> title\n      // 在医生信息中同时添加id和userId，确保后端能够找到正确的用户\n      const doctorInfo = {\n        id: this.currentUser.id,\n        // 添加id字段\n        userId: this.currentUser.id,\n        department: this.profileForm.department,\n        title: this.profileForm.professionalTitle,\n        // 前端是professionalTitle，后端是title\n        specialty: this.profileForm.specialty,\n        introduction: this.profileForm.introduction,\n        certificateNo: this.profileForm.certificateNo,\n        yearsOfExperience: this.profileForm.yearsOfExperience\n      };\n      console.log('更新用户资料，用户ID:', this.currentUser.id);\n\n      // 更新基本信息\n      this.$http.put('/user', basicInfo).then(response => {\n        if (response.data.code === 200) {\n          // 成功更新用户基本信息，继续更新医生信息\n          return this.$http.put('/doctor/profile', doctorInfo);\n        } else {\n          this.$message.error(response.data.message || '更新个人资料失败');\n          return Promise.reject(new Error('更新个人资料失败'));\n        }\n      }).then(response => {\n        if (response.data.code === 200) {\n          this.$message.success('更新个人资料成功');\n          this.isEditing = false;\n\n          // 更新Vuex中的用户信息\n          this.$store.commit('updateUser', basicInfo);\n\n          // 重新获取最新的个人资料数据\n          console.log('重新获取用户资料数据...');\n          setTimeout(() => {\n            this.getProfileData();\n          }, 500); // 延迟500毫秒再获取，确保后端数据已更新\n        } else {\n          this.$message.error(response.data.message || '更新医生资料失败');\n        }\n      }).catch(error => {\n        console.error('更新个人资料失败', error);\n        this.$message.error('更新个人资料失败，请稍后重试');\n      });\n    },\n    // 取消编辑\n    cancelEdit() {\n      this.isEditing = false;\n      this.getProfileData(); // 重新获取数据，恢复原始值\n    },\n    // 修改密码\n    changePassword() {\n      this.$refs.passwordForm.validate(valid => {\n        if (valid) {\n          // 使用正确的医生密码修改接口\n          this.$http.put('/doctor/change-password', null, {\n            params: {\n              userId: this.currentUser.id,\n              oldPassword: this.passwordForm.oldPassword,\n              newPassword: this.passwordForm.newPassword\n            }\n          }).then(response => {\n            if (response.data.code === 200) {\n              this.$message.success('密码修改成功，请重新登录');\n              this.showChangePassword = false;\n\n              // 清空表单\n              this.$refs.passwordForm.resetFields();\n\n              // 退出登录\n              setTimeout(() => {\n                this.$store.dispatch('logout');\n                this.$router.push('/login');\n              }, 1500);\n            } else {\n              this.$message.error(response.data.message || '密码修改失败');\n            }\n          }).catch(error => {\n            console.error('密码修改失败', error);\n            this.$message.error('密码修改失败，请稍后重试');\n          });\n        }\n      });\n    },\n    // 发送手机验证码\n    sendVerifyCode() {\n      if (!this.phoneForm.newPhone) {\n        this.$message.warning('请先输入新手机号');\n        return;\n      }\n      if (!/^1[3-9]\\d{9}$/.test(this.phoneForm.newPhone)) {\n        this.$message.warning('请输入正确的手机号码');\n        return;\n      }\n\n      // 调用后端验证码发送接口\n      this.$http.post('/verification/send-sms', {\n        phone: this.phoneForm.newPhone,\n        type: 'changePhone'\n      }).then(response => {\n        if (response.data.code === 200) {\n          // 开发模式下，后端会返回验证码，直接使用\n          const verifyCode = response.data.data;\n          this.phoneForm.verifyCode = verifyCode;\n          this.$message.success(`验证码已发送并自动填入: ${verifyCode}`);\n\n          // 启动倒计时\n          this.cooldown = 60;\n          const timer = setInterval(() => {\n            this.cooldown--;\n            if (this.cooldown <= 0) {\n              clearInterval(timer);\n            }\n          }, 1000);\n        } else {\n          this.$message.error(response.data.message || '验证码发送失败');\n        }\n      }).catch(error => {\n        console.error('验证码发送失败', error);\n        this.$message.error('验证码发送失败，请稍后重试');\n      });\n    },\n    // 修改手机号\n    changePhone() {\n      this.$refs.phoneForm.validate(valid => {\n        if (valid) {\n          // 检查是否有验证码\n          if (!this.phoneForm.verifyCode) {\n            this.$message.warning('请先获取验证码');\n            return;\n          }\n\n          // 使用新的验证码验证接口\n          this.$http.put('/verification/verify-phone', {\n            userId: this.currentUser.id,\n            phone: this.phoneForm.newPhone,\n            code: this.phoneForm.verifyCode\n          }).then(response => {\n            if (response.data.code === 200) {\n              this.$message.success('手机号修改成功');\n              this.showChangePhone = false;\n\n              // 更新表单和存储的用户信息\n              this.profileForm.phone = this.phoneForm.newPhone;\n              this.$store.commit('updateUser', {\n                phone: this.phoneForm.newPhone\n              });\n\n              // 清空表单\n              this.$refs.phoneForm.resetFields();\n\n              // 重新获取个人资料\n              this.getProfileData();\n            } else {\n              this.$message.error(response.data.message || '手机号修改失败');\n            }\n          }).catch(error => {\n            console.error('手机号修改失败', error);\n            this.$message.error('手机号修改失败，请稍后重试');\n          });\n        }\n      });\n    },\n    // 发送邮箱验证码\n    sendEmailVerifyCode() {\n      if (!this.emailForm.newEmail) {\n        this.$message.warning('请先输入新邮箱');\n        return;\n      }\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(this.emailForm.newEmail)) {\n        this.$message.warning('请输入正确的邮箱地址');\n        return;\n      }\n\n      // 自动生成模拟验证码（6位数字和字母组合）\n      const characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      let mockVerifyCode = '';\n      for (let i = 0; i < 6; i++) {\n        mockVerifyCode += characters.charAt(Math.floor(Math.random() * characters.length));\n      }\n\n      // 将验证码自动填入表单\n      this.emailForm.verifyCode = mockVerifyCode;\n\n      // 显示成功提示\n      this.$message.success(`模拟邮箱验证码已生成并填入: ${mockVerifyCode}`);\n\n      // 启动倒计时\n      this.emailCooldown = 60;\n      const timer = setInterval(() => {\n        this.emailCooldown--;\n        if (this.emailCooldown <= 0) {\n          clearInterval(timer);\n        }\n      }, 1000);\n    },\n    // 修改邮箱\n    changeEmail() {\n      this.$refs.emailForm.validate(valid => {\n        if (valid) {\n          this.$http.put('/user/email', {\n            userId: this.currentUser.id,\n            newEmail: this.emailForm.newEmail,\n            verifyCode: this.emailForm.verifyCode\n          }).then(response => {\n            if (response.data.code === 200) {\n              this.$message.success('邮箱修改成功');\n              this.showChangeEmail = false;\n\n              // 更新表单和存储的用户信息\n              this.profileForm.email = this.emailForm.newEmail;\n              this.$store.commit('updateUser', {\n                email: this.emailForm.newEmail\n              });\n\n              // 清空表单\n              this.$refs.emailForm.resetFields();\n            } else {\n              this.$message.error(response.data.message || '邮箱修改失败');\n            }\n          }).catch(error => {\n            console.error('邮箱修改失败', error);\n            this.$message.error('邮箱修改失败，请稍后重试');\n          });\n        }\n      });\n    },\n    // 手机号脱敏显示\n    maskedPhone(phone) {\n      if (!phone) return '未绑定';\n      return phone.substr(0, 3) + '****' + phone.substr(7);\n    },\n    // 邮箱脱敏显示\n    maskedEmail(email) {\n      if (!email) return '未绑定';\n      const parts = email.split('@');\n      if (parts.length !== 2) return email;\n      let username = parts[0];\n      const domain = parts[1];\n      if (username.length <= 3) {\n        username = username.charAt(0) + '***';\n      } else {\n        username = username.substr(0, 3) + '***';\n      }\n      return username + '@' + domain;\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","name","data","validateNewPassword","rule","value","callback","passwordForm","oldPassword","Error","validateConfirmPassword","newPassword","isEditing","defaultAvatar","profileForm","username","realName","gender","phone","email","avatar","department","professionalTitle","specialty","introduction","certificateNo","yearsOfExperience","showChangePassword","showChangePhone","showChangeEmail","confirmPassword","passwordRules","required","message","trigger","min","validator","phoneForm","newPhone","verifyCode","phoneRules","pattern","len","emailForm","newEmail","emailRules","type","cooldown","emailCooldown","computed","created","getProfileData","methods","console","log","$http","get","currentUser","id","then","response","code","genderValue","parseInt","title","catch","error","$message","editProfile","saveProfile","basicInfo","doctorInfo","userId","put","Promise","reject","success","$store","commit","setTimeout","cancelEdit","changePassword","$refs","validate","valid","params","resetFields","dispatch","$router","push","sendVerifyCode","warning","test","post","timer","setInterval","clearInterval","changePhone","sendEmailVerifyCode","emailRegex","characters","mockVerifyCode","i","charAt","Math","floor","random","length","changeEmail","maskedPhone","substr","maskedEmail","parts","split","domain"],"sources":["src/views/doctor/Profile.vue"],"sourcesContent":["<template>\n  <div class=\"doctor-profile\">\n    <el-card class=\"profile-card\">\n      <div slot=\"header\">\n        <span>个人资料</span>\n        <el-button style=\"float: right; padding: 3px 0\" type=\"text\" @click=\"editProfile\">\n          <i class=\"el-icon-edit\"></i> 编辑资料\n        </el-button>\n      </div>\n      \n      <el-form :model=\"profileForm\" label-width=\"100px\" class=\"profile-form\">\n        <el-row :gutter=\"20\">\n          <el-col :span=\"8\">\n            <div class=\"avatar-container\">\n              <el-avatar :size=\"120\" :src=\"profileForm.avatar || defaultAvatar\"></el-avatar>\n              <div class=\"upload-avatar\" v-if=\"isEditing\">\n                <el-button type=\"primary\" size=\"small\" icon=\"el-icon-upload\">更换头像</el-button>\n              </div>\n            </div>\n          </el-col>\n          <el-col :span=\"16\">\n            <el-form-item label=\"用户名\">\n              <el-input v-model=\"profileForm.username\" :disabled=\"true\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"真实姓名\">\n              <el-input v-model=\"profileForm.realName\" :disabled=\"!isEditing\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"性别\">\n              <el-radio-group v-model=\"profileForm.gender\" :disabled=\"!isEditing\">\n                <el-radio :label=\"1\">男</el-radio>\n                <el-radio :label=\"0\">女</el-radio>\n              </el-radio-group>\n              <!-- 显示当前性别值，方便调试 -->\n              <span style=\"color: #999; font-size: 12px; margin-left: 10px;\">\n                (当前值: {{profileForm.gender === 0 ? '女(0)' : profileForm.gender === 1 ? '男(1)' : '未知(' + profileForm.gender + ')'}})\n              </span>\n            </el-form-item>\n            <el-form-item label=\"手机号码\">\n              <el-input v-model=\"profileForm.phone\" :disabled=\"!isEditing\"></el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n        \n        <el-divider></el-divider>\n        \n        <el-row :gutter=\"20\">\n          <el-col :span=\"12\">\n            <el-form-item label=\"科室\">\n              <el-input v-model=\"profileForm.department\" :disabled=\"!isEditing\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"职称\">\n              <el-select v-model=\"profileForm.professionalTitle\" placeholder=\"请选择职称\" style=\"width: 100%\" :disabled=\"!isEditing\">\n                <el-option label=\"主任医师\" value=\"主任医师\"></el-option>\n                <el-option label=\"副主任医师\" value=\"副主任医师\"></el-option>\n                <el-option label=\"主治医师\" value=\"主治医师\"></el-option>\n                <el-option label=\"住院医师\" value=\"住院医师\"></el-option>\n              </el-select>\n            </el-form-item>\n            <el-form-item label=\"执业证号\">\n              <el-input v-model=\"profileForm.certificateNo\" :disabled=\"!isEditing\"></el-input>\n            </el-form-item>\n          </el-col>\n          <el-col :span=\"12\">\n            <el-form-item label=\"从业年限\">\n              <el-input-number v-model=\"profileForm.yearsOfExperience\" :min=\"0\" :max=\"50\" :disabled=\"!isEditing\" style=\"width: 100%\"></el-input-number>\n            </el-form-item>\n            <el-form-item label=\"邮箱\">\n              <el-input v-model=\"profileForm.email\" :disabled=\"!isEditing\"></el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n        \n        <el-row :gutter=\"20\">\n          <el-col :span=\"24\">\n            <el-form-item label=\"专长\">\n              <el-input\n                type=\"textarea\"\n                :rows=\"3\"\n                placeholder=\"请填写您的专业特长\"\n                v-model=\"profileForm.specialty\"\n                :disabled=\"!isEditing\">\n              </el-input>\n            </el-form-item>\n            <el-form-item label=\"个人简介\">\n              <el-input\n                type=\"textarea\"\n                :rows=\"4\"\n                placeholder=\"请填写您的个人简介\"\n                v-model=\"profileForm.introduction\"\n                :disabled=\"!isEditing\">\n              </el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n        \n        <el-form-item v-if=\"isEditing\">\n          <el-button type=\"primary\" @click=\"saveProfile\">保存</el-button>\n          <el-button @click=\"cancelEdit\">取消</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n    \n    <el-card class=\"security-card\">\n      <div slot=\"header\">\n        <span>账号安全</span>\n      </div>\n      \n      <div class=\"security-item\">\n        <div class=\"security-info\">\n          <i class=\"el-icon-lock\"></i>\n          <div class=\"security-text\">\n            <h4>修改密码</h4>\n            <p>定期修改密码可以保护您的账号安全</p>\n          </div>\n        </div>\n        <el-button size=\"small\" @click=\"showChangePassword = true\">修改</el-button>\n      </div>\n      \n      <div class=\"security-item\">\n        <div class=\"security-info\">\n          <i class=\"el-icon-mobile-phone\"></i>\n          <div class=\"security-text\">\n            <h4>绑定手机</h4>\n            <p>已绑定手机：{{ maskedPhone(profileForm.phone) }}</p>\n          </div>\n        </div>\n        <el-button size=\"small\" @click=\"showChangePhone = true\">修改</el-button>\n      </div>\n      \n      <div class=\"security-item\">\n        <div class=\"security-info\">\n          <i class=\"el-icon-message\"></i>\n          <div class=\"security-text\">\n            <h4>绑定邮箱</h4>\n            <p>已绑定邮箱：{{ maskedEmail(profileForm.email) }}</p>\n          </div>\n        </div>\n        <el-button size=\"small\" @click=\"showChangeEmail = true\">修改</el-button>\n      </div>\n    </el-card>\n    \n    <!-- 修改密码对话框 -->\n    <el-dialog title=\"修改密码\" :visible.sync=\"showChangePassword\" width=\"400px\">\n      <el-form :model=\"passwordForm\" :rules=\"passwordRules\" ref=\"passwordForm\" label-width=\"100px\">\n        <el-form-item label=\"当前密码\" prop=\"oldPassword\">\n          <el-input v-model=\"passwordForm.oldPassword\" type=\"password\" show-password></el-input>\n        </el-form-item>\n        <el-form-item label=\"新密码\" prop=\"newPassword\">\n          <el-input v-model=\"passwordForm.newPassword\" type=\"password\" show-password></el-input>\n        </el-form-item>\n        <el-form-item label=\"确认新密码\" prop=\"confirmPassword\">\n          <el-input v-model=\"passwordForm.confirmPassword\" type=\"password\" show-password></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"showChangePassword = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"changePassword\">确认修改</el-button>\n      </div>\n    </el-dialog>\n    \n    <!-- 修改手机对话框 -->\n    <el-dialog title=\"修改手机号\" :visible.sync=\"showChangePhone\" width=\"400px\">\n      <el-form :model=\"phoneForm\" :rules=\"phoneRules\" ref=\"phoneForm\" label-width=\"100px\">\n        <el-form-item label=\"当前手机号\">\n          <el-input v-model=\"profileForm.phone\" disabled></el-input>\n        </el-form-item>\n        <el-form-item label=\"新手机号\" prop=\"newPhone\">\n          <el-input v-model=\"phoneForm.newPhone\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"验证码\" prop=\"verifyCode\">\n          <div class=\"verify-code-container\">\n            <el-input v-model=\"phoneForm.verifyCode\" class=\"verify-code-input\"></el-input>\n            <el-button type=\"primary\" :disabled=\"cooldown > 0\" @click=\"sendVerifyCode\">\n              {{ cooldown > 0 ? `${cooldown}秒后重新获取` : '获取验证码' }}\n            </el-button>\n          </div>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"showChangePhone = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"changePhone\">确认修改</el-button>\n      </div>\n    </el-dialog>\n    \n    <!-- 修改邮箱对话框 -->\n    <el-dialog title=\"修改邮箱\" :visible.sync=\"showChangeEmail\" width=\"400px\">\n      <el-form :model=\"emailForm\" :rules=\"emailRules\" ref=\"emailForm\" label-width=\"100px\">\n        <el-form-item label=\"当前邮箱\">\n          <el-input v-model=\"profileForm.email\" disabled></el-input>\n        </el-form-item>\n        <el-form-item label=\"新邮箱\" prop=\"newEmail\">\n          <el-input v-model=\"emailForm.newEmail\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"验证码\" prop=\"verifyCode\">\n          <div class=\"verify-code-container\">\n            <el-input v-model=\"emailForm.verifyCode\" class=\"verify-code-input\"></el-input>\n            <el-button type=\"primary\" :disabled=\"emailCooldown > 0\" @click=\"sendEmailVerifyCode\">\n              {{ emailCooldown > 0 ? `${emailCooldown}秒后重新获取` : '获取验证码' }}\n            </el-button>\n          </div>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"showChangeEmail = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"changeEmail\">确认修改</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'DoctorProfile',\n  data() {\n    // 验证新密码\n    const validateNewPassword = (rule, value, callback) => {\n      if (value === this.passwordForm.oldPassword) {\n        callback(new Error('新密码不能与当前密码相同'))\n      } else {\n        callback()\n      }\n    }\n    \n    // 验证确认密码\n    const validateConfirmPassword = (rule, value, callback) => {\n      if (value !== this.passwordForm.newPassword) {\n        callback(new Error('两次输入的密码不一致'))\n      } else {\n        callback()\n      }\n    }\n    \n    return {\n      isEditing: false,\n      defaultAvatar: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png',\n      \n      // 个人资料表单\n      profileForm: {\n        username: '',\n        realName: '',\n        gender: 1,\n        phone: '',\n        email: '',\n        avatar: '',\n        department: '',\n        professionalTitle: '',\n        specialty: '',\n        introduction: '',\n        certificateNo: '',\n        yearsOfExperience: 0\n      },\n      \n      // 账号安全相关\n      showChangePassword: false,\n      showChangePhone: false,\n      showChangeEmail: false,\n      \n      // 修改密码表单\n      passwordForm: {\n        oldPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      },\n      \n      // 密码表单验证规则\n      passwordRules: {\n        oldPassword: [\n          { required: true, message: '请输入当前密码', trigger: 'blur' }\n        ],\n        newPassword: [\n          { required: true, message: '请输入新密码', trigger: 'blur' },\n          { min: 6, message: '密码长度最少为6个字符', trigger: 'blur' },\n          { validator: validateNewPassword, trigger: 'blur' }\n        ],\n        confirmPassword: [\n          { required: true, message: '请再次输入新密码', trigger: 'blur' },\n          { validator: validateConfirmPassword, trigger: 'blur' }\n        ]\n      },\n      \n      // 修改手机表单\n      phoneForm: {\n        newPhone: '',\n        verifyCode: ''\n      },\n      \n      // 手机表单验证规则\n      phoneRules: {\n        newPhone: [\n          { required: true, message: '请输入新手机号', trigger: 'blur' },\n          { pattern: /^1[3-9]\\d{9}$/, message: '请输入正确的手机号码', trigger: 'blur' }\n        ],\n        verifyCode: [\n          { required: true, message: '请输入验证码', trigger: 'blur' },\n          { len: 6, message: '验证码长度应为6位', trigger: 'blur' }\n        ]\n      },\n      \n      // 修改邮箱表单\n      emailForm: {\n        newEmail: '',\n        verifyCode: ''\n      },\n      \n      // 邮箱表单验证规则\n      emailRules: {\n        newEmail: [\n          { required: true, message: '请输入新邮箱', trigger: 'blur' },\n          { type: 'email', message: '请输入正确的邮箱地址', trigger: 'blur' }\n        ],\n        verifyCode: [\n          { required: true, message: '请输入验证码', trigger: 'blur' },\n          { len: 6, message: '验证码长度应为6位', trigger: 'blur' }\n        ]\n      },\n      \n      // 验证码倒计时\n      cooldown: 0,\n      emailCooldown: 0\n    }\n  },\n  computed: {\n    ...mapGetters(['currentUser'])\n  },\n  created() {\n    this.getProfileData()\n  },\n  methods: {\n    // 获取个人资料数据\n    getProfileData() {\n      console.log('正在获取个人资料...')\n      \n      // 设置空白表单，防止旧数据污染\n      this.profileForm = {\n        username: '',\n        realName: '',\n        gender: 0,\n        phone: '',\n        email: '',\n        avatar: '',\n        department: '',\n        professionalTitle: '',\n        specialty: '',\n        introduction: '',\n        certificateNo: '',\n        yearsOfExperience: 0\n      }\n      \n      // 直接获取医生详细信息，不依赖Vuex存储的数据\n      this.$http.get(`/doctor/profile/${this.currentUser.id}`)\n        .then(response => {\n          if (response.data.code === 200) {\n            console.log('获取到个人资料:', response.data.data)\n            const data = response.data.data\n            \n            // 填充基本信息\n            this.profileForm.username = data.username\n            this.profileForm.realName = data.realName\n            \n            // 确保性别值为数字\n            let genderValue = data.gender\n            if (genderValue !== 0 && genderValue !== 1) {\n              genderValue = parseInt(genderValue) || 0\n            }\n            this.profileForm.gender = genderValue\n            console.log('从后端获取的性别值：', genderValue, typeof genderValue)\n            \n            this.profileForm.phone = data.phone || ''\n            this.profileForm.email = data.email || ''\n            \n            // 填充医生特有的信息\n            this.profileForm.professionalTitle = data.title || ''\n            this.profileForm.specialty = data.specialty || ''\n            this.profileForm.introduction = data.introduction || ''\n            \n            // 其他可能的字段\n            if (data.department) this.profileForm.department = data.department\n            if (data.certificateNo) this.profileForm.certificateNo = data.certificateNo\n            if (data.yearsOfExperience) this.profileForm.yearsOfExperience = data.yearsOfExperience\n          }\n        })\n        .catch(error => {\n          console.error('获取个人资料失败', error)\n          this.$message.error('获取个人资料失败，请稍后重试')\n        })\n    },\n    \n    // 编辑个人资料\n    editProfile() {\n      this.isEditing = true\n    },\n    \n    // 保存个人资料\n    saveProfile() {\n      // 将表单中的个人信息和医生专有信息分开\n      const basicInfo = {\n        id: this.currentUser.id,\n        realName: this.profileForm.realName,\n        // 确保性别值为数字类型\n        gender: parseInt(this.profileForm.gender), \n        phone: this.profileForm.phone,\n        email: this.profileForm.email\n      }\n      \n      console.log('提交的性别值:', basicInfo.gender, typeof basicInfo.gender)\n      \n      // 对齐后端字段名：professionalTitle -> title\n      // 在医生信息中同时添加id和userId，确保后端能够找到正确的用户\n      const doctorInfo = {\n        id: this.currentUser.id, // 添加id字段\n        userId: this.currentUser.id,\n        department: this.profileForm.department,\n        title: this.profileForm.professionalTitle, // 前端是professionalTitle，后端是title\n        specialty: this.profileForm.specialty,\n        introduction: this.profileForm.introduction,\n        certificateNo: this.profileForm.certificateNo,\n        yearsOfExperience: this.profileForm.yearsOfExperience\n      }\n      \n      console.log('更新用户资料，用户ID:', this.currentUser.id)\n      \n      // 更新基本信息\n      this.$http.put('/user', basicInfo)\n        .then(response => {\n          if (response.data.code === 200) {\n            // 成功更新用户基本信息，继续更新医生信息\n            return this.$http.put('/doctor/profile', doctorInfo)\n          } else {\n            this.$message.error(response.data.message || '更新个人资料失败')\n            return Promise.reject(new Error('更新个人资料失败'))\n          }\n        })\n        .then(response => {\n          if (response.data.code === 200) {\n            this.$message.success('更新个人资料成功')\n            this.isEditing = false\n            \n            // 更新Vuex中的用户信息\n            this.$store.commit('updateUser', basicInfo)\n            \n            // 重新获取最新的个人资料数据\n            console.log('重新获取用户资料数据...')\n            setTimeout(() => {\n              this.getProfileData()\n            }, 500) // 延迟500毫秒再获取，确保后端数据已更新\n          } else {\n            this.$message.error(response.data.message || '更新医生资料失败')\n          }\n        })\n        .catch(error => {\n          console.error('更新个人资料失败', error)\n          this.$message.error('更新个人资料失败，请稍后重试')\n        })\n    },\n    \n    // 取消编辑\n    cancelEdit() {\n      this.isEditing = false\n      this.getProfileData() // 重新获取数据，恢复原始值\n    },\n    \n    // 修改密码\n    changePassword() {\n      this.$refs.passwordForm.validate(valid => {\n        if (valid) {\n          // 使用正确的医生密码修改接口\n          this.$http.put('/doctor/change-password', null, {\n            params: {\n              userId: this.currentUser.id,\n              oldPassword: this.passwordForm.oldPassword,\n              newPassword: this.passwordForm.newPassword\n            }\n          })\n            .then(response => {\n              if (response.data.code === 200) {\n                this.$message.success('密码修改成功，请重新登录')\n                this.showChangePassword = false\n                \n                // 清空表单\n                this.$refs.passwordForm.resetFields()\n                \n                // 退出登录\n                setTimeout(() => {\n                  this.$store.dispatch('logout')\n                  this.$router.push('/login')\n                }, 1500)\n              } else {\n                this.$message.error(response.data.message || '密码修改失败')\n              }\n            })\n            .catch(error => {\n              console.error('密码修改失败', error)\n              this.$message.error('密码修改失败，请稍后重试')\n            })\n        }\n      })\n    },\n    // 发送手机验证码\n    sendVerifyCode() {\n      if (!this.phoneForm.newPhone) {\n        this.$message.warning('请先输入新手机号')\n        return\n      }\n      \n      if (!/^1[3-9]\\d{9}$/.test(this.phoneForm.newPhone)) {\n        this.$message.warning('请输入正确的手机号码')\n        return\n      }\n      \n      // 调用后端验证码发送接口\n      this.$http.post('/verification/send-sms', {\n        phone: this.phoneForm.newPhone,\n        type: 'changePhone'\n      })\n        .then(response => {\n          if (response.data.code === 200) {\n            // 开发模式下，后端会返回验证码，直接使用\n            const verifyCode = response.data.data\n            this.phoneForm.verifyCode = verifyCode\n            this.$message.success(`验证码已发送并自动填入: ${verifyCode}`)\n            \n            // 启动倒计时\n            this.cooldown = 60\n            const timer = setInterval(() => {\n              this.cooldown--\n              if (this.cooldown <= 0) {\n                clearInterval(timer)\n              }\n            }, 1000)\n          } else {\n            this.$message.error(response.data.message || '验证码发送失败')\n          }\n        })\n        .catch(error => {\n          console.error('验证码发送失败', error)\n          this.$message.error('验证码发送失败，请稍后重试')\n        })\n    },\n    \n    // 修改手机号\n    changePhone() {\n      this.$refs.phoneForm.validate(valid => {\n        if (valid) {\n          // 检查是否有验证码\n          if (!this.phoneForm.verifyCode) {\n            this.$message.warning('请先获取验证码')\n            return\n          }\n          \n          // 使用新的验证码验证接口\n          this.$http.put('/verification/verify-phone', {\n            userId: this.currentUser.id,\n            phone: this.phoneForm.newPhone,\n            code: this.phoneForm.verifyCode\n          })\n            .then(response => {\n              if (response.data.code === 200) {\n                this.$message.success('手机号修改成功')\n                this.showChangePhone = false\n                \n                // 更新表单和存储的用户信息\n                this.profileForm.phone = this.phoneForm.newPhone\n                this.$store.commit('updateUser', { phone: this.phoneForm.newPhone })\n                \n                // 清空表单\n                this.$refs.phoneForm.resetFields()\n                \n                // 重新获取个人资料\n                this.getProfileData()\n              } else {\n                this.$message.error(response.data.message || '手机号修改失败')\n              }\n            })\n            .catch(error => {\n              console.error('手机号修改失败', error)\n              this.$message.error('手机号修改失败，请稍后重试')\n            })\n        }\n      })\n    },\n    \n    // 发送邮箱验证码\n    sendEmailVerifyCode() {\n      if (!this.emailForm.newEmail) {\n        this.$message.warning('请先输入新邮箱')\n        return\n      }\n      \n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n      if (!emailRegex.test(this.emailForm.newEmail)) {\n        this.$message.warning('请输入正确的邮箱地址')\n        return\n      }\n      \n      // 自动生成模拟验证码（6位数字和字母组合）\n      const characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n      let mockVerifyCode = ''\n      for (let i = 0; i < 6; i++) {\n        mockVerifyCode += characters.charAt(Math.floor(Math.random() * characters.length))\n      }\n      \n      // 将验证码自动填入表单\n      this.emailForm.verifyCode = mockVerifyCode\n      \n      // 显示成功提示\n      this.$message.success(`模拟邮箱验证码已生成并填入: ${mockVerifyCode}`)\n      \n      // 启动倒计时\n      this.emailCooldown = 60\n      const timer = setInterval(() => {\n        this.emailCooldown--\n        if (this.emailCooldown <= 0) {\n          clearInterval(timer)\n        }\n      }, 1000)\n    },\n    \n    // 修改邮箱\n    changeEmail() {\n      this.$refs.emailForm.validate(valid => {\n        if (valid) {\n          this.$http.put('/user/email', {\n            userId: this.currentUser.id,\n            newEmail: this.emailForm.newEmail,\n            verifyCode: this.emailForm.verifyCode\n          })\n            .then(response => {\n              if (response.data.code === 200) {\n                this.$message.success('邮箱修改成功')\n                this.showChangeEmail = false\n                \n                // 更新表单和存储的用户信息\n                this.profileForm.email = this.emailForm.newEmail\n                this.$store.commit('updateUser', { email: this.emailForm.newEmail })\n                \n                // 清空表单\n                this.$refs.emailForm.resetFields()\n              } else {\n                this.$message.error(response.data.message || '邮箱修改失败')\n              }\n            })\n            .catch(error => {\n              console.error('邮箱修改失败', error)\n              this.$message.error('邮箱修改失败，请稍后重试')\n            })\n        }\n      })\n    },\n    \n    // 手机号脱敏显示\n    maskedPhone(phone) {\n      if (!phone) return '未绑定'\n      return phone.substr(0, 3) + '****' + phone.substr(7)\n    },\n    \n    // 邮箱脱敏显示\n    maskedEmail(email) {\n      if (!email) return '未绑定'\n      \n      const parts = email.split('@')\n      if (parts.length !== 2) return email\n      \n      let username = parts[0]\n      const domain = parts[1]\n      \n      if (username.length <= 3) {\n        username = username.charAt(0) + '***'\n      } else {\n        username = username.substr(0, 3) + '***'\n      }\n      \n      return username + '@' + domain\n    }\n  }\n}\n</script>\n\n<style scoped>\n.doctor-profile {\n  padding-bottom: 20px;\n}\n\n.profile-card,\n.security-card {\n  margin-bottom: 20px;\n}\n\n.avatar-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.upload-avatar {\n  margin-top: 15px;\n}\n\n.verify-code-container {\n  display: flex;\n  align-items: center;\n}\n\n.verify-code-input {\n  margin-right: 10px;\n}\n\n.security-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 15px 0;\n  border-bottom: 1px solid #ebeef5;\n}\n\n.security-item:last-child {\n  border-bottom: none;\n}\n\n.security-info {\n  display: flex;\n  align-items: center;\n}\n\n.security-info i {\n  font-size: 24px;\n  color: #409EFF;\n  margin-right: 15px;\n}\n\n.security-text h4 {\n  margin: 0;\n  margin-bottom: 5px;\n}\n\n.security-text p {\n  margin: 0;\n  font-size: 13px;\n  color: #909399;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}