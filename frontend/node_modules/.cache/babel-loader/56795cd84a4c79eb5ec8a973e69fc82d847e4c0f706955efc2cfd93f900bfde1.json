{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nexport default {\n  __name: 'DatabaseInfo',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const loading = ref(false);\n    const dbInfo = ref(null);\n    const sysInfo = ref(null);\n    const logId = ref('');\n    const logDetail = ref(null);\n    const logLoading = ref(false);\n    const fixLoading = ref(false);\n\n    // 获取数据库信息\n    const refreshDbInfo = async () => {\n      loading.value = true;\n      try {\n        dbInfo.value = await store.dispatch('getDatabaseInfo');\n        sysInfo.value = await store.dispatch('getSystemInfo');\n      } catch (error) {\n        console.error('获取信息失败:', error);\n        ElMessage.error('获取数据库信息失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 根据ID查询日志\n    const fetchLogById = async () => {\n      if (!logId.value) {\n        ElMessage.warning('请输入日志ID');\n        return;\n      }\n      logLoading.value = true;\n      try {\n        const log = await store.dispatch('fetchAttackLogById', logId.value);\n        if (log) {\n          logDetail.value = log;\n        } else {\n          ElMessage.warning(`未找到ID为${logId.value}的日志记录`);\n          logDetail.value = null;\n        }\n      } catch (error) {\n        console.error('获取日志失败:', error);\n        ElMessage.error('获取日志记录失败');\n      } finally {\n        logLoading.value = false;\n      }\n    };\n\n    // 获取危险等级对应的tag类型\n    const getSeverityType = severity => {\n      switch (severity) {\n        case 'high':\n          return 'danger';\n        case 'medium':\n          return 'warning';\n        default:\n          return 'info';\n      }\n    };\n\n    // 日期格式化\n    const formatDate = dateStr => {\n      if (!dateStr) return '';\n      const date = new Date(dateStr);\n      return date.toLocaleString();\n    };\n\n    // 修复数据库\n    const fixDatabase = async () => {\n      fixLoading.value = true;\n      try {\n        await store.dispatch('fixDatabase');\n        ElMessage.success('数据库修复成功');\n        await refreshDbInfo();\n      } catch (error) {\n        console.error('修复数据库失败:', error);\n        ElMessage.error('修复数据库失败');\n      } finally {\n        fixLoading.value = false;\n      }\n    };\n    onMounted(() => {\n      refreshDbInfo();\n    });\n    const __returned__ = {\n      store,\n      loading,\n      dbInfo,\n      sysInfo,\n      logId,\n      logDetail,\n      logLoading,\n      fixLoading,\n      refreshDbInfo,\n      fetchLogById,\n      getSeverityType,\n      formatDate,\n      fixDatabase,\n      ref,\n      onMounted,\n      get useStore() {\n        return useStore;\n      },\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","useStore","ElMessage","store","loading","dbInfo","sysInfo","logId","logDetail","logLoading","fixLoading","refreshDbInfo","value","dispatch","error","console","fetchLogById","warning","log","getSeverityType","severity","formatDate","dateStr","date","Date","toLocaleString","fixDatabase","success"],"sources":["D:/Desktop/AI接单项目/进行中/20250321-WX-WEB-01/工作文件/xss-defense-system/frontend/src/views/DatabaseInfo.vue"],"sourcesContent":["<template>\r\n  <div class=\"dbinfo-container\">\r\n    <h2 class=\"dbinfo-title\">数据库信息</h2>\r\n\r\n    <el-row :gutter=\"20\">\r\n      <el-col :span=\"12\">\r\n        <el-card class=\"info-card\" shadow=\"hover\">\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <h3>数据库连接信息</h3>\r\n              <div>\r\n                <el-button type=\"primary\" @click=\"refreshDbInfo\" :loading=\"loading\">刷新</el-button>\r\n                <el-button type=\"success\" @click=\"fixDatabase\" :loading=\"fixLoading\">修复数据库</el-button>\r\n              </div>\r\n            </div>\r\n          </template>\r\n\r\n          <div v-if=\"loading\" class=\"loading-container\">\r\n            <el-skeleton :rows=\"5\" animated />\r\n          </div>\r\n\r\n          <div v-else-if=\"dbInfo\">\r\n            <el-descriptions :column=\"1\" border>\r\n              <el-descriptions-item label=\"连接状态\">\r\n                <el-tag :type=\"dbInfo.status === 'connected' ? 'success' : 'danger'\">\r\n                  {{ dbInfo.status === 'connected' ? '已连接' : '连接失败' }}\r\n                </el-tag>\r\n              </el-descriptions-item>\r\n              <el-descriptions-item label=\"数据库URL\">{{ dbInfo.url }}</el-descriptions-item>\r\n              <el-descriptions-item label=\"数据库产品\">{{ dbInfo.product }}</el-descriptions-item>\r\n              <el-descriptions-item label=\"数据库版本\">{{ dbInfo.version }}</el-descriptions-item>\r\n              <el-descriptions-item label=\"驱动\">{{ dbInfo.driver }}</el-descriptions-item>\r\n              <el-descriptions-item label=\"攻击日志记录数\">\r\n                <el-tag type=\"info\">{{ dbInfo.logsCount || 0 }}</el-tag>\r\n              </el-descriptions-item>\r\n            </el-descriptions>\r\n          </div>\r\n\r\n          <div v-else class=\"empty-info\">\r\n            <el-empty description=\"无法获取数据库信息\" />\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n\r\n      <el-col :span=\"12\">\r\n        <el-card class=\"info-card\" shadow=\"hover\">\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <h3>系统信息</h3>\r\n            </div>\r\n          </template>\r\n\r\n          <div v-if=\"loading\" class=\"loading-container\">\r\n            <el-skeleton :rows=\"5\" animated />\r\n          </div>\r\n\r\n          <div v-else-if=\"sysInfo\">\r\n            <el-descriptions :column=\"1\" border>\r\n              <el-descriptions-item label=\"Java版本\">{{ sysInfo.javaVersion }}</el-descriptions-item>\r\n              <el-descriptions-item label=\"Java供应商\">{{ sysInfo.javaVendor }}</el-descriptions-item>\r\n              <el-descriptions-item label=\"操作系统\">{{ sysInfo.osName }}</el-descriptions-item>\r\n              <el-descriptions-item label=\"系统版本\">{{ sysInfo.osVersion }}</el-descriptions-item>\r\n              <el-descriptions-item label=\"系统架构\">{{ sysInfo.osArch }}</el-descriptions-item>\r\n            </el-descriptions>\r\n          </div>\r\n\r\n          <div v-else class=\"empty-info\">\r\n            <el-empty description=\"无法获取系统信息\" />\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <el-card v-if=\"dbInfo && dbInfo.status === 'connected'\" class=\"query-card\" shadow=\"hover\">\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <h3>查询攻击日志记录</h3>\r\n        </div>\r\n      </template>\r\n\r\n      <div class=\"query-form\">\r\n        <el-form :inline=\"true\">\r\n          <el-form-item label=\"记录ID\">\r\n            <el-input v-model=\"logId\" placeholder=\"输入日志ID\" />\r\n          </el-form-item>\r\n          <el-form-item>\r\n            <el-button type=\"primary\" @click=\"fetchLogById\" :loading=\"logLoading\">查询</el-button>\r\n          </el-form-item>\r\n        </el-form>\r\n      </div>\r\n\r\n      <div v-if=\"logDetail\" class=\"log-detail\">\r\n        <el-alert\r\n          title=\"数据库记录详情\"\r\n          type=\"success\"\r\n          :closable=\"false\"\r\n          show-icon\r\n        />\r\n        \r\n        <el-descriptions :column=\"1\" border>\r\n          <el-descriptions-item label=\"记录ID\">{{ logDetail.id }}</el-descriptions-item>\r\n          <el-descriptions-item label=\"记录时间\">{{ formatDate(logDetail.timestamp) }}</el-descriptions-item>\r\n          <el-descriptions-item label=\"来源\">{{ logDetail.source }}</el-descriptions-item>\r\n          <el-descriptions-item label=\"IP地址\">{{ logDetail.ipAddress }}</el-descriptions-item>\r\n          <el-descriptions-item label=\"攻击载荷\">\r\n            <div class=\"payload-container\">\r\n              <pre>{{ logDetail.payload }}</pre>\r\n            </div>\r\n          </el-descriptions-item>\r\n          <el-descriptions-item label=\"攻击类型\">{{ logDetail.attackType }}</el-descriptions-item>\r\n          <el-descriptions-item label=\"危险等级\">\r\n            <el-tag :type=\"getSeverityType(logDetail.severity)\">{{ logDetail.severity }}</el-tag>\r\n          </el-descriptions-item>\r\n          <el-descriptions-item label=\"防御状态\">\r\n            <el-tag :type=\"logDetail.prevented ? 'success' : 'danger'\">\r\n              {{ logDetail.prevented ? '已防御' : '未防御' }}\r\n            </el-tag>\r\n          </el-descriptions-item>\r\n          <el-descriptions-item label=\"防御措施\">{{ logDetail.defenseMeasure }}</el-descriptions-item>\r\n        </el-descriptions>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nconst store = useStore()\r\nconst loading = ref(false)\r\nconst dbInfo = ref(null)\r\nconst sysInfo = ref(null)\r\nconst logId = ref('')\r\nconst logDetail = ref(null)\r\nconst logLoading = ref(false)\r\nconst fixLoading = ref(false)\r\n\r\n// 获取数据库信息\r\nconst refreshDbInfo = async () => {\r\n  loading.value = true\r\n  try {\r\n    dbInfo.value = await store.dispatch('getDatabaseInfo')\r\n    sysInfo.value = await store.dispatch('getSystemInfo')\r\n  } catch (error) {\r\n    console.error('获取信息失败:', error)\r\n    ElMessage.error('获取数据库信息失败')\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 根据ID查询日志\r\nconst fetchLogById = async () => {\r\n  if (!logId.value) {\r\n    ElMessage.warning('请输入日志ID')\r\n    return\r\n  }\r\n  \r\n  logLoading.value = true\r\n  try {\r\n    const log = await store.dispatch('fetchAttackLogById', logId.value)\r\n    if (log) {\r\n      logDetail.value = log\r\n    } else {\r\n      ElMessage.warning(`未找到ID为${logId.value}的日志记录`)\r\n      logDetail.value = null\r\n    }\r\n  } catch (error) {\r\n    console.error('获取日志失败:', error)\r\n    ElMessage.error('获取日志记录失败')\r\n  } finally {\r\n    logLoading.value = false\r\n  }\r\n}\r\n\r\n// 获取危险等级对应的tag类型\r\nconst getSeverityType = (severity) => {\r\n  switch(severity) {\r\n    case 'high': return 'danger'\r\n    case 'medium': return 'warning'\r\n    default: return 'info'\r\n  }\r\n}\r\n\r\n// 日期格式化\r\nconst formatDate = (dateStr) => {\r\n  if (!dateStr) return ''\r\n  const date = new Date(dateStr)\r\n  return date.toLocaleString()\r\n}\r\n\r\n// 修复数据库\r\nconst fixDatabase = async () => {\r\n  fixLoading.value = true\r\n  try {\r\n    await store.dispatch('fixDatabase')\r\n    ElMessage.success('数据库修复成功')\r\n    await refreshDbInfo()\r\n  } catch (error) {\r\n    console.error('修复数据库失败:', error)\r\n    ElMessage.error('修复数据库失败')\r\n  } finally {\r\n    fixLoading.value = false\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  refreshDbInfo()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.dbinfo-container {\r\n    margin-top: 20;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.dbinfo-title {\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.info-card {\r\n  height: 100%;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.query-card {\r\n  margin-top: 20px;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.loading-container {\r\n  padding: 20px;\r\n}\r\n\r\n.empty-info {\r\n  padding: 40px 0;\r\n}\r\n\r\n.query-form {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.log-detail {\r\n  margin-top: 20px;\r\n}\r\n\r\n.payload-container {\r\n  max-height: 150px;\r\n  overflow-y: auto;\r\n  background-color: #f5f7fa;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n}\r\n\r\npre {\r\n  white-space: pre-wrap;\r\n  word-wrap: break-word;\r\n  margin: 0;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}