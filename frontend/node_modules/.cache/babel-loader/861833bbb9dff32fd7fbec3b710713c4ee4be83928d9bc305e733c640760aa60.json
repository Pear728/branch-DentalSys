{"ast":null,"code":"import { ref, reactive, onMounted, computed } from 'vue';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nexport default {\n  __name: 'DefenseConfig',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const isLoading = computed(() => store.state.isLoading);\n\n    // 配置表单\n    const config = reactive({\n      // 输入验证\n      enableInputValidation: true,\n      inputValidationLevel: 'medium',\n      // 输出编码\n      enableOutputEncoding: true,\n      encodingContexts: ['html', 'attribute'],\n      // CSP\n      enableCsp: true,\n      cspPolicy: \"default-src 'self'; script-src 'self'; object-src 'none';\",\n      cspReportOnly: false,\n      // Cookie安全\n      enableHttpOnly: true,\n      enableSecure: true,\n      sameSite: 'Lax'\n    });\n\n    // 加载配置\n    const loadConfig = async () => {\n      try {\n        // 实际应用中应从后端获取\n        // const response = await store.dispatch('getDefenseConfig')\n        // Object.assign(config, response.data)\n\n        // 这里使用Store中的配置\n        const storeConfig = store.getters.getDefenseConfig;\n        Object.assign(config, {\n          enableInputValidation: storeConfig.enableInputValidation,\n          enableOutputEncoding: storeConfig.enableOutputEncoding,\n          enableCsp: storeConfig.enableCsp,\n          cspPolicy: storeConfig.cspPolicy\n        });\n      } catch (error) {\n        console.error('Failed to load config:', error);\n        ElMessage.error('加载配置失败');\n      }\n    };\n\n    // 保存配置\n    const saveConfig = async () => {\n      try {\n        // 实际应用中应调用API保存配置\n        // await store.dispatch('saveDefenseConfig', config)\n\n        // 这里直接更新Store\n        store.commit('SET_DEFENSE_CONFIG', {\n          enableInputValidation: config.enableInputValidation,\n          enableOutputEncoding: config.enableOutputEncoding,\n          enableCsp: config.enableCsp,\n          cspPolicy: config.cspPolicy\n        });\n        ElMessage.success('配置已保存');\n      } catch (error) {\n        console.error('Failed to save config:', error);\n        ElMessage.error('保存配置失败');\n      }\n    };\n\n    // 重置配置\n    const resetConfig = () => {\n      Object.assign(config, {\n        enableInputValidation: true,\n        inputValidationLevel: 'medium',\n        enableOutputEncoding: true,\n        encodingContexts: ['html', 'attribute'],\n        enableCsp: true,\n        cspPolicy: \"default-src 'self'; script-src 'self'; object-src 'none';\",\n        cspReportOnly: false,\n        enableHttpOnly: true,\n        enableSecure: true,\n        sameSite: 'Lax'\n      });\n    };\n    onMounted(() => {\n      loadConfig();\n    });\n    const __returned__ = {\n      store,\n      isLoading,\n      config,\n      loadConfig,\n      saveConfig,\n      resetConfig,\n      ref,\n      reactive,\n      onMounted,\n      computed,\n      get useStore() {\n        return useStore;\n      },\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","computed","useStore","ElMessage","store","isLoading","state","config","enableInputValidation","inputValidationLevel","enableOutputEncoding","encodingContexts","enableCsp","cspPolicy","cspReportOnly","enableHttpOnly","enableSecure","sameSite","loadConfig","storeConfig","getters","getDefenseConfig","Object","assign","error","console","saveConfig","commit","success","resetConfig"],"sources":["D:/Desktop/AI接单项目/进行中/20250321-WX-WEB-01/工作文件/xss-defense-system/frontend/src/views/DefenseConfig.vue"],"sourcesContent":["<template>\r\n  <div class=\"config-container\">\r\n    <h2>XSS防御配置</h2>\r\n    \r\n    <el-card>\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <h3>防御策略配置</h3>\r\n        </div>\r\n      </template>\r\n      \r\n      <el-form :model=\"config\" label-width=\"180px\" ref=\"configForm\">\r\n        <el-divider content-position=\"left\">输入验证</el-divider>\r\n        \r\n        <el-form-item label=\"启用输入验证\">\r\n          <el-switch v-model=\"config.enableInputValidation\" />\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"验证级别\" v-if=\"config.enableInputValidation\">\r\n          <el-select v-model=\"config.inputValidationLevel\" style=\"width: 100%\">\r\n            <el-option label=\"低 - 仅过滤基本XSS模式\" value=\"low\" />\r\n            <el-option label=\"中 - 过滤常见XSS攻击向量\" value=\"medium\" />\r\n            <el-option label=\"高 - 严格过滤所有可疑输入\" value=\"high\" />\r\n          </el-select>\r\n        </el-form-item>\r\n        \r\n        <el-divider content-position=\"left\">输出编码</el-divider>\r\n        \r\n        <el-form-item label=\"启用输出编码\">\r\n          <el-switch v-model=\"config.enableOutputEncoding\" />\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"编码上下文\" v-if=\"config.enableOutputEncoding\">\r\n          <el-checkbox-group v-model=\"config.encodingContexts\">\r\n            <el-checkbox label=\"html\">HTML上下文</el-checkbox>\r\n            <el-checkbox label=\"attribute\">HTML属性上下文</el-checkbox>\r\n            <el-checkbox label=\"javascript\">JavaScript上下文</el-checkbox>\r\n            <el-checkbox label=\"url\">URL上下文</el-checkbox>\r\n          </el-checkbox-group>\r\n        </el-form-item>\r\n        \r\n        <el-divider content-position=\"left\">内容安全策略 (CSP)</el-divider>\r\n        \r\n        <el-form-item label=\"启用CSP\">\r\n          <el-switch v-model=\"config.enableCsp\" />\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"CSP策略\" v-if=\"config.enableCsp\">\r\n          <el-input\r\n            v-model=\"config.cspPolicy\"\r\n            type=\"textarea\"\r\n            :rows=\"3\"\r\n            placeholder=\"输入CSP策略，例如：default-src 'self'; script-src 'self'\"\r\n          />\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"CSP报告模式\">\r\n          <el-switch v-model=\"config.cspReportOnly\" :disabled=\"!config.enableCsp\" />\r\n          <span class=\"hint-text\">开启后，浏览器只会报告违规而不会阻止内容</span>\r\n        </el-form-item>\r\n        \r\n        <el-divider content-position=\"left\">Cookie安全</el-divider>\r\n        \r\n        <el-form-item label=\"启用HttpOnly\">\r\n          <el-switch v-model=\"config.enableHttpOnly\" />\r\n          <span class=\"hint-text\">防止JavaScript访问Cookie</span>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"启用Secure标志\">\r\n          <el-switch v-model=\"config.enableSecure\" />\r\n          <span class=\"hint-text\">仅通过HTTPS发送Cookie</span>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"启用SameSite\">\r\n          <el-select v-model=\"config.sameSite\" style=\"width: 100%\">\r\n            <el-option label=\"None - 不启用SameSite\" value=\"None\" />\r\n            <el-option label=\"Lax - 允许导航到目标网址的Get请求\" value=\"Lax\" />\r\n            <el-option label=\"Strict - 仅允许同站点请求\" value=\"Strict\" />\r\n          </el-select>\r\n        </el-form-item>\r\n        \r\n        <el-divider></el-divider>\r\n        \r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"saveConfig\" :loading=\"isLoading\">保存配置</el-button>\r\n          <el-button @click=\"resetConfig\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n    \r\n    <el-card class=\"tips-card\">\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <h3>防御策略提示</h3>\r\n        </div>\r\n      </template>\r\n      \r\n      <el-collapse accordion>\r\n        <el-collapse-item title=\"输入验证最佳实践\" name=\"1\">\r\n          <div>\r\n            <p>输入验证是防御XSS攻击的第一道防线，应该根据具体场景和数据类型应用不同的验证规则：</p>\r\n            <ul>\r\n              <li>对于纯数字输入，使用正则表达式确保只接受数字</li>\r\n              <li>对于URL，验证协议是否为http/https，避免javascript:伪协议</li>\r\n              <li>对于富文本内容，使用白名单方法限制允许的HTML标签和属性</li>\r\n            </ul>\r\n          </div>\r\n        </el-collapse-item>\r\n        \r\n        <el-collapse-item title=\"输出编码说明\" name=\"2\">\r\n          <div>\r\n            <p>根据输出上下文选择合适的编码方式：</p>\r\n            <ul>\r\n              <li>HTML上下文：将&lt;, &gt;, &amp;, &quot;, &#39;等字符转换为对应的HTML实体</li>\r\n              <li>HTML属性上下文：除了HTML编码外，还需要对引号进行特殊处理</li>\r\n              <li>JavaScript上下文：使用\\uXXXX Unicode转义序列</li>\r\n              <li>URL上下文：使用encodeURIComponent进行编码</li>\r\n            </ul>\r\n          </div>\r\n        </el-collapse-item>\r\n        \r\n        <el-collapse-item title=\"CSP配置示例\" name=\"3\">\r\n          <div>\r\n            <p>内容安全策略(CSP)常见指令：</p>\r\n            <ul>\r\n              <li><code>default-src 'self';</code> - 默认只允许加载同源资源</li>\r\n              <li><code>script-src 'self';</code> - 脚本只能从同源加载</li>\r\n              <li><code>style-src 'self';</code> - 样式表只能从同源加载</li>\r\n              <li><code>img-src 'self' data:;</code> - 图片可以从同源和data URI加载</li>\r\n              <li><code>connect-src 'self';</code> - XHR, WebSockets和EventSource只能连接到同源</li>\r\n            </ul>\r\n            <p>推荐配置：<code>default-src 'self'; script-src 'self'; object-src 'none';</code></p>\r\n          </div>\r\n        </el-collapse-item>\r\n      </el-collapse>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, onMounted, computed } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nconst store = useStore()\r\nconst isLoading = computed(() => store.state.isLoading)\r\n\r\n// 配置表单\r\nconst config = reactive({\r\n  // 输入验证\r\n  enableInputValidation: true,\r\n  inputValidationLevel: 'medium',\r\n  \r\n  // 输出编码\r\n  enableOutputEncoding: true,\r\n  encodingContexts: ['html', 'attribute'],\r\n  \r\n  // CSP\r\n  enableCsp: true,\r\n  cspPolicy: \"default-src 'self'; script-src 'self'; object-src 'none';\",\r\n  cspReportOnly: false,\r\n  \r\n  // Cookie安全\r\n  enableHttpOnly: true,\r\n  enableSecure: true,\r\n  sameSite: 'Lax'\r\n})\r\n\r\n// 加载配置\r\nconst loadConfig = async () => {\r\n  try {\r\n    // 实际应用中应从后端获取\r\n    // const response = await store.dispatch('getDefenseConfig')\r\n    // Object.assign(config, response.data)\r\n    \r\n    // 这里使用Store中的配置\r\n    const storeConfig = store.getters.getDefenseConfig\r\n    Object.assign(config, {\r\n      enableInputValidation: storeConfig.enableInputValidation,\r\n      enableOutputEncoding: storeConfig.enableOutputEncoding,\r\n      enableCsp: storeConfig.enableCsp,\r\n      cspPolicy: storeConfig.cspPolicy\r\n    })\r\n  } catch (error) {\r\n    console.error('Failed to load config:', error)\r\n    ElMessage.error('加载配置失败')\r\n  }\r\n}\r\n\r\n// 保存配置\r\nconst saveConfig = async () => {\r\n  try {\r\n    // 实际应用中应调用API保存配置\r\n    // await store.dispatch('saveDefenseConfig', config)\r\n    \r\n    // 这里直接更新Store\r\n    store.commit('SET_DEFENSE_CONFIG', {\r\n      enableInputValidation: config.enableInputValidation,\r\n      enableOutputEncoding: config.enableOutputEncoding,\r\n      enableCsp: config.enableCsp,\r\n      cspPolicy: config.cspPolicy\r\n    })\r\n    \r\n    ElMessage.success('配置已保存')\r\n  } catch (error) {\r\n    console.error('Failed to save config:', error)\r\n    ElMessage.error('保存配置失败')\r\n  }\r\n}\r\n\r\n// 重置配置\r\nconst resetConfig = () => {\r\n  Object.assign(config, {\r\n    enableInputValidation: true,\r\n    inputValidationLevel: 'medium',\r\n    enableOutputEncoding: true,\r\n    encodingContexts: ['html', 'attribute'],\r\n    enableCsp: true,\r\n    cspPolicy: \"default-src 'self'; script-src 'self'; object-src 'none';\",\r\n    cspReportOnly: false,\r\n    enableHttpOnly: true,\r\n    enableSecure: true,\r\n    sameSite: 'Lax'\r\n  })\r\n}\r\n\r\nonMounted(() => {\r\n  loadConfig()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.config-container {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.hint-text {\r\n  font-size: 0.9em;\r\n  color: #909399;\r\n  margin-left: 10px;\r\n}\r\n\r\n.tips-card {\r\n  margin-top: 20px;\r\n}\r\n\r\ncode {\r\n  background-color: #f5f7fa;\r\n  padding: 2px 4px;\r\n  border-radius: 4px;\r\n  font-family: monospace;\r\n}\r\n\r\nul {\r\n  margin-top: 10px;\r\n  padding-left: 20px;\r\n}\r\n\r\nli {\r\n  margin-bottom: 5px;\r\n}\r\n</style> "],"mappings":"AA4IA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,KAAK;AACxD,SAASC,QAAQ,QAAQ,MAAM;AAC/B,SAASC,SAAS,QAAQ,cAAc;;;;;;;IAExC,MAAMC,KAAK,GAAGF,QAAQ,CAAC,CAAC;IACxB,MAAMG,SAAS,GAAGJ,QAAQ,CAAC,MAAMG,KAAK,CAACE,KAAK,CAACD,SAAS,CAAC;;IAEvD;IACA,MAAME,MAAM,GAAGR,QAAQ,CAAC;MACtB;MACAS,qBAAqB,EAAE,IAAI;MAC3BC,oBAAoB,EAAE,QAAQ;MAE9B;MACAC,oBAAoB,EAAE,IAAI;MAC1BC,gBAAgB,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC;MAEvC;MACAC,SAAS,EAAE,IAAI;MACfC,SAAS,EAAE,2DAA2D;MACtEC,aAAa,EAAE,KAAK;MAEpB;MACAC,cAAc,EAAE,IAAI;MACpBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE;IACZ,CAAC,CAAC;;IAEF;IACA,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF;QACA;QACA;;QAEA;QACA,MAAMC,WAAW,GAAGf,KAAK,CAACgB,OAAO,CAACC,gBAAgB;QAClDC,MAAM,CAACC,MAAM,CAAChB,MAAM,EAAE;UACpBC,qBAAqB,EAAEW,WAAW,CAACX,qBAAqB;UACxDE,oBAAoB,EAAES,WAAW,CAACT,oBAAoB;UACtDE,SAAS,EAAEO,WAAW,CAACP,SAAS;UAChCC,SAAS,EAAEM,WAAW,CAACN;QACzB,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9CrB,SAAS,CAACqB,KAAK,CAAC,QAAQ,CAAC;MAC3B;IACF,CAAC;;IAED;IACA,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF;QACA;;QAEA;QACAtB,KAAK,CAACuB,MAAM,CAAC,oBAAoB,EAAE;UACjCnB,qBAAqB,EAAED,MAAM,CAACC,qBAAqB;UACnDE,oBAAoB,EAAEH,MAAM,CAACG,oBAAoB;UACjDE,SAAS,EAAEL,MAAM,CAACK,SAAS;UAC3BC,SAAS,EAAEN,MAAM,CAACM;QACpB,CAAC,CAAC;QAEFV,SAAS,CAACyB,OAAO,CAAC,OAAO,CAAC;MAC5B,CAAC,CAAC,OAAOJ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9CrB,SAAS,CAACqB,KAAK,CAAC,QAAQ,CAAC;MAC3B;IACF,CAAC;;IAED;IACA,MAAMK,WAAW,GAAGA,CAAA,KAAM;MACxBP,MAAM,CAACC,MAAM,CAAChB,MAAM,EAAE;QACpBC,qBAAqB,EAAE,IAAI;QAC3BC,oBAAoB,EAAE,QAAQ;QAC9BC,oBAAoB,EAAE,IAAI;QAC1BC,gBAAgB,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC;QACvCC,SAAS,EAAE,IAAI;QACfC,SAAS,EAAE,2DAA2D;QACtEC,aAAa,EAAE,KAAK;QACpBC,cAAc,EAAE,IAAI;QACpBC,YAAY,EAAE,IAAI;QAClBC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC;IAEDjB,SAAS,CAAC,MAAM;MACdkB,UAAU,CAAC,CAAC;IACd,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}